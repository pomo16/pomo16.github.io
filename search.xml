<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hive</title>
      <link href="/2020/07/15/Hive/"/>
      <url>/2020/07/15/Hive/</url>
      
        <content type="html"><![CDATA[<h2 id="Hive-简介"><a href="#Hive-简介" class="headerlink" title="Hive 简介"></a>Hive 简介</h2><p>Hive 是一个构建在 Hadoop 之上的数据仓库，它可以将结构化的数据文件映射成表，并提供类 SQL 查询功能，用于查询的 SQL 语句会被转化为 MapReduce 作业，然后提交到 Hadoop 上运行。有以下特点：</p><ul><li>简单、易上手（sql）</li><li>灵活性高，可自定义用户函数（UDF）和存储格式</li><li>为超大的数据集设计的计算和存储能力，集群扩展容易</li><li>统一的元数据管理，可与 presto／impala／sparksql 等共享数据</li><li>执行延迟高，不适合做数据的实时处理，但适合做海量数据的离线处理</li></ul><h2 id="Hive-体系架构"><a href="#Hive-体系架构" class="headerlink" title="Hive 体系架构"></a>Hive 体系架构</h2><p><img src="http://qnya.pomo16.club/315.png" alt style="zoom:50%;"></p><ul><li><strong>command-line shell &amp; thrift/jdbc</strong>：数据操作方式<ul><li><strong>command-line shell</strong>：通过 hive 命令行的方式来操作数据</li><li><strong>thrift/jdbc</strong>：通过 thrift 协议按照标准的 JDBC 的方式操作数据</li></ul></li><li><strong>Metastore</strong>：一个管理库表元数据的服务<ul><li>客户端连接 Metastore 服务，Metastore 再去连接 MySQL 数据库来存取元数据。有了 Metastore 服务，就可以有多个客户端同时连接，而且这些客户端不需要知道 MySQL 数据库的用户名和密码，只需要连接 Metastore 服务即可。</li></ul></li><li><strong>HQL 执行流程</strong><ul><li>语法解析：Antlr 定义 SQL 的语法规则，完成 SQL 词法、语法解析，将 SQL 转化为抽象语法树 AST Tree</li><li>语义解析：遍历 AST Tree，抽象出查询的基本组成单元 QueryBlock</li><li>生成逻辑执行计划：遍历 QueryBlock，翻译为执行操作树 OperatorTree</li><li>优化逻辑执行计划：逻辑层优化器进行 OperatorTree 变换，合并不必要的 ReduceSinkOperator，减少 shuffle 数据量</li><li>生成物理执行计划：遍历 OperatorTree，翻译为 MapReduce 任务</li><li>优化物理执行计划：物理层优化器进行 MapReduce 任务的变换，生成最终的执行计划</li></ul></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><table><thead><tr><th>大类</th><th>类型</th></tr></thead><tbody><tr><td><strong>Integers（整型）</strong></td><td>TINYINT（1 字节的有符号整数）、SMALLINT（2 字节的有符号整数）、INT（4 字节的有符号整数）、BIGINT（8 字节的有符号整数）</td></tr><tr><td><strong>Boolean（布尔型）</strong></td><td>BOOLEAN（TRUE/FALSE）</td></tr><tr><td><strong>Floating point numbers（浮点型）</strong></td><td>FLOAT（单精度浮点型）、DOUBLE（双精度浮点型）</td></tr><tr><td><strong>Fixed point numbers（定点数）</strong></td><td>DECIMAL（用户自定义精度定点数，比如 DECIMAL(7,2)）</td></tr><tr><td><strong>String types（字符串）</strong></td><td>STRING（指定字符集的字符序列）、VARCHAR（具有最大长度限制的字符序列）、 CHAR（固定长度的字符序列）</td></tr><tr><td><strong>Date and time types（日期时间类型）</strong></td><td>TIMESTAMP（时间戳）、TIMESTAMP WITH LOCAL TIME ZONE（时间戳，纳秒精度）、DATE（日期类型）</td></tr><tr><td><strong>Binary types（二进制类型）</strong></td><td>BINARY（字节序列）</td></tr></tbody></table><p>TIMESTAMP 和 TIMESTAMP WITH LOCAL TIME ZONE 的区别：</p><ul><li><strong>TIMESTAMP WITH LOCAL TIME ZONE</strong>：用户提交时间给数据库时，会被转换成数据库所在的时区来保存。查询时则按照查询客户端的不同，转换为查询客户端所在时区的时间</li><li><strong>TIMESTAMP</strong> ：提交什么时间就保存什么时间，查询时也不做任何转换</li></ul><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p>Hive 中基本数据类型遵循以下的层次结构，按照这个层次结构，子类型到祖先类型允许隐式转换。例如 INT 类型的数据允许隐式转换为 BIGINT 类型。额外注意的是：按照类型层次结构允许将 STRING 类型隐式转换为 DOUBLE 类型。</p><p><img src="/Users/bytedance/Desktop/blog/temp/316.png" alt="image-20200712102125576" style="zoom:50%;"></p><h3 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h3><table><thead><tr><th>类型</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><strong>STRUCT</strong></td><td>类似于对象，是字段的集合，字段的类型可以不同，可以使用 <code>名称.字段名</code> 方式进行访问</td><td>STRUCT (‘xiaoming’, 12 , ‘2018-12-12’)</td></tr><tr><td><strong>MAP</strong></td><td>键值对的集合，可以使用 <code>名称[key]</code> 的方式访问对应的值</td><td>map(‘a’, 1, ‘b’, 2)</td></tr><tr><td><strong>ARRAY</strong></td><td>数组是一组具有相同类型和名称的变量的集合，可以使用 <code>名称[index]</code> 访问对应的值</td><td>ARRAY(‘a’, ‘b’, ‘c’, ‘d’)</td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students(</span><br><span class="line">  <span class="keyword">name</span>      <span class="keyword">STRING</span>,   <span class="comment">-- 姓名</span></span><br><span class="line">  age       <span class="built_in">INT</span>,      <span class="comment">-- 年龄</span></span><br><span class="line">  subject   <span class="built_in">ARRAY</span>&lt;<span class="keyword">STRING</span>&gt;,   <span class="comment">--学科</span></span><br><span class="line">  score     <span class="keyword">MAP</span>&lt;<span class="keyword">STRING</span>,<span class="built_in">FLOAT</span>&gt;,  <span class="comment">--各个学科考试成绩</span></span><br><span class="line">  address   <span class="keyword">STRUCT</span>&lt;houseNumber:<span class="built_in">int</span>, street:<span class="keyword">STRING</span>, city:<span class="keyword">STRING</span>, province：<span class="keyword">STRING</span>&gt;  <span class="comment">--家庭居住地址</span></span><br><span class="line">) <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">"\t"</span>;</span><br></pre></td></tr></table></figure><h3 id="内容格式"><a href="#内容格式" class="headerlink" title="内容格式"></a>内容格式</h3><p>当数据存储在文本文件中，必须按照一定格式区别行和列，如使用逗号作为分隔符的 CSV 文件 (Comma-Separated Values) 或者使用制表符作为分隔值的 TSV 文件 (Tab-Separated Values)。但此时也存在一个缺点，就是正常的文件内容中也可能出现逗号或者制表符。</p><p>所以 Hive 默认使用了几个平时很少出现的字符，这些字符一般不会作为内容出现在文件中。Hive 默认的行和列分隔符如下表所示：</p><table><thead><tr><th>分隔符</th><th>描述</th></tr></thead><tbody><tr><td><strong>\n</strong></td><td>对于文本文件来说，每行是一条记录，所以可以使用换行符来分割记录</td></tr><tr><td><strong>^A (Ctrl+A)</strong></td><td>分割字段 (列)，在 CREATE TABLE 语句中也可以使用八进制编码 <code>\001</code> 来表示</td></tr><tr><td><strong>^B</strong></td><td>用于分割 ARRAY 或者 STRUCT 中的元素，或者用于 MAP 中键值对之间的分割， 在 CREATE TABLE 语句中也可以使用八进制编码 <code>\002</code> 表示</td></tr><tr><td><strong>^C</strong></td><td>用于 MAP 中键和值之间的分割，在 CREATE TABLE 语句中也可以使用八进制编码 <code>\003</code> 表示</td></tr></tbody></table><p>使用示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> page_view(viewTime <span class="built_in">INT</span>, userid <span class="built_in">BIGINT</span>)</span><br><span class="line"> <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span></span><br><span class="line">   <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\001'</span></span><br><span class="line">   COLLECTION ITEMS <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\002'</span></span><br><span class="line">   <span class="keyword">MAP</span> <span class="keyword">KEYS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\003'</span></span><br><span class="line"> <span class="keyword">STORED</span> <span class="keyword">AS</span> SEQUENCEFILE;</span><br></pre></td></tr></table></figure><h2 id="存储格式"><a href="#存储格式" class="headerlink" title="存储格式"></a>存储格式</h2><h3 id="支持的存储格式"><a href="#支持的存储格式" class="headerlink" title="支持的存储格式"></a>支持的存储格式</h3><p>Hive 会在 HDFS 为每个数据库上创建一个目录，数据库中的表是该目录的子目录，表中的数据会以文件的形式存储在对应的表目录下。Hive 支持以下几种文件存储格式：</p><table><thead><tr><th>格式</th><th>说明</th></tr></thead><tbody><tr><td><strong>TextFile</strong></td><td>存储为纯文本文件。 这是 Hive 默认的文件存储格式。这种存储方式数据不做压缩，磁盘开销大，数据解析开销大。</td></tr><tr><td><strong>SequenceFile</strong></td><td>SequenceFile 是 Hadoop API 提供的一种二进制文件，它将数据以&lt;key,value&gt;的形式序列化到文件中。这种二进制文件内部使用 Hadoop 的标准的 Writable 接口实现序列化和反序列化。它与 Hadoop API 中的 MapFile 是互相兼容的。Hive 中的 SequenceFile 继承自 Hadoop API 的 SequenceFile，不过它的 key 为空，使用 value 存放实际的值，这样是为了避免 MR 在运行 map 阶段进行额外的排序操作。</td></tr><tr><td><strong>RCFile</strong></td><td>RCFile 文件格式是 FaceBook 开源的一种 Hive 的文件存储格式，首先将表分为几个行组，对每个行组内的数据按列存储，每一列的数据都是分开存储。</td></tr><tr><td><strong>ORC Files</strong></td><td>ORC 是在一定程度上扩展了 RCFile，是对 RCFile 的优化。</td></tr><tr><td><strong>Avro Files</strong></td><td>Avro 是一个数据序列化系统，设计用于支持大批量数据交换的应用。它的主要特点有：支持二进制序列化方式，可以便捷，快速地处理大量数据；动态语言友好，Avro 提供的机制使动态语言可以方便地处理 Avro 数据。</td></tr><tr><td><strong>Parquet</strong></td><td>Parquet 是基于 Dremel 的数据模型和算法实现的，面向分析型业务的列式存储格式。它通过按列进行高效压缩和特殊的编码技术，从而在降低存储空间的同时提高了 IO 效率。</td></tr></tbody></table><blockquote><p>以上压缩格式中 ORC 和 Parquet 的综合性能突出，使用较为广泛，推荐使用这两种格式。</p></blockquote><h3 id="指定存储格式"><a href="#指定存储格式" class="headerlink" title="指定存储格式"></a>指定存储格式</h3><p>通常在创建表的时候使用 <code>STORED AS</code> 参数指定：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> page_view(viewTime <span class="built_in">INT</span>, userid <span class="built_in">BIGINT</span>)</span><br><span class="line"> <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span></span><br><span class="line">   <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\001'</span></span><br><span class="line">   COLLECTION ITEMS <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\002'</span></span><br><span class="line">   <span class="keyword">MAP</span> <span class="keyword">KEYS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\003'</span></span><br><span class="line"> <span class="keyword">STORED</span> <span class="keyword">AS</span> SEQUENCEFILE;</span><br></pre></td></tr></table></figure><ul><li>STORED AS TEXTFILE</li><li>STORED AS SEQUENCEFILE</li><li>STORED AS ORC</li><li>STORED AS PARQUET</li><li>STORED AS AVRO</li><li>STORED AS RCFILE</li></ul><h2 id="内部表和外部表"><a href="#内部表和外部表" class="headerlink" title="内部表和外部表"></a>内部表和外部表</h2><p>内部表又叫做管理表 (Managed/Internal Table)，创建表时不做任何指定，默认创建的就是内部表。想要创建外部表 (External Table)，则需要使用 External 进行修饰。 内部表和外部表主要区别如下：</p><table><thead><tr><th></th><th>内部表</th><th>外部表</th></tr></thead><tbody><tr><td>数据存储位置</td><td>内部表数据存储的位置由 hive.metastore.warehouse.dir 参数指定，默认情况下表的数据存储在 HDFS 的 <code>/user/hive/warehouse/数据库名.db/表名/</code> 目录下</td><td>外部表数据的存储位置创建表时由 <code>Location</code> 参数指定；</td></tr><tr><td>导入数据</td><td>在导入数据到内部表，内部表将数据移动到自己的数据仓库目录下，数据的生命周期由 Hive 来进行管理</td><td>外部表不会将数据移动到自己的数据仓库目录下，只是在元数据中存储了数据的位置</td></tr><tr><td>删除表</td><td>删除元数据（metadata）和文件</td><td>只删除元数据（metadata）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop核心组件</title>
      <link href="/2020/07/15/Hadoop%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/"/>
      <url>/2020/07/15/Hadoop%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>目前的大数据生态基本都依赖于 Hadoop 生态，其可靠、高效、可伸缩，可以处理 PB 级别的数据。Hadoop 核心组件包括 HDFS、YARN 和 MapReduce。</p><a id="more"></a><h2 id="HDFS——分布式文件存储系统"><a href="#HDFS——分布式文件存储系统" class="headerlink" title="HDFS——分布式文件存储系统"></a>HDFS——分布式文件存储系统</h2><p>HDFS（Hadoop Distributed File System） 是 Hadoop 下的分布式文件存储系统，具有高容错、高吞吐量等特性，可以部署在低成本的硬件上。</p><h3 id="HDFS-架构"><a href="#HDFS-架构" class="headerlink" title="HDFS 架构"></a>HDFS 架构</h3><ul><li>HDFS 遵循主/从架构，由单个 NameNode(NN) 和多个 DataNode(DN) 组成：<ul><li>NameNode：负责执行有关文件系统命名空间的操作，例如打开、关闭、重命名等。它同时还负责集群元数据的存储，记录着文件中各个数据块的位置信息。</li><li>DataNode：负责提供来自文件系统客户端的读写请求，执行块的创建、删除等操作。</li></ul></li></ul><p><img src="http://qnya.pomo16.club/308.png" style="zoom:50%;"></p><ul><li>HDFS 的文件系统命名空间的层次结构与大多数文件系统类似，支持目录和文件的创建、移动、删除等操作，支持配置用户和访问权限，但是不支持软硬链接。NameNode 负责维护文件系统命名空间，并记录变更。</li></ul><h3 id="数据复制备份"><a href="#数据复制备份" class="headerlink" title="数据复制备份"></a>数据复制备份</h3><p>Hadoop 的设计初衷是运行在廉价的机器上，这意味着硬件是不可靠的。HDFS 提供数据复制机制来保证容错性。HDFS 将每个文件存储为一系列<strong>块</strong>，每个块由多个副本来保证容错，块的大小和复制因子可以自行配置（默认块大小=128M，复制因子=3）。</p><p><img src="http://qnya.pomo16.club/309.png" style="zoom:50%;"></p><ul><li>复制原理：HDFS 一般都会部署在不同机房的多台容器上，通常同一机房容器之间的网络带宽大于跨机房容器之间的网络带宽。因此 HDFS 采用机架感知副本放置策略（可自定义策略）。<ul><li>当复制因子为 3 ：在写入程序位于 DataNode 上时，就优先将写入文件的一个副本放置在该 DataNode 上，否则放在随机 DataNode 上。之后在另一个远程机房上的任意一个节点上放置另一个副本，并在该机房上的另一个节点上放置最后一个副本。此策略可以减少机房间的写入流量，从而提高写入性能。</li><li>当复制因子大于 3：随机确定第 4 个和之后副本的放置位置，同时保持每个机房的副本数量低于上限，上限值通常为 <code>（复制系数 - 1）/ 机架数量 + 2</code>，需要注意的是不允许同一个 DataNode 上具有同一个块的多个副本。</li></ul></li><li>副本选择：为了最大限度地减少带宽消耗和读取延迟，HDFS 在执行读取请求时，优先读取距离读取器最近的副本。如果在与读取器节点相同的机房上存在副本，则优先选择该副本。如果 HDFS 群集跨越多个数据中心，则优先选择本地数据中心上的副本。</li></ul><h3 id="架构稳定性"><a href="#架构稳定性" class="headerlink" title="架构稳定性"></a>架构稳定性</h3><ul><li><strong>心跳机制和重新复制</strong>：每个 DataNode 定期向 NameNode 发送心跳消息，如果超过指定时间没有收到心跳消息，则将 DataNode 标记为死亡。NameNode 不会将任何新的 IO 请求转发给标记为死亡的 DataNode，也不会再使用这些 DataNode 上的数据。 由于数据不再可用，可能会导致某些块的复制因子小于其指定值，NameNode 会跟踪这些块，并在必要的时候进行重新复制。</li><li><strong>数据的完整性</strong>：由于存储设备故障等原因，存储在 DataNode 上的数据块也会发生损坏。为了避免读取到已经损坏的数据而导致错误，HDFS 提供了数据完整性校验机制来保证数据的完整性。（当客户端创建 HDFS 文件时，它会计算文件的每个块的<strong>校验和</strong>，并将校验和存储在同一 HDFS 命名空间下的单独的隐藏文件中。当客户端检索文件内容时，它会验证从每个 DataNode 接收的数据是否与存储在关联校验和文件中的校验和匹配。如果匹配失败，则证明数据已经损坏，此时客户端会选择从其他 DataNode 获取该块的其他可用副本。）</li><li><strong>元数据的磁盘故障</strong>：<code>FsImage</code>(元数据检查点，包含整个 HDFS 的所有目录文件信息) 和 <code>EditLog</code>(写操作记录) 是 HDFS 的核心数据，这些数据的意外丢失可能会导致整个 HDFS 服务不可用。为了避免这个问题，可以配置 NameNode 使其支持 <code>FsImage</code> 和 <code>EditLog</code> 多副本同步，这样 <code>FsImage</code> 或 <code>EditLog</code> 的任何改变都会引起每个副本 <code>FsImage</code> 和 <code>EditLog</code> 的同步更新。</li><li><strong>支持快照</strong>：快照支持在特定时刻存储数据副本，在数据意外损坏时，可以通过回滚操作恢复到健康的数据状态。</li></ul><h3 id="HDFS-特点"><a href="#HDFS-特点" class="headerlink" title="HDFS 特点"></a>HDFS 特点</h3><ul><li>高容错：多副本方案</li><li>高吞吐：支持高吞吐数据访问而非低延迟</li><li>大文件支持：文档大小可达 GB 到 TB 级别</li><li>简单一致性模型：更适合一次写入多次读取 (write-once-read-many) 的访问模型，支持将内容追加到文件末尾，但不支持数据的随机访问，不能从文件任意位置新增数据</li><li>跨平台移植性：具有良好的跨平台移植性，大部分大数据计算框架都将其作为数据持久化首选方案</li></ul><h3 id="HDFS-写数据原理"><a href="#HDFS-写数据原理" class="headerlink" title="HDFS 写数据原理"></a>HDFS 写数据原理</h3><p><img src="http://qnya.pomo16.club/310.png" style="zoom:30%;"></p><p>角色主要职能：</p><ul><li>client：文件切块</li><li>NameNode：为每个数据块分配 DataNode</li><li>DataNode：通过复制管道存储数据</li></ul><p>以客户端需要写入200M数据为例：</p><ol><li>用户向 client 提供 BLOCKSIZE（大文件会被切分成块，通常是 64M 或者 128M） 和 REPLICATION FACTOR（每个数据块会被存储在不同的地方，通常是3个）参数</li><li>client 根据参数将大文件切分成两个块（向上取整 ：200 / 128 = 2）</li><li>client 告知 NameNode 要求写入一个三备份的 128M 数据块</li><li>NameNode 分配 DataNode 并按照升序排列告知 client（DataNode1 DataNode2 DataNode3）</li><li>client 只将数据（和列表）发送给 DataNode1 存储，然后 DataNode1 将相同的数据传输给 DataNode2，以此类推直到最后一个节点（DataNode3）完成存储</li><li>当前块完成所有节点的存储后，会发送完成信号给 NameNode</li><li>NameNode 告知 client 当前数据块被成功存储和备份在 HDFS 中</li><li>client 重复 3~7 直到所有的数据块完成传输后，告知 NameNode 所有数据块已完成写入并请求关闭文件</li></ol><h3 id="HDFS-读数据原理"><a href="#HDFS-读数据原理" class="headerlink" title="HDFS 读数据原理"></a>HDFS 读数据原理</h3><ol><li>client 向 NameNode 通过文件名请求文件</li><li>NameNode 向 client 回复这个文件的所有数据块的列表和每个数据块所对应的 DataNode 的列表（按距离客户端远近排列）</li><li>client 按顺序下载数据块，向每个块对应的最近 DataNode（列表中的第一个）下载数据</li></ol><h3 id="HDFS-故障类型和检测方法"><a href="#HDFS-故障类型和检测方法" class="headerlink" title="HDFS 故障类型和检测方法"></a>HDFS 故障类型和检测方法</h3><p>由于 NameNode 挂掉基本全军覆没，所以一般主要关注 DataNode 的故障检测。</p><ul><li>故障1：节点故障<ul><li>故障检测：心跳机制（每3s发一次给 NameNode，NameNode 10min没收到就认为死亡）会排除死亡的 DataNode</li></ul></li><li>故障2：通讯故障（无法收发）<ul><li>故障检测：每次 client 发送数据给 DataNode 时，接收者都会回复一个应答信号。有重试机制，多次失败后 client 就会认为 DataNode 挂掉或者网络故障</li></ul></li><li>故障3：数据损坏<ul><li>故障检测：client 在发送数据时头部会包含校验和，且数据和校验和会被同时存储。所有的 DataNode 定时发送数据块报告给 NameNode。在发送报告之前 DataNode 会检测校验和是否正常，不会发送损坏的数据块信息，因此 NameNode 根据数量 diff 就可得知有多少数据损坏</li></ul></li></ul><h3 id="故障处理"><a href="#故障处理" class="headerlink" title="故障处理"></a>故障处理</h3><ul><li>写入故障：client 在向 DataNode 写入数据的时候会接收应答信号，如果收不到某个 DataNode 的信号，client 就会调整通道跳过此节点。此时这个数据块没有被充分备份，NameNode 会稍后处理（详见 DataNode 故障）</li><li>读取故障：如果最近的 DataNode 挂掉，client 就会从次近的节点上读取数据</li><li>DataNode 故障<ul><li>NameNode 维护了两张表，一个是数据块列表（记录每个数据块存储在哪些 DataNode 上），一个是 DataNode 列表（记录每个 DataNode 存储了哪些数据块）。如果 NameNode 发现一个 DataNode 上的数据块已经损坏，则会更新数据块表（将此 DN 移除出该表）；如果发现是某个 DataNode 挂掉，则会同时更新两张表。</li><li>未充分备份的数据块处理：NameNode 通过定时扫描数据块列表就可以得知未充分备份的数据块，其可以要求未有备份的新 DataNode 去已有备份的 DataNode 拷贝数据块，使数据块充分备份。不过 HDFS 不保证至少存活一份数据，只负责尽可能地选择合理的备份位置。</li></ul></li></ul><h2 id="YARN——集群资源管理器"><a href="#YARN——集群资源管理器" class="headerlink" title="YARN——集群资源管理器"></a>YARN——集群资源管理器</h2><p>Apache YARN（Yet Another Resource Negotiator）是 hadoop 2.0 引入的集群资源管理系统。用户可以将各种服务框架部署在 YARN 上，由 YARN 进行统一地管理和资源分配。</p><h3 id="YARN-架构"><a href="#YARN-架构" class="headerlink" title="YARN 架构"></a>YARN 架构</h3><p><img src="http://qnya.pomo16.club/311.png" style="zoom:70%;"></p><ul><li><strong>ResourceManager</strong>：<code>ResourceManager</code> 通常在独立的机器上以后台进程的形式运行，它是整个集群资源的主要协调者和管理者。<code>ResourceManager</code> 负责给用户提交的所有应用程序分配资源，它根据应用程序优先级、队列容量、ACLs、数据位置等信息，做出决策，然后以共享的、安全的、多租户的方式制定分配策略，调度集群资源。</li><li><strong>NodeManager</strong>：<code>NodeManager</code> 是 YARN 集群中的每个具体节点的管理者。主要负责该节点内所有容器的生命周期的管理，监视资源和跟踪节点健康。具体如下：<ul><li>启动时向 <code>ResourceManager</code> 注册并定时发送心跳消息，等待 <code>ResourceManager</code> 的指令</li><li>维护 <code>Container</code> 的生命周期，监控 <code>Container</code> 的资源使用情况</li><li>管理任务运行时的相关依赖，根据 <code>ApplicationMaster</code> 的需要，在启动 <code>Container</code> 之前将需要的程序及其依赖拷贝到本地</li></ul></li></ul><ul><li><strong>ApplicationMaster</strong>：在用户提交一个应用程序时，YARN 会启动一个轻量级的进程 <code>ApplicationMaster</code>。<code>ApplicationMaster</code> 负责协调来自 <code>ResourceManager</code> 的资源，并通过 <code>NodeManager</code> 监视容器内资源的使用情况，同时还负责任务的监控与容错。具体如下：<ul><li>根据应用的运行状态来决定动态计算资源需求</li><li>向 <code>ResourceManager</code> 申请资源，监控申请的资源的使用情况</li><li>跟踪任务状态和进度，报告资源的使用情况和应用的进度信息</li><li>负责任务的容错</li></ul></li><li><strong>Container</strong>：<code>Container</code> 是 YARN 中的资源抽象，它封装了某个节点上的多维度资源，如内存、CPU、磁盘、网络等。当 AM 向 RM 申请资源时，RM 为 AM 返回的资源是用 <code>Container</code> 表示的。YARN 会为每个任务分配一个 <code>Container</code>，该任务只能使用该 <code>Container</code> 中描述的资源。<code>ApplicationMaster</code> 可在 <code>Container</code> 内运行任何类型的任务。例如，<code>MapReduce ApplicationMaster</code> 请求一个容器来启动 map 或 reduce 任务，而 <code>Giraph ApplicationMaster</code> 请求一个容器来运行 Giraph 任务。</li></ul><h3 id="YARN-工作原理简述"><a href="#YARN-工作原理简述" class="headerlink" title="YARN 工作原理简述"></a>YARN 工作原理简述</h3><p><img src="http://qnya.pomo16.club/312.png" alt></p><ol><li><code>Client</code> 提交作业到 YARN 上</li><li><code>Resource Manager</code> 选择一个 <code>Node Manager</code>，启动一个 <code>Container</code> 并运行 <code>Application Master</code> 实例</li><li><code>Application Master</code> 根据实际需要向 <code>Resource Manager</code> 请求更多的 <code>Container</code> 资源（如果作业很小, 应用管理器会选择在其自己的 JVM 中运行任务）</li><li><code>Application Master</code> 通过获取到的 <code>Container</code> 资源执行分布式计算</li></ol><h2 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h2><p>Hadoop MapReduce 是一个并行分布式计算框架，用于编写批处理应用程序。编写好的程序可以提交到 Hadoop 集群上用于并行处理大规模的数据集。</p><p>MapReduce 主要有三个阶段：</p><ul><li>Map 阶段：map 或者 mapper 将输入的数据集拆分成独立块。通常这些输入数据会存放在 HDFS，输入文件会被逐行输入到 mapper 函数中，mapper 函数会并行处理并创建一些数据块。</li><li>Shuffle 阶段：Map 转换到 Reduce 的中间过程，一般有 partitions、sort、combine 等操作</li><li>Reduce 阶段：对各个数据块上的数据并行运算，输出最终结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(input) &lt;k1, v1&gt; -&gt; map -&gt; &lt;k2, v2&gt; -&gt; shuffle -&gt; &lt;k2, v2&gt; -&gt; reduce -&gt; &lt;k3, v3&gt; (output)</span><br></pre></td></tr></table></figure><h3 id="MapReduce-具体流程"><a href="#MapReduce-具体流程" class="headerlink" title="MapReduce 具体流程"></a>MapReduce 具体流程</h3><p>以基本的词频统计为例：</p><p><img src="http://qnya.pomo16.club/313.png" alt style="zoom:50%;"></p><ul><li>input：读取文件</li><li>splitting：文件按行拆分，K1 为行数，V1 为对应行的文本内容</li><li>mapping：每行按空格拆分，拆分得到 List(K2, V2)，K2 代表每个单词，V2 代表出现次数</li><li>shuffling：由于 Mapping 操作可能分发到不同的节点上并行运算，因此 shuffling 需要把相同 key 的数据转发到相同节点上合并。K2 为每个单词，List(V2) 为可迭代集合，V2 为 Mapping 中的 V2</li><li>reducing：对 List(V2) 进行规约求和，最终输出词频统计结果</li></ul><p>MapReduce 编程模型中 <code>splitting</code> 和 <code>shuffing</code> 操作都是由框架实现的，需要我们自己编程实现的只有 <code>mapping</code> 和 <code>reducing</code>，这也就是 MapReduce 这个称呼的来源。</p><h3 id="Combiner-Partitioner-and-Sort"><a href="#Combiner-Partitioner-and-Sort" class="headerlink" title="Combiner, Partitioner and Sort"></a>Combiner, Partitioner and Sort</h3><p>Combiner、 Partioner 和 Sort 是 map 运算之后的可选操作，他们属于 shuffle 阶段的实现方式。</p><ul><li><p>Combiner：执行本地化的 reduce 操作，在 map 计算之后先简单地在每个节点本地进行重复 key 的合并</p></li><li><p>Partitioner：分类器，将每个 map 的输出结果分发到新的节点上，具有相同 key 值的数据会分发到同一节点</p></li><li><p>Sort：key 有序排列，一般结合了 shuffle 操作</p><p><img src="http://qnya.pomo16.club/314.png" style="zoom:70%;"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装ES相关</title>
      <link href="/2020/06/05/Docker%E5%AE%89%E8%A3%85ES%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/"/>
      <url>/2020/06/05/Docker%E5%AE%89%E8%A3%85ES%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="安装ElasticSearch"><a href="#安装ElasticSearch" class="headerlink" title="安装ElasticSearch"></a>安装ElasticSearch</h2><h4 id="镜像拉取"><a href="#镜像拉取" class="headerlink" title="镜像拉取"></a>镜像拉取</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull docker.elastic.co/elasticsearch/elasticsearch:7.1.1</span><br></pre></td></tr></table></figure><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name es -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms256m -Xmx256m" docker.elastic.co/elasticsearch/elasticsearch:7.1.1</span><br></pre></td></tr></table></figure><h4 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it es /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 显示文件</span><br><span class="line">ls</span><br><span class="line">结果如下：</span><br><span class="line">LICENSE.txt  README.textile  config  lib   modules</span><br><span class="line">NOTICE.txt   bin             data    logs  plugins</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 进入配置文件夹</span><br><span class="line">cd config</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示文件</span><br><span class="line">ls</span><br><span class="line">结果如下：</span><br><span class="line">elasticsearch.keystore  ingest-geoip  log4j2.properties  roles.yml  users_roles</span><br><span class="line">elasticsearch.yml       jvm.options   role_mapping.yml   users</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 修改配置文件</span><br><span class="line">vi elasticsearch.yml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 加入跨域配置</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: "*"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 退出容器</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart es</span><br></pre></td></tr></table></figure><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:9200</span><br></pre></td></tr></table></figure><h2 id="安装ik分词器"><a href="#安装ik分词器" class="headerlink" title="安装ik分词器"></a>安装ik分词器</h2><h4 id="准备分词器压缩包"><a href="#准备分词器压缩包" class="headerlink" title="准备分词器压缩包"></a>准备分词器压缩包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it es /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/share/elasticsearch/plugins/ik</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp elasticsearch-analysis-ik-7.1.1.zip es:/usr/share/elasticsearch/plugins/ik/</span><br></pre></td></tr></table></figure><p>附：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.1.1/elasticsearch-analysis-ik-7.1.1.zip" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.1.1/elasticsearch-analysis-ik-7.1.1.zip</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -i ~/.ssh/xxx.pem -C elasticsearch-analysis-ik-7.1.1.zip &#123;user&#125;@&#123;ip&#125;:/root</span><br></pre></td></tr></table></figure><h4 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it es /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/elasticsearch/plugins/ik</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip elasticsearch-analysis-ik-7.1.1.zip</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf elasticsearch-analysis-ik-7.1.0.zip</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart es</span><br></pre></td></tr></table></figure><h2 id="基于Docker使用elasticsearch-dump"><a href="#基于Docker使用elasticsearch-dump" class="headerlink" title="基于Docker使用elasticsearch-dump"></a>基于Docker使用elasticsearch-dump</h2><h4 id="镜像拉取-1"><a href="#镜像拉取-1" class="headerlink" title="镜像拉取"></a>镜像拉取</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull taskrabbit/elasticsearch-dump</span><br></pre></td></tr></table></figure><h4 id="创建文件存放路径"><a href="#创建文件存放路径" class="headerlink" title="创建文件存放路径"></a>创建文件存放路径</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/</span><br></pre></td></tr></table></figure><h4 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h4><ul><li>运用 <code>docker run --rm -ti taskrabbit/elasticsearch-dump</code> 调用能力</li><li><code>-v &lt;your dumps dir&gt;:&lt;your mount point&gt;</code> 指定外部挂载到 docker 中的目录</li><li>三种导出方式：（实际使用方式三选一，三个文件都要导出）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 将analyzer分词从es复制到另一个es</span><br><span class="line">docker run --rm -ti elasticdump/elasticsearch-dump --input=http://ip1:9200/index1 --output=http://ip2:9200/index2 --type=analyzer</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 将mapping从index复制到另一个index</span><br><span class="line">docker run --rm -ti elasticdump/elasticsearch-dump --input=http://ip1:9200/index1 --output=http://ip1:9200/my_index --type=mapping</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span> 将data复制到文件</span><br><span class="line">docker run --rm -ti -v /data:/tmp elasticdump/elasticsearch-dump --input=http://ip:9200/my_index --output=/tmp/my_index_data.json --type=data</span><br></pre></td></tr></table></figure><ul><li>从文件恢复数据到es：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 从文件中恢复data</span><br><span class="line">docker run --rm -ti -v /data:/tmp elasticdump/elasticsearch-dump --input=/tmp/my_index_data.json --output=http://ip:9200/my_index --type=data</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> mapping和analyzer略</span><br></pre></td></tr></table></figure><ul><li>常见错误</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: connect ECONNREFUSED 127.0.0.1:9200</span><br></pre></td></tr></table></figure><p>访问 localhost 时 docker 要添加 <code>--net=host</code>，表示宿主和容器同网络，如不添加访问的是容器内的网络。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --net=host --rm -ti -v /data:/tmp elasticdump/elasticsearch-dump --input=/tmp/my_index_data.json --output=http://localhost:9200/my_index --type=data</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 数组、字符串和切片</title>
      <link href="/2020/06/03/Go-%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/"/>
      <url>/2020/06/03/Go-%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h4 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">3</span>]<span class="keyword">int</span>                    <span class="comment">// 定义长度为3的int型数组, 元素全部为0</span></span><br><span class="line"><span class="keyword">var</span> b = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;       <span class="comment">// 定义长度为3的int型数组, 元素为 1, 2, 3</span></span><br><span class="line"><span class="keyword">var</span> c = [...]<span class="keyword">int</span>&#123;<span class="number">2</span>: <span class="number">3</span>, <span class="number">1</span>: <span class="number">2</span>&#125;    <span class="comment">// 定义长度为3的int型数组, 元素为 0, 2, 3</span></span><br><span class="line"><span class="keyword">var</span> d = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>: <span class="number">5</span>, <span class="number">6</span>&#125; <span class="comment">// 定义长度为6的int型数组, 元素为 1, 2, 0, 0, 5, 6</span></span><br></pre></td></tr></table></figure><ul><li>方式a：长度确定，数组中每个元素都以零值初始化</li><li>方式b：顺序指定全部元素的初始化值，数组的长度根据元素个数自动计算</li><li>方式c：以索引的方式来指定数组初始化元素，数组长度为最大指定索引，没有明确值的元素用零值初始化</li><li>方式d：混合了方式b和方式c</li></ul><h4 id="访问数组"><a href="#访问数组" class="headerlink" title="访问数组"></a>访问数组</h4><p>Go 中数组是值语义，一个数组变量就是整个数组，并不是隐式的指向第一个元素的指针（C语言）。所以当数组变量被赋值或者被传递的时候，实际上会复制整个数组。大数组会造成大的开销，为了避免复制数组带来的开销，可以传递一个指向数组的指针，但是数组指针并不是数组。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// a 是一个数组</span></span><br><span class="line"><span class="keyword">var</span> b = &amp;a                <span class="comment">// b 是指向数组的指针</span></span><br><span class="line"></span><br><span class="line">fmt.Println(a[<span class="number">0</span>], a[<span class="number">1</span>])   <span class="comment">// 打印数组的前2个元素</span></span><br><span class="line">fmt.Println(b[<span class="number">0</span>], b[<span class="number">1</span>])   <span class="comment">// 通过数组指针访问数组元素的方式和数组类似</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> b &#123;     <span class="comment">// 通过数组指针迭代数组的元素</span></span><br><span class="line">    fmt.Println(i, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是数组指针类型依然不够灵活，因为数组的长度是数组类型的组成部分，指向不同长度数组的数组指针类型也是完全不同的。<strong>可以将数组看作一个特殊的结构体，结构的字段名对应数组的索引，同时结构体成员的数目是固定的。</strong>内置函数 <code>len</code> 返回数组长度，<code>cap</code> 返回数组容量。不过对于数组来说，这两个的返回结果是一样的。</p><p>我们还可以用 for 循环来遍历数组：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> a &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"a[%d]: %d\n"</span>, i, a[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> b &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"b[%d]: %d\n"</span>, i, v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(c); i++ &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"c[%d]: %d\n"</span>, i, c[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>for range</code> 的性能会好一些，因为这种迭代保证不会出现数组越界的情况，每轮迭代对数组元素的访问可以省去对下标越界的判断。另外 <code>for range</code> 可以忽略迭代时的下标：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> times [<span class="number">5</span>][<span class="number">0</span>]<span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">range</span> times &#123;</span><br><span class="line">    fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述使用中，尽管数组第一维有长度，但是 <code>[0]int</code> 大小是0，因此整个数组占用内存大小依然是0。没有额外的内存代价，我们就通过 <code>for range</code> 实现了 <code>times</code> 次快速迭代。</p><h4 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h4><p>除了数值型数组，还可以定义字符串数组、结构体数组、函数数组、接口数组、管道数组等等。另外还有不常用的空数组，因为一般我们更倾向于去使用空结构体来用于管道同步。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是一个<strong>不可改变</strong>的字节序列，和数组不同，字符串的元素不可修改，是一个只读的字节数组，且长度固定。由于 Go 的源代码要求 UTF8 编码，导致 Go 源代码中出现的字符串字面量常量一般也是 UTF8 编码（对于转义字符，则没有这个限制）。源代码中的文本字符串通常被解释为采用 UTF8 编码的 Unicode 码点（rune）序列。字符串是只读的字节序列，可以包含包括byte值0的任意数据。我们也可以用字符串表示 GBK 等非 UTF8 编码的数据，但此时字符串可以看做是一个只读的二进制数组，因为 <code>for range</code> 等语法并不能支持非 UTF8 编码的字符串的遍历。</p><p>Go 语言字符串的底层结构在 <code>reflect.StringHeader</code> 中定义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StringHeader <span class="keyword">struct</span> &#123;</span><br><span class="line">    Data <span class="keyword">uintptr</span></span><br><span class="line">    Len  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串结构包括了字符串指向的底层数组和字符串的字节长度。字符串其实就是一个结构体，因此字符串的赋值操作也就是 <code>reflect.StringHeader</code> 结构体的复制过程，并不会涉及底层字节数组的复制。<code>[2]string</code> 字符串数组对应的底层结构和 <code>[2]reflect.StringHeader</code> 对应的底层结构是一样的，可以将字符串数组看作一个结构体数组。举例来说 “Hello, world” 字符串底层数据和以下数组是完全一致的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [...]<span class="keyword">byte</span>&#123;</span><br><span class="line">    <span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">','</span>, <span class="string">' '</span>, <span class="string">'w'</span>, <span class="string">'o'</span>, <span class="string">'r'</span>, <span class="string">'l'</span>, <span class="string">'d'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串虽然不是切片，但是支持切片操作，不同位置的切片底层也访问的同一块内存数据（因为字符串是只读的，相同的字符串面值常量通常是对应同一个字符串常量）:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">"hello, world"</span></span><br><span class="line">hello := s[:<span class="number">5</span>]</span><br><span class="line">world := s[<span class="number">7</span>:]</span><br><span class="line"></span><br><span class="line">s1 := <span class="string">"hello, world"</span>[:<span class="number">5</span>]</span><br><span class="line">s2 := <span class="string">"hello, world"</span>[<span class="number">7</span>:]</span><br></pre></td></tr></table></figure><p>字符串和数组类似，内置的<code>len</code>函数返回字符串的长度。或通过 <code>reflect.StringHeader</code> 结构访问字符串的长度（不推荐）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(s)</span><br><span class="line">fmt.Println(<span class="string">"len(s):"</span>, (*reflect.StringHeader)(unsafe.Pointer(&amp;s)).Len)</span><br></pre></td></tr></table></figure><p>提到 Go 字符串时，我们一般都会假设字符串对应的是一个合法的 UTF8 编码的字符序列。可以用内置的 <code>print</code> 调试函数或 <code>fmt.Print</code> 函数直接打印，也可以用 <code>for range</code> 循环直接遍历 UTF8 解码后的 Unicode 码点值。我们也可以在字符串面值中直指定UTF8编码后的值（源文件中全部是ASCII码，可以避免出现多字节的字符）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">"\xe4\xb8\x96"</span>) <span class="comment">// 打印: 世</span></span><br><span class="line">fmt.Println(<span class="string">"\xe7\x95\x8c"</span>) <span class="comment">// 打印: 界</span></span><br></pre></td></tr></table></figure><p>Go 语言的字符串中可以存放任意的二进制字节序列，而且即使是 UTF8 字符序列也可能会遇到坏的编码。如果遇到一个错误的 UTF8 编码输入，将生成一个特别的 Unicode 字符 ‘\uFFFD’，通常显示为 ‘�’ 。错误编码不会向后扩散是 UTF8 编码的优秀特性之一：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">"\xe4\x00\x00\xe7\x95\x8cabc"</span>) <span class="comment">// �界abc</span></span><br></pre></td></tr></table></figure><p>不过在 <code>for range</code> 迭代这个含有损坏的UTF8字符串时，第一字符的第二和第三字节依然会被单独迭代到，此时迭代的值是损坏后的0：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, c := <span class="keyword">range</span> <span class="string">"\xe4\x00\x00\xe7\x95\x8cabc"</span> &#123;</span><br><span class="line">    fmt.Println(i, c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 65533  // \uFFFD, 对应 �</span></span><br><span class="line"><span class="comment">// 1 0      // 空字符</span></span><br><span class="line"><span class="comment">// 2 0      // 空字符</span></span><br><span class="line"><span class="comment">// 3 30028  // 界</span></span><br><span class="line"><span class="comment">// 6 97     // a</span></span><br><span class="line"><span class="comment">// 7 98     // b</span></span><br><span class="line"><span class="comment">// 8 99     // c</span></span><br></pre></td></tr></table></figure><p>Go 语言除了 <code>for range</code> 语法对 UTF8 字符串提供了特殊支持外，还对字符串和 <code>[]rune</code> 类型的相互转换提供了特殊的支持。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, []<span class="keyword">rune</span>(<span class="string">"世界"</span>))              <span class="comment">// []int32&#123;19990, 30028&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, <span class="keyword">string</span>([]<span class="keyword">rune</span>&#123;<span class="string">'世'</span>, <span class="string">'界'</span>&#125;))  <span class="comment">// 世界</span></span><br></pre></td></tr></table></figure><p>上面可以看出 <code>rune</code> 只是 <code>int32</code> 的别名，用于表示每个 Unicode 码点，目前只使用了21个 bit 位。</p><p>字符串的强制类型转换涉及 <code>[]byte</code> 和 <code>[]rune</code> 两种类型。在将字符串转为 <code>[]byte</code> 时，如果转换后的变量并没有被修改的情形，编译器可能会直接返回原始的字符串对应的底层数据。而在将字符串转为 <code>[]rune</code> 时，由于字符串底层的 <code>[]byte</code> 和 <code>[]int32</code> 类型的内部布局完全不同，所以这种转换可能隐含重新分配内存的操作（重构字符串），最差的情况是时间复杂度达到 O(n)。</p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片简单来说就是一种简化版的动态数组，实际使用中，切片比数组的使用范围广泛很多。下面是切片的结构定义，<code>reflect.SliceHeader</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SliceHeader <span class="keyword">struct</span> &#123;</span><br><span class="line">    Data <span class="keyword">uintptr</span></span><br><span class="line">    Len  <span class="keyword">int</span></span><br><span class="line">    Cap  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切片的开头部分和 Go 字符串是一样的，但是切片多了一个 <code>Cap</code> 成员表示切片指向的内存空间的最大容量（对应元素的个数，而不是字节数）。和数组一样，内置的 <code>len</code> 函数返回切片中有效元素的长度，内置的 <code>cap</code> 函数返回切片容量大小，<strong>容量必须大于或等于切片的长度</strong>。切片可以和 <code>nil</code> 进行比较，<strong>只有当切片底层数据指针为空时切片本身为 <code>nil</code></strong>，这时候切片的长度和容量信息将是无效的。如果有切片的底层数据指针为空，但是长度和容量不为0的情况，那么说明切片本身已经被损坏了（比如直接通过 <code>reflect.SliceHeader</code> 或 <code>unsafe</code> 包对切片作了不正确的修改）。</p><p>切片的定义方式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    a []<span class="keyword">int</span>               <span class="comment">// nil切片, 和 nil 相等, 一般用来表示一个不存在的切片</span></span><br><span class="line">    b = []<span class="keyword">int</span>&#123;&#125;           <span class="comment">// 空切片, 和 nil 不相等, 一般用来表示一个空的集合</span></span><br><span class="line">    c = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;    <span class="comment">// 有3个元素的切片, len和cap都为3</span></span><br><span class="line">    d = c[:<span class="number">2</span>]             <span class="comment">// 有2个元素的切片, len为2, cap为3</span></span><br><span class="line">    e = c[<span class="number">0</span>:<span class="number">2</span>:<span class="built_in">cap</span>(c)]     <span class="comment">// 有2个元素的切片, len为2, cap为3</span></span><br><span class="line">    f = c[:<span class="number">0</span>]             <span class="comment">// 有0个元素的切片, len为0, cap为3</span></span><br><span class="line">    g = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>)    <span class="comment">// 有3个元素的切片, len和cap都为3</span></span><br><span class="line">    h = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 有2个元素的切片, len为2, cap为3</span></span><br><span class="line">    i = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">3</span>) <span class="comment">// 有0个元素的切片, len为0, cap为3</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>切片的遍历、读取和修改都和数组一致。在对切片本身赋值或参数传递时，和数组指针的操作方式类似，只是复制切片头信息（<code>reflect.SliceHeader</code>），并不会复制底层的数据。<strong>对于类型，和数组的最大不同是，切片的类型和长度信息无关，只要是相同类型元素构成的切片均对应相同的切片类型。</strong></p><p>如前所说，切片是一种简化版的动态数组，这是切片类型的灵魂。除了构造切片和遍历切片之外，添加切片元素、删除切片元素都是切片处理中经常遇到的问题。</p><h4 id="添加切片元素"><a href="#添加切片元素" class="headerlink" title="添加切片元素"></a>添加切片元素</h4><p>内置的泛型函数 <code>append</code> 可以在切片的尾部追加 <code>N</code> 个元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a []<span class="keyword">int</span></span><br><span class="line">a = <span class="built_in">append</span>(a, <span class="number">1</span>)               <span class="comment">// 追加1个元素</span></span><br><span class="line">a = <span class="built_in">append</span>(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)         <span class="comment">// 追加多个元素, 手写解包方式</span></span><br><span class="line">a = <span class="built_in">append</span>(a, []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;...) <span class="comment">// 追加一个切片, 切片需要解包</span></span><br></pre></td></tr></table></figure><p>不过要注意的是，在容量不足的情况下，<code>append</code> 的操作会导致重新分配内存，可能导致巨大的内存分配和复制数据代价。即使容量足够，依然需要用 <code>append</code> 函数的返回值来更新切片本身，因为新切片的长度已经发生了变化。</p><p>除了在切片的尾部追加，我们还可以在切片的开头添加元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">a = <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;<span class="number">0</span>&#125;, a...)        <span class="comment">// 在开头添加1个元素</span></span><br><span class="line">a = <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;<span class="number">-3</span>,<span class="number">-2</span>,<span class="number">-1</span>&#125;, a...) <span class="comment">// 在开头添加1个切片</span></span><br></pre></td></tr></table></figure><p>在开头一般都会导致内存的重新分配，而且会导致已有的元素全部复制1次。因此，从切片的开头添加元素的性能一般要比从尾部追加元素的性能差很多。</p><p>由于 <code>append</code> 函数返回新的切片，也就是它支持链式操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a []<span class="keyword">int</span></span><br><span class="line">a = <span class="built_in">append</span>(a[:i], <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;x&#125;, a[i:]...)...)     <span class="comment">// 在第i个位置插入x</span></span><br><span class="line">a = <span class="built_in">append</span>(a[:i], <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, a[i:]...)...) <span class="comment">// 在第i个位置插入切片</span></span><br></pre></td></tr></table></figure><p>或者用 <code>copy</code> 和 <code>append</code> 组合可以避免创建中间的临时切片：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在第i个位置添加一个元素</span></span><br><span class="line">a = <span class="built_in">append</span>(a, <span class="number">0</span>)     <span class="comment">// 切片扩展1个空间</span></span><br><span class="line"><span class="built_in">copy</span>(a[i+<span class="number">1</span>:], a[i:]) <span class="comment">// a[i:]向后移动1个位置</span></span><br><span class="line">a[i] = x             <span class="comment">// 设置新添加的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在第i个位置添加多个元素(切片)</span></span><br><span class="line">a = <span class="built_in">append</span>(a, x...)       <span class="comment">// 为x切片扩展足够的空间</span></span><br><span class="line"><span class="built_in">copy</span>(a[i+<span class="built_in">len</span>(x):], a[i:]) <span class="comment">// a[i:]向后移动len(x)个位置</span></span><br><span class="line"><span class="built_in">copy</span>(a[i:], x)            <span class="comment">// 复制新添加的切片</span></span><br></pre></td></tr></table></figure><p>人为扩容属于副作用，有违切片本身的设计思想。</p><h4 id="删除切片元素"><a href="#删除切片元素" class="headerlink" title="删除切片元素"></a>删除切片元素</h4><p>删除尾部元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">a = a[:<span class="built_in">len</span>(a)<span class="number">-1</span>]   <span class="comment">// 删除尾部1个元素</span></span><br><span class="line">a = a[:<span class="built_in">len</span>(a)-N]   <span class="comment">// 删除尾部N个元素</span></span><br></pre></td></tr></table></figure><p>删除头部元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移动指针</span></span><br><span class="line">a = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">a = a[<span class="number">1</span>:] <span class="comment">// 删除开头1个元素</span></span><br><span class="line">a = a[N:] <span class="comment">// 删除开头N个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不移动指针原地完成</span></span><br><span class="line">a = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">a = <span class="built_in">append</span>(a[:<span class="number">0</span>], a[<span class="number">1</span>:]...) <span class="comment">// 删除开头1个元素</span></span><br><span class="line">a = <span class="built_in">append</span>(a[:<span class="number">0</span>], a[N:]...) <span class="comment">// 删除开头N个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用copy删除开头</span></span><br><span class="line">a = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">a = a[:<span class="built_in">copy</span>(a, a[<span class="number">1</span>:])] <span class="comment">// 删除开头1个元素</span></span><br><span class="line">a = a[:<span class="built_in">copy</span>(a, a[N:])] <span class="comment">// 删除开头N个元素</span></span><br></pre></td></tr></table></figure><p>删除中间元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用copy和append组合原地完成</span></span><br><span class="line">a = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, ...&#125;</span><br><span class="line">a = <span class="built_in">append</span>(a[:i], a[i+<span class="number">1</span>:]...) <span class="comment">// 删除中间1个元素</span></span><br><span class="line">a = <span class="built_in">append</span>(a[:i], a[i+N:]...) <span class="comment">// 删除中间N个元素</span></span><br><span class="line">a = a[:i+<span class="built_in">copy</span>(a[i:], a[i+<span class="number">1</span>:])]  <span class="comment">// 删除中间1个元素</span></span><br><span class="line">a = a[:i+<span class="built_in">copy</span>(a[i:], a[i+N:])]  <span class="comment">// 删除中间N个元素</span></span><br></pre></td></tr></table></figure><p>删除开头的元素和删除尾部的元素都可以认为是删除中间元素操作的特殊情况。</p><h4 id="切片内存技巧"><a href="#切片内存技巧" class="headerlink" title="切片内存技巧"></a>切片内存技巧</h4><p>对于切片来说， <code>len</code> 为0但是 <code>cap</code> 容量不为<code>0</code>的切片则是非常有用的特性。当然，如果 <code>len</code> 和 <code>cap</code> 都为 0 的话，则变成一个真正的空切片，虽然它并不是一个 <code>nil</code> 值的切片。<strong>在判断一个切片是否为空时，一般通过 <code>len</code> 获取切片的长度来判断，一般很少将切片和 <code>nil</code> 值做直接的比较。</strong></p><p>0长切片特性使用案例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除[]byte中的空格</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TrimSpace</span><span class="params">(s []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">    <span class="comment">//len为0但是cap为s的长度，删除操作中append肯定不会超出cap</span></span><br><span class="line">    b := s[:<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> _, x := <span class="keyword">range</span> s &#123;</span><br><span class="line">        <span class="keyword">if</span> x != <span class="string">' '</span> &#123;</span><br><span class="line">            b = <span class="built_in">append</span>(b, x)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普适到所有过滤删除需求</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Filter</span><span class="params">(s []<span class="keyword">byte</span>, fn <span class="keyword">func</span>(x <span class="keyword">byte</span>)</span> <span class="title">bool</span>) []<span class="title">byte</span></span> &#123;</span><br><span class="line">    b := s[:<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> _, x := <span class="keyword">range</span> s &#123;</span><br><span class="line">        <span class="keyword">if</span> !fn(x) &#123;</span><br><span class="line">            b = <span class="built_in">append</span>(b, x)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切片高效操作的要点是要降低内存分配的次数，尽量保证 <code>append</code> 操作不会超出 <code>cap</code> 的容量，降低触发内存分配的次数和每次分配内存大小。</p><h4 id="避免切片内存泄露"><a href="#避免切片内存泄露" class="headerlink" title="避免切片内存泄露"></a>避免切片内存泄露</h4><p>如前面所说，切片操作并不会复制底层的数据。底层的数组会被保存在内存中，直到它不再被引用。但是有时候可能会因为一个小的内存引用而导致底层整个数组处于被使用的状态，这会延迟自动内存回收器对底层数组的回收。</p><p>例如，<code>FindPhoneNumber</code> 函数加载整个文件到内存，然后搜索第一个出现的电话号码，最后结果以切片方式返回。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindPhoneNumber</span><span class="params">(filename <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">    b, _ := ioutil.ReadFile(filename)</span><br><span class="line">    <span class="keyword">return</span> regexp.MustCompile(<span class="string">"[0-9]+"</span>).Find(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码返回的 <code>[]byte</code> 指向保存整个文件的数组。因为切片引用了整个原始数组，导致自动垃圾回收器不能及时释放底层数组的空间。一个小的需求可能导致需要长时间保存整个文件数据。这虽然这并不是传统意义上的内存泄漏，但是可能会拖慢系统的整体性能。</p><p>要修复这个问题，可以将感兴趣的数据复制到一个新的切片中（<strong>数据的传值是Go语言编程的一个哲学，虽然传值有一定的代价，但是换取的好处是切断了对原始数据的依赖</strong>）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindPhoneNumber</span><span class="params">(filename <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">    b, _ := ioutil.ReadFile(filename)</span><br><span class="line">    b = regexp.MustCompile(<span class="string">"[0-9]+"</span>).Find(b)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">append</span>([]<span class="keyword">byte</span>&#123;&#125;, b...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似的问题，在删除切片元素时可能会遇到。假设切片里存放的是指针对象，那么下面删除末尾的元素后，被删除的元素依然被切片底层数组引用，从而导致不能及时被自动垃圾回收器回收（这要依赖回收器的实现方式）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a []*<span class="keyword">int</span>&#123; ... &#125;</span><br><span class="line">a = a[:<span class="built_in">len</span>(a)<span class="number">-1</span>]    <span class="comment">// 被删除的最后一个元素依然被引用, 可能导致GC操作被阻碍</span></span><br></pre></td></tr></table></figure><p>保险的方式是先将需要自动内存回收的元素设置为 <code>nil</code>，保证自动回收器可以发现需要回收的对象，然后再进行切片的删除操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a []*<span class="keyword">int</span>&#123; ... &#125;</span><br><span class="line">a[<span class="built_in">len</span>(a)<span class="number">-1</span>] = <span class="literal">nil</span> <span class="comment">// GC回收最后一个元素内存</span></span><br><span class="line">a = a[:<span class="built_in">len</span>(a)<span class="number">-1</span>]  <span class="comment">// 从切片删除最后一个元素</span></span><br></pre></td></tr></table></figure><p>当然，如果切片本身生命周期短的话完全不需要这样，等待整个切片被 GC 回收即可。</p><h4 id="切片强制类型转换"><a href="#切片强制类型转换" class="headerlink" title="切片强制类型转换"></a>切片强制类型转换</h4><p>为了安全，当两个切片类型 <code>[]T</code> 和 <code>[]Y</code> 的底层原始切片类型不同时，Go语言是无法直接转换类型的。但是有时候转换有简化编码或者提升性能的价值，比如在64位系统上，需要对一个 <code>[]float64</code> 切片进行高速排序，我们可以将它强制转为 <code>[]int</code> 整数切片，然后以整数的方式进行排序（因为 <code>float64</code> 遵循 IEEE754 浮点数标准特性，当浮点数有序时对应的整数也必然是有序的）。下面的代码通过两种方法将 <code>[]float64</code> 类型的切片转换为 <code>[]int</code> 类型的切片：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build amd64 arm64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"sort"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = []<span class="keyword">float64</span>&#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">88</span>, <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SortFloat64FastV1</span><span class="params">(a []<span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 强制类型转换</span></span><br><span class="line">    <span class="keyword">var</span> b []<span class="keyword">int</span> = ((*[<span class="number">1</span> &lt;&lt; <span class="number">20</span>]<span class="keyword">int</span>)(unsafe.Pointer(&amp;a[<span class="number">0</span>])))[:<span class="built_in">len</span>(a):<span class="built_in">cap</span>(a)]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以int方式给float64排序</span></span><br><span class="line">    sort.Ints(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SortFloat64FastV2</span><span class="params">(a []<span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 通过 reflect.SliceHeader 更新切片头部信息实现转换</span></span><br><span class="line">    <span class="keyword">var</span> c []<span class="keyword">int</span></span><br><span class="line">    aHdr := (*reflect.SliceHeader)(unsafe.Pointer(&amp;a))</span><br><span class="line">    cHdr := (*reflect.SliceHeader)(unsafe.Pointer(&amp;c))</span><br><span class="line">    *cHdr = *aHdr</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以int方式给float64排序</span></span><br><span class="line">    sort.Ints(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一种强制转换是先将切片数据的开始地址转换为一个较大的数组的指针，然后对数组指针对应的数组重新做切片操作。中间需要 <code>unsafe.Pointer</code> 来连接两个不同类型的指针传递。需要注意的是，Go 语言实现中非0大小数组的长度不得超过2GB，因此需要针对数组元素的类型大小计算数组的最大长度范围（<code>[]uint8</code> 最大2GB，<code>[]uint16</code> 最大1GB，以此类推，但是 <code>[]struct{}</code> 数组的长度可以超过2GB）。</p><p>第二种转换操作是分别取到两个不同类型的切片头信息指针，任何类型的切片头部信息底层都是对应 <code>reflect.SliceHeader</code> 结构，然后通过更新结构体方式来更新切片信息，从而实现 <code>a</code> 对应的 <code>[]float64</code> 切片到 <code>c</code> 对应的 <code>[]int</code> 类型切片的转换。</p><p>不过需要注意的是，这个方法可行的前提是要保证 <code>[]float64</code> 中没有 NaN 和 Inf 等非规范的浮点数（因为浮点数中 NaN 不可排序，正0和负0相等，但是整数中没有这类情形）。</p><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><h4 id="数组和切片在传参上的差异"><a href="#数组和切片在传参上的差异" class="headerlink" title="数组和切片在传参上的差异"></a>数组和切片在传参上的差异</h4><p>直接看例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, arr)</span><br><span class="line"></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, slice)</span><br><span class="line"></span><br><span class="line">changeArrayItem(arr)</span><br><span class="line">changeSliceItem(slice)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, arr)</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, slice)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeArrayItem</span><span class="params">(base [3]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">base[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeSliceItem</span><span class="params">(base []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">base[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//output</span></span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">[<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">[<span class="number">10</span> <span class="number">4</span> <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>可以看出数组是值传递，切片是引用传递，而且数组形参在定义时必须准确定义长度。</p><p>切片在传参上还有一个坑，就是 <code>append</code> 操作造成的引用丢失：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">appendTest</span><span class="params">()</span></span> &#123;</span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"before: %v\n"</span>, slice)</span><br><span class="line"></span><br><span class="line">appendSliceItem(slice)</span><br><span class="line">fmt.Printf(<span class="string">"after: %v\n"</span>, slice)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">appendSliceItem</span><span class="params">(slice []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">slice = <span class="built_in">append</span>(slice, <span class="number">100</span>)</span><br><span class="line">fmt.Printf(<span class="string">"func: %v\n"</span>, slice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//output</span></span><br><span class="line">before: [<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"><span class="function"><span class="keyword">func</span>: [3 4 5 100]</span></span><br><span class="line"><span class="function"><span class="title">after</span>: [3 4 5]</span></span><br></pre></td></tr></table></figure><p>由于 <code>append</code> 返回的是一个新的切片引用，因此在函数内的添加变更只体现在新切片引用上。除非函数返回新的切片引用，否则原上下文无法让旧引用重新赋值为新切片的引用。要解决这个问题除了直接用函数返回值更新外，还可以用引用的引用来解决：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">appendTest</span><span class="params">()</span></span> &#123;</span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"before: %v\n"</span>, slice)</span><br><span class="line"></span><br><span class="line">appendSliceItem(&amp;slice)</span><br><span class="line">fmt.Printf(<span class="string">"after: %v\n"</span>, slice)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">appendSliceItem</span><span class="params">(slice *[]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">*slice = <span class="built_in">append</span>(*slice, <span class="number">100</span>)</span><br><span class="line">fmt.Printf(<span class="string">"func: %v\n"</span>, *slice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//output</span></span><br><span class="line">before: [<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"><span class="function"><span class="keyword">func</span>: [3 4 5 100]</span></span><br><span class="line"><span class="function"><span class="title">after</span>: [3 4 5 100]</span></span><br></pre></td></tr></table></figure><p>下面用一个递归例子在展示两种方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recursiveTest</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr1 := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">insertTo10(&amp;arr1)</span><br><span class="line">fmt.Println(arr1)</span><br><span class="line"></span><br><span class="line">arr2 := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">arr2 = insertTo10V2(arr2)</span><br><span class="line">fmt.Println(arr2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertTo10</span><span class="params">(arr *[]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">length := <span class="built_in">len</span>(*arr)</span><br><span class="line"><span class="keyword">if</span> length == <span class="number">10</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">*arr = <span class="built_in">append</span>(*arr, length)</span><br><span class="line">insertTo10(arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertTo10V2</span><span class="params">(arr []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">length := <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="keyword">if</span> length == <span class="number">10</span> &#123;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line">arr = <span class="built_in">append</span>(arr, length)</span><br><span class="line"><span class="keyword">return</span> insertTo10V2(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//output</span></span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go struct{}类型Channel</title>
      <link href="/2020/06/02/Go-struct-%E7%B1%BB%E5%9E%8BChannel/"/>
      <url>/2020/06/02/Go-struct-%E7%B1%BB%E5%9E%8BChannel/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Go 中的 Channel 除了通信功能，往往还会扮演信号量或阻塞控制的角色。后者往往只需要 Channel 的语言特性，并不关注 Channel 传输的内容。在此背景下就有了 <code>struct{}</code> 类型 Channel 的使用场景，该类型 Channel 不占用任何内存。该 Channel 只可以写入 <code>struct{}{}</code> ，即空结构体。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h4 id="1-等待任务结束"><a href="#1-等待任务结束" class="headerlink" title="1. 等待任务结束"></a>1. 等待任务结束</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; </span><br><span class="line">  doLongRunningThing()</span><br><span class="line">  <span class="built_in">close</span>(done)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// do some other things</span></span><br><span class="line"><span class="comment">// wait for that long running thing to finish</span></span><br><span class="line">&lt;-done</span><br></pre></td></tr></table></figure><h4 id="2-多任务同时开始"><a href="#2-多任务同时开始" class="headerlink" title="2. 多任务同时开始"></a>2. 多任务同时开始</h4><p>实现类似并行而非并发的效果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">start := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    &lt;-start <span class="comment">// wait for the start channel to be closed</span></span><br><span class="line">    doWork(i) <span class="comment">// do something</span></span><br><span class="line"> &#125;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// at this point, all goroutines are ready to go</span></span><br><span class="line"><span class="comment">// we just need to tell them to start by closing the start channel</span></span><br><span class="line"><span class="built_in">close</span>(start)</span><br></pre></td></tr></table></figure><h4 id="3-事件中断"><a href="#3-事件中断" class="headerlink" title="3. 事件中断"></a>3. 事件中断</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">  <span class="keyword">select</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> m := &lt;-email:</span><br><span class="line">    sendEmail(m)</span><br><span class="line">  <span class="keyword">case</span> &lt;-stop: <span class="comment">// triggered when the stop channel is closed</span></span><br><span class="line">    <span class="keyword">break</span>      <span class="comment">// (or return) exit</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Concurrency in Go</title>
      <link href="/2020/05/16/Concurrency-in-Go/"/>
      <url>/2020/05/16/Concurrency-in-Go/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Why-Use-Concurrency？"><a href="#1-Why-Use-Concurrency？" class="headerlink" title="1. Why Use Concurrency？"></a>1. Why Use Concurrency？</h2><h3 id="1-1-Parallel-Execution"><a href="#1-1-Parallel-Execution" class="headerlink" title="1.1 Parallel Execution"></a>1.1 Parallel Execution</h3><ul><li>Two programs execute in parallel if they <strong>execute at exactly the same time</strong></li><li>At time t, an instruction is being performed for both P1 and P2</li><li>Need replicated hardware</li><li>Why Use Parallel Execution？<ul><li>Tasks may complete more quickly</li><li>Some tasks must be performed sequentially</li><li>But some tasks are parallelizable and some are not</li></ul></li></ul><h3 id="1-2-Von-Neumann-Bottleneck"><a href="#1-2-Von-Neumann-Bottleneck" class="headerlink" title="1.2 Von Neumann Bottleneck"></a>1.2 Von Neumann Bottleneck</h3><h5 id="Speedup-without-Parallelism"><a href="#Speedup-without-Parallelism" class="headerlink" title="Speedup without Parallelism"></a>Speedup without Parallelism</h5><ul><li>Can we achieve speedup without Parallelism？</li><li>Design faster processors<ul><li>Get speedup without changing software</li></ul></li><li>Design processor with more memory<ul><li>Reduces the Von Neumann Bottleneck</li><li>Cache access time = 1 clock cycle</li><li>Main memory access time = ~100 clock cycles</li><li>Increasing on-chip cache improves performance</li></ul></li></ul><h5 id="Moore’s-Law"><a href="#Moore’s-Law" class="headerlink" title="Moore’s Law"></a>Moore’s Law</h5><ul><li>Predicted that transistor density would double every two years</li><li>Smaller transistors switch faster</li><li>Not a physical law, just an observation</li><li>Exponential increase in density would lead to exponential increase in speed</li></ul><h3 id="1-3-Power-wall"><a href="#1-3-Power-wall" class="headerlink" title="1.3 Power wall"></a>1.3 Power wall</h3><h5 id="Power-Temperature-Problem"><a href="#Power-Temperature-Problem" class="headerlink" title="Power/Temperature Problem"></a>Power/Temperature Problem</h5><ul><li>Transistors consume power when they switch</li><li>Increasing transistor density leads to increased power consumption<ul><li>Smaller transistors use less power, but density scaling is much faster</li></ul></li><li>High power leads to high temperature</li><li>Air cooling(fans) can only remove so much heat</li></ul><h5 id="Dynamic-Power"><a href="#Dynamic-Power" class="headerlink" title="Dynamic Power"></a>Dynamic Power</h5><ul><li>P = α * CFV<sup>2</sup></li><li>α is percent of time switching</li><li>C is capacitance(related to size)</li><li>F is the clock frequency</li><li>V is voltage swing（from low to high）<ul><li>Voltage is important</li><li>0 to 5V uses much more power than 0 to 1.3V</li></ul></li></ul><h5 id="Dennard-Scaling"><a href="#Dennard-Scaling" class="headerlink" title="Dennard Scaling"></a>Dennard Scaling</h5><ul><li><p><strong>Voltage should scale</strong> with transistor size</p></li><li><p>Keeps power consumption and temperature low</p></li><li>Problem: Voltage can’t go too low<ul><li>Must stay above threshold voltage </li><li>Noise problems occur</li></ul></li><li>Problem: Doesn’t consider leakage power</li><li>Dennard scaling must stop</li></ul><h5 id="Multi-Core-Systems"><a href="#Multi-Core-Systems" class="headerlink" title="Multi-Core Systems"></a>Multi-Core Systems</h5><ul><li>P = α * CFV<sup>2</sup></li><li>Cannot increase frequency</li><li>Can still add processor cores, without increasing frequency<ul><li>Trend is apparent today</li></ul></li><li>Parallel execution is needed to exploit multi-core systems</li><li>Code made to execute on multiple cores</li><li>Different programs on different cores</li></ul><h3 id="1-4-Concurrent-vs-Parallel"><a href="#1-4-Concurrent-vs-Parallel" class="headerlink" title="1.4 Concurrent vs Parallel"></a>1.4 Concurrent vs Parallel</h3><h5 id="Concurrent-execution"><a href="#Concurrent-execution" class="headerlink" title="Concurrent execution"></a>Concurrent execution</h5><ul><li>Concurrent execution is not necessarily the same as parallel execution</li><li><strong>Concurrent: start and end times overlap</strong></li><li><strong>Parallel: execute at exactly the same time</strong></li></ul><p><img src="http://qnya.pomo16.club/285.png" style="zoom:50%;"></p><ul><li>Parallel tasks must be executed on different hardware</li><li>Concurrent tasks may be executed on the same hardware<ul><li>Only one task actually executed at a time</li></ul></li><li>Mapping from tasks to hardware is not directly controlled by the programmer<ul><li>At least not in go</li></ul></li></ul><h3 id="1-5-Concurrent-Programming"><a href="#1-5-Concurrent-Programming" class="headerlink" title="1.5 Concurrent Programming"></a>1.5 Concurrent Programming</h3><ul><li>Programmer determines which tasks can be executed in parallel</li><li>Mapping tasks to hardware<ul><li>Operating system</li><li>Go runtime schedule</li></ul></li></ul><h5 id="Benefit-1-Hiding-Latency"><a href="#Benefit-1-Hiding-Latency" class="headerlink" title="Benefit 1: Hiding Latency"></a>Benefit 1: Hiding Latency</h5><ul><li>Concurrency improves performance, even without parallelism</li><li>Tasks must <strong>periodically wait</strong> for something<ul><li>i.e. wait for memory</li><li>X = Y + Z  read Y, Z from memory</li><li>May wait 100+ clock cycles</li></ul></li><li>Other concurrent tasks can operate while one task is waiting</li></ul><h5 id="Benefit-2-Hardware-Mapping"><a href="#Benefit-2-Hardware-Mapping" class="headerlink" title="Benefit 2: Hardware Mapping"></a>Benefit 2: Hardware Mapping</h5><p><img src="http://qnya.pomo16.club/286.png" style="zoom: 25%;"></p><p><strong>Hardware Mapping in Go:</strong></p><ul><li>Programmer does not determine the hardware mapping</li><li>Programmer makes parallelism possible</li><li>Hardware mapping depends on many factors<ul><li>Where is the data?</li><li>What are the communication costs?</li></ul></li></ul><p><img src="http://qnya.pomo16.club/287.png" style="zoom: 33%;"></p><h2 id="2-Concurrency-Basics"><a href="#2-Concurrency-Basics" class="headerlink" title="2. Concurrency Basics"></a>2. Concurrency Basics</h2><h3 id="2-1-Processes"><a href="#2-1-Processes" class="headerlink" title="2.1 Processes"></a>2.1 Processes</h3><ul><li>An instance of a running program</li><li>Things unique to a process<ul><li>Memory<ul><li>Virtual address space</li><li>Code, stack, heap, shared libraries</li></ul></li><li>Registers<ul><li>Program counter, data regs, stack ptr, …</li></ul></li></ul></li></ul><h5 id="Operating-Systems"><a href="#Operating-Systems" class="headerlink" title="Operating Systems"></a>Operating Systems</h5><ul><li>Allows many processes to execute concurrently</li><li>Processes are switched quickly (20ms)</li><li>User has the impression of parallelism </li><li>Operating system must give processes fair access to resources</li></ul><h3 id="2-2-Scheduling"><a href="#2-2-Scheduling" class="headerlink" title="2.2 Scheduling"></a>2.2 Scheduling</h3><h5 id="Scheduling-Processes"><a href="#Scheduling-Processes" class="headerlink" title="Scheduling Processes"></a>Scheduling Processes</h5><ul><li>Operating system schedules processes for execution</li><li>Gives the illusion of parallel execution</li></ul><p><img src="http://qnya.pomo16.club/288.png" style="zoom: 33%;"></p><ul><li>OS gives fair access to CPU, memory, etc.</li></ul><h5 id="Context-Switch"><a href="#Context-Switch" class="headerlink" title="Context Switch"></a>Context Switch</h5><ul><li><p>Control flow changes from one process to another</p><p><img src="http://qnya.pomo16.club/289.png" style="zoom: 50%;"></p></li><li><p>Process “context” must be swapped</p></li></ul><h3 id="2-3-Threads-and-Goroutines"><a href="#2-3-Threads-and-Goroutines" class="headerlink" title="2.3 Threads and Goroutines"></a>2.3 Threads and Goroutines</h3><h5 id="Threads-vs-Processes"><a href="#Threads-vs-Processes" class="headerlink" title="Threads vs Processes"></a>Threads vs Processes</h5><ul><li>Threads share some context</li><li>Many threads can exist in one process</li><li>OS schedules threads rather than proccesses </li></ul><p><img src="http://qnya.pomo16.club/290.png" style="zoom: 33%;"></p><h5 id="Goroutines"><a href="#Goroutines" class="headerlink" title="Goroutines"></a>Goroutines</h5><ul><li>Like a thread in Go</li><li>Many Goroutines execute  within a single OS thread</li></ul><p><img src="http://qnya.pomo16.club/291.png" style="zoom: 33%;"></p><h5 id="Go-Runtime-Scheduler"><a href="#Go-Runtime-Scheduler" class="headerlink" title="Go Runtime Scheduler"></a>Go Runtime Scheduler</h5><ul><li>Schedules goroutines inside an OS thread</li><li>Like a little OS inside a single OS thread</li><li><strong>Logical processor</strong> is mapped to a thread</li></ul><p><img src="http://qnya.pomo16.club/292.png" style="zoom:33%;"></p><h3 id="2-4-Interleavings"><a href="#2-4-Interleavings" class="headerlink" title="2.4 Interleavings"></a>2.4 Interleavings</h3><ul><li>Order of executive within a task is known</li><li>Order of executive between concurrent tasks is unknown</li><li><p>Interleaving of instructions between tasks is unknown</p></li><li><p>Many interleavings are possible</p></li><li>Must consider all possibilities</li><li>Ordering is <strong>non-deterministic</strong></li></ul><h3 id="2-5-Race-Conditions"><a href="#2-5-Race-Conditions" class="headerlink" title="2.5 Race Conditions"></a>2.5 Race Conditions</h3><ul><li>Outcome depends on non-deterministic ordering</li><li>Races occur due to <strong>communication</strong></li></ul><h3 id="2-6-Communication-Between-Tasks"><a href="#2-6-Communication-Between-Tasks" class="headerlink" title="2.6 Communication Between Tasks"></a>2.6 Communication Between Tasks</h3><ul><li>Threads are largely independent but not completely independent</li><li>Web server, one thread per client</li></ul><p><img src="http://qnya.pomo16.club/293.png" style="zoom: 50%;"></p><ul><li>Image processing, 1 thread per pixel block</li></ul><p><img src="http://qnya.pomo16.club/294.png" style="zoom: 33%;"></p><h2 id="3-Threads-in-Go"><a href="#3-Threads-in-Go" class="headerlink" title="3. Threads in Go"></a>3. Threads in Go</h2><h3 id="3-1-Goroutines"><a href="#3-1-Goroutines" class="headerlink" title="3.1 Goroutines"></a>3.1 Goroutines</h3><h5 id="Creating-a-Goroutine"><a href="#Creating-a-Goroutine" class="headerlink" title="Creating a Goroutine"></a>Creating a Goroutine</h5><ul><li>One goroutine is created automatically to execute the main()</li><li>Other goroutines are created using the <strong>go</strong> keyword</li></ul><p><img src="http://qnya.pomo16.club/295.png" style="zoom: 25%;"></p><h5 id="Exiting-a-Goroutine"><a href="#Exiting-a-Goroutine" class="headerlink" title="Exiting a Goroutine"></a>Exiting a Goroutine</h5><ul><li>A goroutine exits <strong>when its code is complete</strong></li><li><strong>When the main goroutine is complete</strong>, all other goroutines exit</li><li><p>A goroutine may not complete its execution because main completes early</p></li><li><p>Adding a delay to wait for a goroutine is <strong>bad</strong>, because timing assumptions may be wrong and timing is nondeterministic</p></li><li>Need formal <strong>synchronization</strong> constructs</li></ul><h3 id="3-2-Basic-Synchronization"><a href="#3-2-Basic-Synchronization" class="headerlink" title="3.2 Basic Synchronization"></a>3.2 Basic Synchronization</h3><ul><li><p>Using <strong>global events</strong> whose execution is viewed by all threads, simultaneously</p></li><li><p>Example:</p><p><img src="http://qnya.pomo16.club/296.png" style="zoom:50%;"></p><ul><li>Global event is viewed by all tasks at the same time</li><li>Print must occur after update of x</li><li>Synchronization is used to restrict bad interleavings</li><li>In this case, synchronization reduces performance and efficiency. It’s bad, but it’s necessary here.</li></ul></li></ul><h3 id="3-3-Wait-Groups"><a href="#3-3-Wait-Groups" class="headerlink" title="3.3 Wait Groups"></a>3.3 Wait Groups</h3><h5 id="Sync-WaitGroup"><a href="#Sync-WaitGroup" class="headerlink" title="Sync WaitGroup"></a>Sync WaitGroup</h5><ul><li>Sync package contains functions to synchronize between goroutines</li><li><p><strong>sync.WaitGroup</strong> forces a goroutine to wait for other goroutines</p></li><li><p>Contains an internal counter</p><ul><li>Increment counter for each goroutine to wait for</li><li>Decrement counter when each goroutine completes</li><li>Waiting goroutine cannot continue until counter is 0</li></ul></li></ul><h5 id="Using-WaitGroup"><a href="#Using-WaitGroup" class="headerlink" title="Using WaitGroup"></a>Using WaitGroup</h5><p><img src="http://qnya.pomo16.club/297.png" style="zoom: 50%;"></p><ul><li><code>Add()</code>  increments the counter</li><li><code>Done()</code> decrements the counter</li><li><code>Wait()</code> blocks until counter == 0</li></ul><h5 id="WaitGroup-Example"><a href="#WaitGroup-Example" class="headerlink" title="WaitGroup Example"></a>WaitGroup Example</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line">  fmt.Printf(<span class="string">"New routine"</span>)</span><br><span class="line">  wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">  wg.Add(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">go</span> foo(&amp;wg)</span><br><span class="line">  wg.Wait()</span><br><span class="line">  fmt.Printf(<span class="string">"Main routine"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-Communication"><a href="#3-4-Communication" class="headerlink" title="3.4 Communication"></a>3.4 Communication</h3><h5 id="Goroutine-Communication"><a href="#Goroutine-Communication" class="headerlink" title="Goroutine Communication"></a>Goroutine Communication</h5><ul><li>Goroutines usually work together to perform a bigger task</li><li>Often need to send data to collaborate</li><li>Example: Find the product of 4 integers<ul><li>Make 2 goroutines, each multiplies a pair</li><li>Main goroutine multiplies the 2 results</li><li>Need to send ints from main routine to the two sub-routines</li><li>Need to send results from sub-routines back to main routine</li></ul></li></ul><h5 id="Channels"><a href="#Channels" class="headerlink" title="Channels"></a>Channels</h5><ul><li>Transfer data between goroutines</li><li>Channels are typed</li><li>Use <code>make()</code> to create a channel</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br></pre></td></tr></table></figure><ul><li>Send and  receive data using the <code>&lt;-</code> operator</li><li>Send data on a channel</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c &lt;- <span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>Receive data from a channel</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x := &lt;- c</span><br></pre></td></tr></table></figure><ul><li>Channel example:</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prod</span><span class="params">(v1 <span class="keyword">int</span>, v2 <span class="keyword">int</span>, c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  c &lt;- v1 * v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">  <span class="keyword">go</span> prod(<span class="number">1</span>, <span class="number">2</span>, c)</span><br><span class="line">  <span class="keyword">go</span> prod(<span class="number">3</span>, <span class="number">4</span>, c)</span><br><span class="line">  a := &lt;- c</span><br><span class="line">  b := &lt;- c</span><br><span class="line">  fmt.Println(a * b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-Blocking-in-Channels"><a href="#3-5-Blocking-in-Channels" class="headerlink" title="3.5 Blocking in Channels"></a>3.5 Blocking in Channels</h3><h5 id="Unbuffered-Channel"><a href="#Unbuffered-Channel" class="headerlink" title="Unbuffered Channel"></a>Unbuffered Channel</h5><ul><li>Unbuffered channels cannot hold data in transit<ul><li>Default is unbuffered</li></ul></li><li>Sending blocks until data is received</li><li>Receiving blocks until data is sent</li></ul><h5 id="Blocking-and-Synchronization"><a href="#Blocking-and-Synchronization" class="headerlink" title="Blocking and Synchronization"></a>Blocking and Synchronization</h5><ul><li>Channel communication is synchronous</li><li>Blocking is the same as waiting for communication</li><li>Receiving and ignoring the result is the same as a <code>Wait()</code></li></ul><h3 id="3-6-Buffered-Channels"><a href="#3-6-Buffered-Channels" class="headerlink" title="3.6 Buffered Channels"></a>3.6 Buffered Channels</h3><h5 id="Channel-Capacity"><a href="#Channel-Capacity" class="headerlink" title="Channel Capacity"></a>Channel Capacity</h5><ul><li>Channels can contain a limited number of objects<ul><li>Default size 0(unbuffered)</li></ul></li><li>Capacity is the number of objects it can hold in transit</li><li>Optional argument to <code>make()</code> defines channel capacity</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><ul><li>Sending only blocks if <strong>buffer is full</strong></li><li>Receiving only blocks if <strong>buffer is empty</strong></li></ul><h5 id="Channel-Blocking-Receive"><a href="#Channel-Blocking-Receive" class="headerlink" title="Channel Blocking, Receive"></a>Channel Blocking, Receive</h5><ul><li>Channel with capacity 1</li></ul><p><img src="http://qnya.pomo16.club/298.png" style="zoom: 33%;"></p><ul><li>First receive blocks until send occurs</li><li>Second receive blocks forever</li></ul><h5 id="Channel-Blocking-Send"><a href="#Channel-Blocking-Send" class="headerlink" title="Channel Blocking, Send"></a>Channel Blocking, Send</h5><p><img src="http://qnya.pomo16.club/299.png" style="zoom: 33%;"></p><ul><li>Second send blocks until receive is done</li><li>Receive can block until first send is done</li></ul><h5 id="Use-of-Buffering"><a href="#Use-of-Buffering" class="headerlink" title="Use of Buffering"></a>Use of Buffering</h5><ul><li>Sender and receiver do not need to operate at exactly the same speed</li></ul><p><img src="http://qnya.pomo16.club/300.png" style="zoom: 33%;"></p><ul><li>Speed mismatch is acceptable</li></ul><h2 id="4-Synchronized-Communication"><a href="#4-Synchronized-Communication" class="headerlink" title="4. Synchronized Communication"></a>4. Synchronized Communication</h2><h3 id="4-1-Blocking-on-Channels"><a href="#4-1-Blocking-on-Channels" class="headerlink" title="4.1 Blocking on Channels"></a>4.1 Blocking on Channels</h3><h5 id="Iterating-Through-a-Channel"><a href="#Iterating-Through-a-Channel" class="headerlink" title="Iterating Through a Channel"></a>Iterating Through a Channel</h5><ul><li>Common to iteratively read from a channel</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> c &#123;</span><br><span class="line">  fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Continues to read from channel c</li><li>One iteration each time a new value is received</li><li>i is assigned to the read value</li><li>Iterates when sender calls <code>close(c)</code></li></ul><h5 id="Receiving-from-Multiple-Goroutines"><a href="#Receiving-from-Multiple-Goroutines" class="headerlink" title="Receiving from Multiple Goroutines"></a>Receiving from Multiple Goroutines</h5><ul><li>Multiple channels may be used to receive from multiple sources</li></ul><p><img src="http://qnya.pomo16.club/301.png" style="zoom: 33%;"></p><ul><li>Data from both sources may be needed</li><li>Read sequentially</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a := &lt;- c1</span><br><span class="line">b := &lt;- c2</span><br><span class="line">fmt.Println(a*b)</span><br></pre></td></tr></table></figure><h5 id="Select-Statement"><a href="#Select-Statement" class="headerlink" title="Select Statement"></a>Select Statement</h5><ul><li>May have a choice of which data to use<ul><li>i.e. First-come first-served</li></ul></li><li>Use the <code>select</code> statement to wait on the first data from a set of channels</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> a = &lt;- c1:</span><br><span class="line">  fmt.Println(a)</span><br><span class="line">  <span class="keyword">case</span> b = &lt;- c2:</span><br><span class="line">  fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-Select"><a href="#4-2-Select" class="headerlink" title="4.2 Select"></a>4.2 Select</h3><h5 id="Select-Send-or-Receive"><a href="#Select-Send-or-Receive" class="headerlink" title="Select Send or Receive"></a>Select Send or Receive</h5><ul><li>May select either send or receive operations</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> a = &lt;- inchan:</span><br><span class="line">  fmt.Println(<span class="string">"Received a"</span>)</span><br><span class="line">  <span class="keyword">case</span> outchan &lt;- b:</span><br><span class="line">  fmt.Println(<span class="string">"Sent b"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Select-with-an-Abort-channel"><a href="#Select-with-an-Abort-channel" class="headerlink" title="Select with an Abort channel"></a>Select with an Abort channel</h5><ul><li>Use select with a <strong>separate abort channel</strong></li><li>May want to receive data until an <strong>abort signal</strong> is received</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">  <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> a = &lt;- c:</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">    <span class="keyword">case</span> &lt;-abort:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Default-Select"><a href="#Default-Select" class="headerlink" title="Default Select"></a>Default Select</h5><ul><li>May want a default operation to avoid blocking</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> a = &lt;- c1:</span><br><span class="line">  fmt.Println(a)</span><br><span class="line">  <span class="keyword">case</span> b = &lt;- c2:</span><br><span class="line">  fmt.Println(b)</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">  fmt.Println(<span class="string">"nop"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-Mutual-Exclution"><a href="#4-3-Mutual-Exclution" class="headerlink" title="4.3 Mutual Exclution"></a>4.3 Mutual Exclution</h3><h5 id="Goroutines-Sharing-Variables"><a href="#Goroutines-Sharing-Variables" class="headerlink" title="Goroutines Sharing Variables"></a>Goroutines Sharing Variables</h5><ul><li>Sharing variables concurrently can cause problems</li><li><p>Two goroutines writing to a shared variable can interfere with each other</p></li><li><p>Function can be invoked concurrently without interfering with other goroutines(<strong>Concurrency-Safe</strong>)</p></li></ul><h5 id="Variable-Sharing-Example"><a href="#Variable-Sharing-Example" class="headerlink" title="Variable Sharing Example"></a>Variable Sharing Example</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inc</span><span class="params">()</span></span> &#123;</span><br><span class="line">  i = i + <span class="number">1</span></span><br><span class="line">  wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  wg.Add(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">go</span> inc()</span><br><span class="line">  <span class="keyword">go</span> inc()</span><br><span class="line">  wg.Wait()</span><br><span class="line">  fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Two goroutines write to i</li><li>i should equal 2, but this doesn’t always happen. Because there are some possible interleavings</li></ul><h5 id="Granularity-of-Concurrency"><a href="#Granularity-of-Concurrency" class="headerlink" title="Granularity of Concurrency"></a>Granularity of Concurrency</h5><ul><li>Concurrency is at the machine code level</li><li>i = i + 1 might be three machine instructions</li></ul><p><img src="http://qnya.pomo16.club/302.png" style="zoom: 50%;"></p><ul><li><p>Interleaving machine instructions causes unexpected problems</p></li><li><p>Interleaving machine instructions</p><ul><li><p>Both tasks read 0 for 1 value</p><p><img src="http://qnya.pomo16.club/303.png" style="zoom: 25%;"></p></li></ul></li></ul><h3 id="4-4-Mutex"><a href="#4-4-Mutex" class="headerlink" title="4.4 Mutex"></a>4.4 Mutex</h3><h5 id="Correct-Sharing"><a href="#Correct-Sharing" class="headerlink" title="Correct Sharing"></a>Correct Sharing</h5><ul><li>Don‘t let 2 goroutines write to a shared variable at the same time!</li><li>Need to restrict possible interleavings</li><li>Access to shared variables cannot be interleaved</li><li>Code segements in different goroutines which cannot execute concurrently(<strong>Mutual Exclusion</strong>)</li><li>Writing to shared variables should be mutually exclusive</li></ul><h5 id="Sync-Mutex"><a href="#Sync-Mutex" class="headerlink" title="Sync.Mutex"></a>Sync.Mutex</h5><ul><li>A Mutex ensures mutual exclusion</li><li>Uses a <strong>binary semaphore</strong></li></ul><p><img src="http://qnya.pomo16.club/304.png" style="zoom: 33%;"></p><ul><li>Flag up - shared variable is in use</li><li>Flag down - shared variable is available</li></ul><h3 id="4-5-Mutex-Methods"><a href="#4-5-Mutex-Methods" class="headerlink" title="4.5 Mutex Methods"></a>4.5 Mutex Methods</h3><p>#####Sync.Mutex Methods</p><ul><li><code>Lock()</code> method puts the flag up<ul><li>Shared variable in use</li></ul></li><li><p>If lock is already taken by a goroutine, <code>Lock()</code> blocks until the flag is put down</p></li><li><p><code>Unlock()</code> method puts the flag down</p><ul><li>Done using shared variable</li></ul></li><li>When <code>Unlock()</code> is called, a blocked <code>Lock()</code> can proceed</li></ul><h5 id="Using-Sync-Mutex"><a href="#Using-Sync-Mutex" class="headerlink" title="Using Sync.Mutex"></a>Using Sync.Mutex</h5><ul><li>Increment operation is now mutually exclutive</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> mut sync.Mutex</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inc</span><span class="params">()</span></span> &#123;</span><br><span class="line">  mut.Lock()</span><br><span class="line">  i = i + <span class="number">1</span></span><br><span class="line">  mut.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-6-Once-Synchronization"><a href="#4-6-Once-Synchronization" class="headerlink" title="4.6 Once Synchronization"></a>4.6 Once Synchronization</h3><h5 id="Synchronous-Initialization"><a href="#Synchronous-Initialization" class="headerlink" title="Synchronous Initialization"></a>Synchronous Initialization</h5><ul><li>Initialization<ul><li>must happen once</li><li>must happen before everything else</li></ul></li><li>How do you perform initialization with multiple goroutines?</li><li>Could perform initialization before starting the goroutines?</li></ul><h5 id="Sync-Once"><a href="#Sync-Once" class="headerlink" title="Sync.Once"></a>Sync.Once</h5><ul><li>Has one method, <code>once.Do(f)</code></li><li>Function if is executed only one time<ul><li>Even if it is called in multiple goroutines</li></ul></li><li>All calls to <code>once.Do()</code> block until the first returns<ul><li>Ensures that initialization executes first</li></ul></li></ul><p>#####Sync.Once  Example</p><ul><li>Make two goroutines, initialization only once</li><li>Each goroutine executes <code>dostuff()</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  wg.Add(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">go</span> dostuff()</span><br><span class="line">  <span class="keyword">go</span> dostuff()</span><br><span class="line">  wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Using Sync.Once</p><ul><li><p><code>setup()</code> should execute only once</p></li><li><p>“hello” should not print until <code>setup()</code> returns</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> on sync.Once</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"Init"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dostuff</span><span class="params">()</span></span> &#123;</span><br><span class="line">  on.Do(setup)</span><br><span class="line">  fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line">  wg.Done()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Execution Result</p><ul><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Init        <span class="comment">//Result of setup()</span></span><br><span class="line">hello       <span class="comment">//Result of one goroutine</span></span><br><span class="line">hello       <span class="comment">//Result of the other goroutine</span></span><br></pre></td></tr></table></figure></li><li><p><code>Init</code> appears only once</p></li><li><p><code>Init</code> appears before <code>hello</code> is printed</p></li></ul></li></ul><h3 id="4-7-Deadlock"><a href="#4-7-Deadlock" class="headerlink" title="4.7 Deadlock"></a>4.7 Deadlock</h3><h5 id="Synchronization-Dependencies"><a href="#Synchronization-Dependencies" class="headerlink" title="Synchronization Dependencies"></a>Synchronization Dependencies</h5><ul><li>Synchronization causes the execution of different goroutines to depend on each other</li></ul><p><img src="http://qnya.pomo16.club/305.png" style="zoom: 33%;"></p><ul><li>G2 cannot continue until G1 does something</li></ul><h5 id="Deadlock"><a href="#Deadlock" class="headerlink" title="Deadlock"></a>Deadlock</h5><ul><li><strong>Circular dependencies</strong> cause all involved goroutines to block<ul><li>G1 waits for G2</li><li>G2 waits for G1</li></ul></li><li>Can be caused by waiting on channels</li></ul><h5 id="Deadlock-Example"><a href="#Deadlock-Example" class="headerlink" title="Deadlock Example"></a>Deadlock Example</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dostuff</span><span class="params">(c1 <span class="keyword">chan</span> <span class="keyword">int</span>, c2 <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  &lt;- c1</span><br><span class="line">  c2 &lt;- <span class="number">1</span></span><br><span class="line">  wg.Done()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Read from first channel<ul><li>Wait for write onto first channel</li></ul></li><li>Write to second channel<ul><li>Wait for read from second channel</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">  ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">  wg.Add(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">go</span> dostuff(ch1, ch2)</span><br><span class="line">  <span class="keyword">go</span> dostuff(ch2, ch1)</span><br><span class="line">  wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>dostuff()</code> argument order is swapped</li><li>Each goroutine blocked on channel read</li></ul><h5 id="Deadlock-Detection"><a href="#Deadlock-Detection" class="headerlink" title="Deadlock Detection"></a>Deadlock Detection</h5><ul><li>Golang runtime automatically detects when all goroutines are deadlocked</li></ul><p><img src="http://qnya.pomo16.club/306.png" style="zoom: 50%;"></p><ul><li>Cannot detect when a subset of goroutines are deadlocked</li></ul><h3 id="4-8-Dining-Philosophers"><a href="#4-8-Dining-Philosophers" class="headerlink" title="4.8 Dining Philosophers"></a>4.8 Dining Philosophers</h3><h5 id="Dining-Philosophers-Problem"><a href="#Dining-Philosophers-Problem" class="headerlink" title="Dining Philosophers Problem"></a>Dining Philosophers Problem</h5><ul><li><p>Classical problem involvingconcurrency and synchronization</p></li><li><p>Problem:</p><ul><li>5 philosophers sitting at a round table</li><li>1 chopstick is placed between each adjacent pair</li><li>Want to eat rice from their plate, but needs two chopsticks</li><li>Only one philosopher can hold a chopstick at a time</li><li>Not enough chopsticks for everyone to eat at once</li></ul><p><img src="http://qnya.pomo16.club/307.png" style="zoom:50%;"></p></li><li><p>Each chopstick is a mutex</p></li><li><p>Each philosopher is associated with a goroutine and two chopsticks</p></li><li><p>Chopsticks and Philosophers</p><ul><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Chops <span class="keyword">struct</span> &#123;</span><br><span class="line">  sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Philo <span class="keyword">struct</span> &#123;</span><br><span class="line">  leftCS, rightCS *Chops</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Philosopher Eat Method</p><ul><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(p Philo)</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    p.leftCS.Lock()</span><br><span class="line">    p.rightCS.Lock()</span><br><span class="line">    </span><br><span class="line">    fmt.Println(<span class="string">"eating"</span>)</span><br><span class="line">    </span><br><span class="line">    p.rightCS.Unlock()</span><br><span class="line">    p.leftCS.Unlock()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Initialization in Main</p><ul><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CSticks := <span class="built_in">make</span>([]*Chops, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">  CSticks[i] = <span class="built_in">new</span>(ChopS)</span><br><span class="line">&#125;</span><br><span class="line">philos := <span class="built_in">make</span>([]*Philo, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">  philos[i] = &amp;Philo&#123;Csticks[i], Csticks[(i + <span class="number">1</span>) % <span class="number">5</span>]&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Initialize chopsticks and philosophers</p></li><li><p>Notice <code>(i + 1) % 5]</code> </p></li></ul></li><li><p>Start the Dining in Main</p><ul><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">  <span class="keyword">go</span> philos[i].eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Start each philosopher eating</p></li><li><p>Would also need to wait in the main</p></li></ul></li><li><p>Deadlock Problem</p><ul><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p.leftCS.Lock()</span><br><span class="line">p.rightCS.Lock()</span><br><span class="line">fmt.Println(<span class="string">"eating"</span>)</span><br><span class="line">p.leftCS.Unlock()</span><br><span class="line">p.rightCS.Unlock()</span><br></pre></td></tr></table></figure></li><li><p>All philosophers might lock their left chopsticks concurrently</p></li><li><p>All chopsticks would be locked</p></li><li><p>Noone can lock their right chopsticks</p></li></ul></li><li><p>Deadlock Solution</p><ul><li><p>Each philosopher <strong>picks up lowest numbered chopstick first</strong></p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">  <span class="keyword">if</span> i &lt; (i + <span class="number">1</span>) % <span class="number">5</span> &#123;</span><br><span class="line">    philos[i] = &amp;Philo&#123;Csticks[i], Csticks[(i + <span class="number">1</span>) % <span class="number">5</span>]&#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    philos[i] = &amp;Philo&#123;Csticks[(i + <span class="number">1</span>) % <span class="number">5</span>], Csticks[i]&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Philosopher 4 picks up chopstick 0 before chopstick 4</p></li><li><p>Philosopher 4 blocks allowing philosopher 3 to eat</p></li><li><p>No deadlock, but philosopher 4 may starve</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建FTP</title>
      <link href="/2020/04/22/Docker%E6%90%AD%E5%BB%BAFTP/"/>
      <url>/2020/04/22/Docker%E6%90%AD%E5%BB%BAFTP/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-镜像拉取"><a href="#Docker-镜像拉取" class="headerlink" title="Docker 镜像拉取"></a>Docker 镜像拉取</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull fauria/vsftpd</span><br></pre></td></tr></table></figure><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><p>直接添加用户名和密码创建容器，需要修改用户名、密码、宿主机IP：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 20:20 -p 21:21 -p 21100-21110:21100-21110 -v /Ftpfile:/home/vsftpd -e FTP_USER=user -e FTP_PASS=userpwd -e PASV_ADDRESS=&lt;宿主机ip&gt; -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 --name vsftpd --restart=always fauria/vsftpd</span><br></pre></td></tr></table></figure><p>或创建容器后再设置用户名和密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 20:20 -p 21:21 -p 21100-21110:21100-21110 -v /Ftpfile:/home/vsftpd -e PASV_ADDRESS=&lt;宿主机ip&gt; -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 --name vsftpd --restart=always fauria/vsftpd</span><br></pre></td></tr></table></figure><h2 id="进入容器并修改账号密码"><a href="#进入容器并修改账号密码" class="headerlink" title="进入容器并修改账号密码"></a>进入容器并修改账号密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -i -t vsftpd bash</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/vsftpd/virtual_users.txt</span><br></pre></td></tr></table></figure><p>奇数行为用户名，偶数行为密码</p><h2 id="创建用户文件夹"><a href="#创建用户文件夹" class="headerlink" title="创建用户文件夹"></a>创建用户文件夹</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/vsftpd/&lt;新用户名&gt;</span><br></pre></td></tr></table></figure><h2 id="刷新用户配置"><a href="#刷新用户配置" class="headerlink" title="刷新用户配置"></a>刷新用户配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/db_load -T -t hash -f /etc/vsftpd/virtual_users.txt /etc/vsftpd/virtual_users.db</span><br></pre></td></tr></table></figure><h2 id="退出容器并重启"><a href="#退出容器并重启" class="headerlink" title="退出容器并重启"></a>退出容器并重启</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart vsftpd</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>访问 <code>ftp://&lt;宿主机ip&gt;</code></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><ul><li>支持中文字符集</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -i -t vsftpd bash</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>添加 <figure class="highlight plain"><figcaption><span>LANG</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```source /etc/profile</span><br></pre></td></tr></table></figure></p><p>退出并重启容器</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Garbage Collection</title>
      <link href="/2019/10/30/Go-Garbage-Collection/"/>
      <url>/2019/10/30/Go-Garbage-Collection/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>go 语言的 GC 代码可以在源码文件 <a href="https://golang.org/src/runtime/mgc.go" target="_blank" rel="noopener">src/runtime/mgc.go</a> 看到，其注释看门见山地概括了 go 的 GC：</p><blockquote><p>The GC runs concurrently with mutator threads, is type accurate (aka precise), allows multiple GC thread to run in parallel. It is a concurrent mark and sweep that uses a write barrier. It is non-generational and non-compacting. Allocation is done using size segregated per P allocation areas to minimize fragmentation while eliminating locks in the common case.</p></blockquote><p>总结为一句话就是：go 的 GC 算法是非分代、非紧缩、写屏障的三色并发标记清理算法。</p><ul><li>非分代：go GC 并没有像 Java 一样分新生代和老年代，所以也不存在 minor gc 和 full gc 之分</li><li>非紧缩：go GC 之后不会整理内存，清理内存碎片</li><li>写屏障：类似于 Java 的 G1(Garbage-First) 垃圾收集器中的并发标记，写屏障保证了 GC 期间用户线程 (mutator) 进行的内存更改能被监视，避免了标记遗漏和错误标记</li></ul><h2 id="标记清除-Mark-And-Sweep-算法"><a href="#标记清除-Mark-And-Sweep-算法" class="headerlink" title="标记清除(Mark And Sweep)算法"></a>标记清除(Mark And Sweep)算法</h2><p>该算法主要有两个步骤：标记和清除。标记阶段对对象进行可达性分析，并进行标记。清除阶段则回收未被标记的对象。</p><p><img src="http://qnya.pomo16.club/279.png" alt="image-20191030164145042" style="zoom:50%;"></p><p>图片所示就是标记清除的全过程，标记清除虽然简单，但是这也带来了很多问题：</p><ol><li>STW(stop the world): 标记清除在执行1之前要停止程序，并在4之后恢复运行，执行 GC 期间需要暂停用户线程，造成程序卡顿</li><li>标记对象时需要扫描整个 heap，费时费力</li><li>清除数据后会产生不连续的 heap 碎片</li></ol><p>三个问题中，STW 是首要问题，于是 go 使用了三色并发标记法来解决。</p><h2 id="三色并发标记法：基本步骤"><a href="#三色并发标记法：基本步骤" class="headerlink" title="三色并发标记法：基本步骤"></a>三色并发标记法：基本步骤</h2><p>三色并发标记法为对象定义了三种颜色(状态)：</p><ol><li>黑色：对象在这次 GC 中已标记，且这个对象包含的子对象也已标记</li><li>灰色：对象在这次 GC 中已标记， 但这个对象包含的子对象未标记</li><li>白色：对象在这次 GC 中未标记</li></ol><p><img src="http://qnya.pomo16.club/280.png" alt="image-20191030170547670" style="zoom:50%;"></p><p>步骤解析：</p><ol><li>程序创建的对象都标记为白色</li><li>gc 开始：扫描所有可到达的对象，标记为灰色</li><li>从灰色对象中找到其引用对象标记为灰色，把灰色对象本身标记为黑色</li><li>监视对象中的内存修改，并持续上一步的操作，直到灰色标记的对象不存在</li><li>gc 回收白色对象</li><li>最后，将所有黑色对象变为白色，并重复以上所有过程</li></ol><h2 id="三色并发标记法：GC-和用户线程的并行"><a href="#三色并发标记法：GC-和用户线程的并行" class="headerlink" title="三色并发标记法：GC 和用户线程的并行"></a>三色并发标记法：GC 和用户线程的并行</h2><p>mark and sweep 的 STW 操作，就是 runtime 把所有的线程全部冻结掉，所有的线程全部冻结意味着用户逻辑是暂停的。这样所有的对象都不会被修改了，这时候去扫描是绝对安全的。</p><p>go 如何减短这个过程呢？mark and sweep 包含两部分逻辑：标记和清除。 我们知道三色标记法中最后只剩下的黑白两种对象，黑色对象是程序恢复后接着使用的对象，如果不碰触黑色对象，只清除白色的对象，肯定不会影响程序逻辑。所以清除操作和用户逻辑可以并发。</p><p>但是标记操作和用户逻辑也是并发的，用户逻辑会时常生成对象或者改变对象的引用，那么标记和用户逻辑如何并发呢？</p><h4 id="并发问题一：process-新生成对象的时候，GC-该如何操作呢？"><a href="#并发问题一：process-新生成对象的时候，GC-该如何操作呢？" class="headerlink" title="并发问题一：process 新生成对象的时候，GC 该如何操作呢？"></a>并发问题一：process 新生成对象的时候，GC 该如何操作呢？</h4><p>如下图，process 在标记阶段生成一个新对象，我们可能会这么认为：</p><p><img src="http://qnya.pomo16.club/281.png" alt="image-20191030171908778" style="zoom:50%;"></p><p>但是这样显然是不对的，因为按照三色标记法的步骤，这样新生成的对象 A 最后会被清除掉，这样会影响程序逻辑。Golang 为了解决这个问题，引入了<strong>写屏障</strong>这个机制。 </p><p>写屏障：该屏障之前的写操作和之后的写操作相比，先被系统其它组件感知。 通俗的讲：就是在 gc 跑的过程中，可以监控对象的内存修改，并对对象进行重新标记。(实际上也是超短暂的 STW，然后对对象进行标记)</p><p>在上述情况中，新生成的对象，一律都标为灰色！ 即下图：</p><p><img src="http://qnya.pomo16.club/282.png" alt="image-20191030172200747" style="zoom:50%;"></p><h4 id="并发问题二：灰色或者黑色对象的引用改为白色对象的时候，Golang-是该如何操作？"><a href="#并发问题二：灰色或者黑色对象的引用改为白色对象的时候，Golang-是该如何操作？" class="headerlink" title="并发问题二：灰色或者黑色对象的引用改为白色对象的时候，Golang 是该如何操作？"></a>并发问题二：灰色或者黑色对象的引用改为白色对象的时候，Golang 是该如何操作？</h4><p>看如下图，一个黑色对象引用了曾经标记的白色对象。</p><p><img src="http://qnya.pomo16.club/283.png" alt="image-20191030172355846" style="zoom:50%;"></p><p>这时候，写屏障机制被触发，向 GC 发送信号，GC 重新扫描对象并标位灰色。</p><p><img src="http://qnya.pomo16.club/284.png" alt="image-20191030172522998" style="zoom:50%;"></p><p>因此，GC 一旦开始，无论是创建对象还是对象的引用改变，都会先变为灰色。</p><h2 id="Go-GC-的未来"><a href="#Go-GC-的未来" class="headerlink" title="Go GC 的未来"></a>Go GC 的未来</h2><p>尽管目前 go GC 相比以往版本已经大有改进，效率也今非昔比，但是仍存在一些痛点，所以 go 团队有意在未来的版本尝试 Java 上比较先进的分代思想。</p><p>分代思想主要是能解决当前 go 的 GC 频繁问题，在标记阶段 go 需要一定的 CPU 资源来 Mark Scan 所有对象，导致 GC 的 CPU 消耗比较高。</p><p>另外，相对于增加 CPU 消耗(比如写屏障)的方案， Go 团队会更倾向于占用内存多一些方案。因为 Go 团队认为，CPU 的摩尔定律发展已经减缓，18个月翻倍减缓为2年，4年…而内存容量和价格的摩尔定律仍在继续。一个稍微更占用内存的解决方案比更占用 CPU 的解决方案拥有更好的扩展性。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2019/10/20/git/"/>
      <url>/2019/10/20/git/</url>
      
        <content type="html"><![CDATA[<h2 id="First-Step"><a href="#First-Step" class="headerlink" title="First Step"></a>First Step</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "xxx"</span><br><span class="line">git config --global user.email "xxx@gmail.com"</span><br><span class="line"></span><br><span class="line">git config --global color.ui true</span><br></pre></td></tr></table></figure><h2 id="Create-repo"><a href="#Create-repo" class="headerlink" title="Create repo"></a>Create repo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p>.git 目录说明：</p><p>hooks：记录一些校验用的 goal 值</p><p>info：配置，如 .gitignore</p><p>objects：主要目录，只要这个不丢所有信息都可以还原</p><p>refs：记录分支</p><p>remotes：远端分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m ’first commit‘</span><br></pre></td></tr></table></figure><p>此时 objects 和 refs 会略有变化</p><h2 id="Clone-One"><a href="#Clone-One" class="headerlink" title="Clone One"></a>Clone One</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone repourl</span><br></pre></td></tr></table></figure><h2 id="A-Basic-Workflow"><a href="#A-Basic-Workflow" class="headerlink" title="A Basic Workflow"></a>A Basic Workflow</h2><ol><li>Edit file：<code>vim / emacs / etc</code></li><li>Stage the changes：<code>git add (file)</code></li><li>Review your changes：<code>git status / git diff</code></li><li>Commit the changes：<code>git commit</code></li></ol><h2 id="Branching-and-Merging"><a href="#Branching-and-Merging" class="headerlink" title="Branching and Merging"></a>Branching and Merging</h2><h4 id="Branching"><a href="#Branching" class="headerlink" title="Branching"></a>Branching</h4><p>创建分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch xxx</span><br></pre></td></tr></table></figure><p>查看分支状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>切换分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout xxx(分支号)</span><br></pre></td></tr></table></figure><p>删除分支（-d 只可删除已被 merge 的空指针，-D 强制删除分支指针）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d xxx</span><br><span class="line">git branch -D xxx</span><br></pre></td></tr></table></figure><h4 id="Merging"><a href="#Merging" class="headerlink" title="Merging"></a>Merging</h4><p>合并分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge xxx</span><br></pre></td></tr></table></figure><p>可视化解决冲突</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mergetool</span><br></pre></td></tr></table></figure><h2 id="Collaboration"><a href="#Collaboration" class="headerlink" title="Collaboration"></a>Collaboration</h2><p>拉取远端代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone xxx</span><br></pre></td></tr></table></figure><p>提交代码到远端，如果远端被别人修改了，此时会 push 失败</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>失败的话就要先把远端的新版代码 fetch 下来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure><p>然后把 fetch 下来的新代码和自己改的代码 merge 之后就可以 push 了，或者直接 pull，不建议使用，git pull = git fetch + git merge</p><p>或者用 rebase 保证线性历史（下图等价于 git pull –rebase = git fetch + git rebase）</p><p><img style="height:300px" src="http://qnya.pomo16.club/263.png"></p><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log xxx(默认 HEAD)</span><br></pre></td></tr></table></figure><p>–oneline：简单参数展示</p><p>–graph：简易图像</p><p>–all：把所有分支展示</p><p>–decorate：把分支名也展示</p><p>返回两图差集：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log A ^B</span><br></pre></td></tr></table></figure><h2 id="多人协作常用流程"><a href="#多人协作常用流程" class="headerlink" title="多人协作常用流程"></a>多人协作常用流程</h2><ol><li>新建远程分支</li><li>git clone</li><li>git branch -avv</li><li>fit checkout -b dev origin/…</li><li>git push origin &lt;本地分支名&gt;:&lt;远程分支名&gt;</li></ol><p>others:</p><ol><li><p>与远程代码同步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin &lt;分支名&gt;</span><br></pre></td></tr></table></figure></li><li><p>更新远程路径列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote update origin --prune xxx</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>添加远程路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin xxx</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch</title>
      <link href="/2019/10/18/ElasticSearch/"/>
      <url>/2019/10/18/ElasticSearch/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>”一个便于检索的数据库“</p><p>基于 Lucene 的开源搜索引擎，分布式、可扩展、每个字段都能被索引。</p><h2 id="能做什么？"><a href="#能做什么？" class="headerlink" title="能做什么？"></a>能做什么？</h2><ul><li>海量搜索</li><li>NoSQL 数据库</li><li>对海量数据进行进实时的处理</li><li>日志数据分析，ELK 技术，ES 进行复杂的数据分析</li></ul><h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><p>设计目标：为了更好的写入（索引）和查询（搜索）</p><p><img style="height:400px" src="http://qnya.pomo16.club/265.png"></p><p>自底向上：</p><ol><li>网关，es 索引的持久化存储方式</li><li>Lucene，为 es 提供 api 工具包</li><li>索引模块，搜索模块，字段映射，river 数据同步</li><li>自动发现，es 的自动发现节点机制</li><li>通信层，es 和客户端的交互方式</li><li>Restful api，封装的一些 crud 操作</li></ol><h5 id="Restful-api"><a href="#Restful-api" class="headerlink" title="Restful api"></a>Restful api</h5><p>对于向 es 插入数据、检索数据、删除数据等操作，es 提供了 Java api 和 RESTful api 两种方式来与之通信。</p><h5 id="transport"><a href="#transport" class="headerlink" title="transport"></a>transport</h5><p>通信模块，节点间数据传输都依赖于该模块，它有两种实现，一种是基于 netty 实现的 nettytransport，主要用于节点间的通信。另一种是 localtransport，主要是用于同一个 jvm 上的节点通信。</p><h5 id="discovery-script"><a href="#discovery-script" class="headerlink" title="discovery script"></a>discovery script</h5><p>自动发现模块，集群中节点的自动发现和 Master 节点的选举。p2p 通信。</p><p>Master 节点维护集群的全局状态（比如节点加入和离开时进行 shard 的重新分配）</p><p>Master 节点选取，bully 算法+延迟选举+半数选票</p><p>故障检测：主节点-&gt;其他节点，其他节点-&gt;主节点</p><h5 id="重要模块"><a href="#重要模块" class="headerlink" title="重要模块"></a>重要模块</h5><p>Index 模块：对写入数据的管理和组织</p><p>Search 模块：用来提供信息搜索</p><p>Mapping映射模块：类似于数据库表字段的定义，并且它决定了各个字段能否被搜索，以及搜索方式</p><p>River 模块：es 的一个数据源，向 es 同步数据。river data -&gt; es</p><h5 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h5><p>一个全文检索引擎框架，java 类库，提供底层 api，每个 es 节点上都有一个 Lucene 引擎支持。</p><h5 id="gateway"><a href="#gateway" class="headerlink" title="gateway"></a>gateway</h5><p>存储索引的文件系统，支持多种文件类型</p><h2 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h2><h4 id="几个重要概念"><a href="#几个重要概念" class="headerlink" title="几个重要概念"></a>几个重要概念</h4><table><thead><tr><th>index</th><th>type</th><th>document</th><th>mapping</th><th>node</th><th>shard</th><th>segment</th><th>serach</th></tr></thead><tbody><tr><td>索引</td><td>类型</td><td>文档</td><td>映射</td><td>节点</td><td>分片</td><td>段</td><td>倒排索引</td></tr></tbody></table><h4 id="从数据库角度来看"><a href="#从数据库角度来看" class="headerlink" title="从数据库角度来看"></a>从数据库角度来看</h4><table><thead><tr><th>Relational database</th><th>Elasticsearch</th></tr></thead><tbody><tr><td>Database</td><td>Index</td></tr><tr><td>Table</td><td>Type</td></tr><tr><td>Row</td><td>Document</td></tr><tr><td>Column</td><td>Field</td></tr><tr><td>Schema</td><td>Mapping</td></tr><tr><td>Index</td><td>Everything can index</td></tr><tr><td>SQL</td><td>Query DSL</td></tr><tr><td>SELECT * FROM table …</td><td>GET http://…</td></tr><tr><td>UPDATE table SET …</td><td>PUT http://…</td></tr></tbody></table><h4 id="索引-index"><a href="#索引-index" class="headerlink" title="索引 index"></a>索引 index</h4><p>es 将数据存储于一个或多个索引中，索引是具有类似特性的<strong>文档的集合</strong>。类比传统的关系型数据库领域来说，索引相当于 SQL 中的一个<strong>数据库</strong>。</p><h4 id="类型-type"><a href="#类型-type" class="headerlink" title="类型 type"></a>类型 type</h4><p>类型是索引内部的逻辑分类或分区（category/partition），一个索引内部可定义一个或多个类型（type）。通常，会为具有一组共同字段的文档定义一个类型。</p><h4 id="文档-document"><a href="#文档-document" class="headerlink" title="文档 document"></a>文档 document</h4><p>文档是可被索引的基础信息单元，它是包含了一个或多个域的容器，基于 JSON 格式进行表示。</p><p><img style="height:200px" src="http://qnya.pomo16.club/266.png"></p><h4 id="映射-mapping"><a href="#映射-mapping" class="headerlink" title="映射 mapping"></a>映射 mapping</h4><p>用来定义一个文档以及其所包含的字段如何被存储和索引，可以在映射中事先定义字段的数据类型、分词器等属性。映射可以分为静态映射和动态映射。</p><p>静态映射：事先定义字段的数据类型、分词器等属性。</p><p>动态映射：根据写入的字段进行类型推测。</p><h4 id="节点-node"><a href="#节点-node" class="headerlink" title="节点 node"></a>节点 node</h4><p>运行了单个实例的 es 主机称为节点（一个 es 实例就是一个 node），可以存储数据、参与集群索引及搜索操作。</p><h4 id="分片-shard"><a href="#分片-shard" class="headerlink" title="分片 shard"></a>分片 shard</h4><p>es 提供了将<strong>索引划分</strong>成多少份的能力，这些份就叫做分片。相当于一桶水用了 N 个杯子装。每个分片其内部都是一个全功能且<strong>独立的索引</strong>（Lucene Index）。创建索引时，用户可指定其分片的数量，默认数量为5个，一个分片只能存放 2,147,483,519 个 docs。</p><p>主分片和备分片：主分片和备分片不会出现在同一个节点上（防止单点故障）</p><p>分片和节点的配合，让 es 的分布式愿望得以实现。</p><h5 id="node-shard-实现-es-的扩容"><a href="#node-shard-实现-es-的扩容" class="headerlink" title="node + shard 实现 es 的扩容"></a>node + shard 实现 es 的扩容</h5><p><img style="height:200px" src="http://qnya.pomo16.club/267.png"></p><p>Node 1 和 Node 2 上各有一个分片被迁移到了新的 Node 3 节点</p><p>整体负载降低。性能提升</p><p>我们这个拥有6个分片（3个主分片和3个副本分片）的索引可以最大扩容到6个节点，每个节点上存在一个分片，并且每个分片拥有所在节点的全部资源。</p><p><strong>那如何实现更多的扩容？如果我们想要扩容超多6个节点怎么办呢？</strong></p><p>主分片的数量是确定的，增加备分片的数量，实现更高的吞吐量。</p><h4 id="段-segment"><a href="#段-segment" class="headerlink" title="段 segment"></a>段 segment</h4><p>Elasticsearch 中的<strong>每个分片包含多个 segment</strong>，每一个 segment 都是一个<strong>倒排索引</strong>；在查询时，会把所有的 segment 查询结果汇总归并后作为最终的分片查询结果，然后返回。</p><h4 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h4><p>也常被称为反向索引，是一种索引方法，它是文档检索系统中最常用的数据结构。</p><p><img src="http://qnya.pomo16.club/268.png" alt="image-20190916162714323"></p><h2 id="索引原理"><a href="#索引原理" class="headerlink" title="索引原理"></a>索引原理</h2><p>es 索引本质：让数据安全快速写入，并且能快速搜索到。</p><p>es 的索引过程：对文档的增删改查，以及文档对应的倒排索引的更新。</p><h4 id="对原文档的操作（写、读、更新）"><a href="#对原文档的操作（写、读、更新）" class="headerlink" title="对原文档的操作（写、读、更新）"></a>对原文档的操作（写、读、更新）</h4><h5 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h5><p>写操作必须在 primary shard （主分片）完全成功后才能拷贝至其对应的 replicas （附属分片）上，默认情况下主分片等待所有备份完成索引后才返回客户端。</p><p><img style="height:300px" src="http://qnya.pomo16.club/269.png"></p><ol><li>客户端向 Node 1 发送索引文档请求。</li><li>Node 1 根据文档 ID (_id 字段) 计算(对 id 做哈希然后取模)出该文档应该属于 shard0，然后请求路由到 Node 3 的 P0 分片上。</li><li>Node 3 在 P0 上执行了请求。如果请求成功，则将请求并行的路由至 Node 1，Node 2 的 R0 上。当所有的 Replicas 报告成功后，Node 3 向请求的 Node (Node 1) 发送成功报告，Node 1 再报告至 Client。</li><li>当客户端收到执行成功后，操作已经在 Primary shard 和所有的 replicas shards 上执行成功了。</li></ol><h5 id="读操作"><a href="#读操作" class="headerlink" title="读操作"></a>读操作</h5><p>一个文档可以在 primary shard 和所有的 replica shards 上读取</p><p><img style="height:300px" src="http://qnya.pomo16.club/270.png"></p><ol><li>客户端发送 Get 请求到 Node 1。</li><li>Node 1 根据文档 ID (_id 字段) 计算出该文档应该属于 shard0，且 shard0 的所有拷贝存在于所有3个节点上。这次，他将路由至 Node 2。</li><li>Node 2 将文档返回给 Node 1，Node 1 将文档返回给客户端。对于读请求，请求节点 (Node 1) 将在每次请求到来时选择一个不同的 replica shard 来达到负载均衡。使用轮询策略轮询所有的 replica shards。</li></ol><h5 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h5><p>结合了以上的两个操作：读、写</p><p><img style="height:300px" src="http://qnya.pomo16.club/271.png"></p><ol><li>客户端发送更新操作请求至 Node 1。</li><li>Node 1 将请求路由至 Node 3，Primary shard 所在的位置。</li><li>Node 3 从 P0 读取文档，改变 source 字段的 JSON 内容，然后试图重新对修改后的数据在 P0 做索引。如果此时这个文档已经被其他的进程修改了，那么它将重新执行 3 步骤，这个过程如果超过了 retryon_conflict 设置的次数，就放弃。</li><li>如果 Node 3 成功更新了文档，它将并行地把新版本的文档同步到 Node 1 和 Node 2 的 replica shards 重新建立索引。一旦所有的 replica shards 报告成功，Node 3 向被请求的节点(Node 1)返回成功，然后 Node 1 向客户端返回成功。</li></ol><h4 id="生成倒排索引"><a href="#生成倒排索引" class="headerlink" title="生成倒排索引"></a>生成倒排索引</h4><p>如果仅仅只是生成文档，那么 es 的搜索性能会很低，所以，在建立索引时，会产生一个对应的倒排索引（Inverted Index）。</p><p>es 引擎把文档数据写入到倒排索引的数据结构中，建立起分词 (Term) -&gt; 文档 (Document) 的映射关系。</p><p>这些倒排索引会存放在段 (segment) 中，段的写入会落盘，缓存 buffer 会实时更新。</p><p><img src="http://qnya.pomo16.club/272.png" alt="image-20190916170640677"></p><p>倒排索引包括两个部分：</p><ol><li>有序的数据字典 Dictionary（包括单词 Term 和它出现的频率）</li><li>单词 Term 对应的 Postings（即存在这个单词的文件）</li></ol><p><img style="height:300px" src="http://qnya.pomo16.club/273.png"></p><p>为了优化搜索，segment 不仅只提供了倒排，还提供了 document values field cache，解决：排序、聚合等问题。</p><p>列式存储：将索引中某一个字段值全部读取到内存中进行操作，用空间换时间。</p><p><img style="height:300px" src="http://qnya.pomo16.club/274.png"></p><h2 id="es-的搜索机制"><a href="#es-的搜索机制" class="headerlink" title="es 的搜索机制"></a>es 的搜索机制</h2><h4 id="搜索过程"><a href="#搜索过程" class="headerlink" title="搜索过程"></a>搜索过程</h4><p><img src="http://qnya.pomo16.club/275.png" alt="image-20190916171659797"></p><p>搜索过程由两个阶段组成：查询阶段，获取阶段</p><p>查询阶段(Query Phase)：在此阶段，<strong>协调节点</strong>将搜索<strong>请求</strong>路由到索引(index)中的<strong>所有分片</strong>(shards)（包括：主要或副本）。分片独立执行搜索，并根据<strong>相关性分数</strong>创建一个优先级排序结果。所有分片将匹配的文档和相关分数的文档 ID 返回协调节点。协调节点创建一个新的<strong>优先级队列</strong>，并对全局结果进行排序。可以有很多文档匹配结果，但默认情况下，每个分片将前10个结果发送到协调节点，协调创建优先级队列。</p><p>获取阶段(Fetch Phase)：在协调节点对所有结果进行排序，并通过文档 id，从分片中得到<strong>原始文档</strong>，再返回到协调节点。</p><p><img src="http://qnya.pomo16.club/276.png" alt="image-20190916172347548"></p><p>搜索相关性：</p><ol><li>文档指定字段，与 query 相关性越强，文档的得分越高</li><li>评分默认算法：tf / idf（术语频率/逆文档频率）</li></ol><p><img src="http://qnya.pomo16.club/277.png" alt="image-20190916172838769"></p>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP和RPC</title>
      <link href="/2019/09/19/HTTP%E5%92%8CRPC/"/>
      <url>/2019/09/19/HTTP%E5%92%8CRPC/</url>
      
        <content type="html"><![CDATA[<h2 id="Why-RPC？"><a href="#Why-RPC？" class="headerlink" title="Why RPC？"></a>Why RPC？</h2><p>在 HTTP 和 RPC 的选择上，可能有些人是迷惑的，主要是因为有些 RPC 框架配置复杂，如果走 HTTP 也能完成同样的功能，那么为什么要选择 RPC？</p><p>RPC，即 Remote Procedure Call，远程过程调用，主要是基于 TCP/IP 协议。而 HTTP 服务主要是基于 HTTP 协议的。我们都知道 HTTP 协议是在传输层协议 TCP 之上的，所以就效率来看的话，RPC 当然是要更胜一筹。另外， HTTP 的最大优势在于双端异构下的无障碍传输，但由于公司内部服务基本不存在异构的情况，所以这个优点微乎其微。所以，RPC 主要用于公司内部的服务调用，性能消耗低，传输效率高，服务治理方便。HTTP 主要用于对外的异构环境，浏览器接口调用，APP 接口调用，第三方接口调用等。</p><h2 id="与-HTTP-的异同"><a href="#与-HTTP-的异同" class="headerlink" title="与 HTTP 的异同"></a>与 HTTP 的异同</h2><h4 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h4><p>RPC：可基于 TCP 也可基于 HTTP</p><p>HTTP：HTTP协议</p><h4 id="传输效率"><a href="#传输效率" class="headerlink" title="传输效率"></a>传输效率</h4><p>RPC：使用自定义的 TCP 协议，可以让请求报文体积更小，或者使用 HTTP2 协议，也可以很好的减少报文的体积，提高传输效率</p><p>HTTP：如果是基于 HTTP1.1 的协议，请求中会包含很多无用的内容，如果是基于 HTTP2.0，那么简单的封装以下是可以作为一个 RPC 来使用的</p><h4 id="性能消耗（主要在于序列化和反序列化的耗时）"><a href="#性能消耗（主要在于序列化和反序列化的耗时）" class="headerlink" title="性能消耗（主要在于序列化和反序列化的耗时）"></a>性能消耗（主要在于序列化和反序列化的耗时）</h4><p>RPC：可以基于 thrift 实现高效的二进制传输</p><p>HTTP：超文本传输协议，大部分是通过 json 来实现的，字节大小和序列化耗时都比 thrift 要更消耗性能</p><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p>RPC：基本都自带了负载均衡策略</p><p>HTTP：需要配置 Nginx，HAProxy 来实现</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>rpc 框架一般还包含以下 HTTP 没有的高级功能：</p><ul><li>服务治理（下游服务新增，重启，下线时如何不影响上游调用者）</li><li>服务熔断/降级</li><li>流量监控等等</li></ul><h2 id="RPC-框架-——基于-Thrift-服务的-Kite"><a href="#RPC-框架-——基于-Thrift-服务的-Kite" class="headerlink" title="RPC 框架 ——基于 Thrift 服务的 Kite"></a>RPC 框架 ——基于 Thrift 服务的 Kite</h2><p>一个 rpc 调用，一般分为以下几步</p><ol><li>发送方将请求序列化</li><li>发送方通过网络发送</li><li>接收方通过网络接受</li><li>接收方反序列化得到请求</li></ol><p>当然在实际使用中还有很多额外的工作要做，服务端要监听端口，客户端要进行链接，服务端还要选择如何处理请求，多线程，线程通信等等一系列工作，需要处理有很多。</p><h4 id="Thrift"><a href="#Thrift" class="headerlink" title="Thrift"></a>Thrift</h4><p>Thrift 通过分层的方法，把整个过程分为四层，每一层解决一个问题，上下层之间提供服务。</p><ol><li>server：完成端口的监听，当有链接到来时为其创建 transport，protocol，并调用相应的 processor 处理</li><li>processor：对外提供一个统一的 process(in, out protocol) 接口</li><li>protocol：完成序列化</li><li>transport: 完成具体的传输功能（通过网络发送，写入磁盘等）</li></ol><p>一个大概的处理过程例子如下：（我觉得图里的序列化和反序列化写反了）</p><p><img src="http://qnya.pomo16.club/264.png" alt="image-20190903153604699"></p><p>因为 thrift 采用了分层，使得各层之间可以互相独立，所以如图中标注，虚线以下的代码是静态生成的，这部分代码，主要是通过传入的 TProtocol 完成反序列化，然后将得到的请求传递给用户注册进的 Handler 去处理，处理完以后，再通过 TProtocol 序列化应答发送回去。下面这部分，就是工具通过 idl 生成的，一般称为 stub。stub 通过传入的 TProtocol 完成读取数据，反序列化，调用 handler 处理，序列化应答，发送功能。</p><p>虚线以上，完成了链接的建立，在用链接创建 TTrannport，用 TTransport 创建 TProtocol。这部分决定了链接如何建立，序列化格式是什么。最后将封装了序列化/反序列化操作的 TProtocol 传递给 stub。</p><p>Thrift 这种分层的设计很好的将具体的序列化/反序列化操作与普通的服务端链接建立，数据读取，协议格式等进行了解藕，服务端可以专心在虚线以上部分的建设，其余的交给 stub。</p><h4 id="Kite"><a href="#Kite" class="headerlink" title="Kite"></a>Kite</h4><p>kite 框架，其实完成的就是上一节说的那幅图中的虚线以上部分。对照图，可以分为三部分：</p><ul><li><p>为新链接建立 TProtocol 对象</p></li><li><p>把用户的 Handler 注册到 TProcessor 中</p></li><li>把 TProcessor 注册到 kite 框架中</li></ul><h5 id="构造-TProtocol-对象"><a href="#构造-TProtocol-对象" class="headerlink" title="构造 TProtocol 对象"></a>构造 TProtocol 对象</h5><ol><li>kite 直接使用了 golang 标准库 net。net.Listen 监听，然后直接开启一个 for loop 开始 Accept。</li><li>Accept 完成链接建立以后得到 net.Conn 对象。</li><li>开启协程处理接下来的步骤。</li><li><p>用 net.Conn 构造 TTransport 对象，再构造 TProtocol 对象。</p><p>这几步和上图中描述的是差不多的。接下来是把 Handler 注册到 stub 中，并且把 stub 注册到 kite 框架中。stub 代码是工具已经生成的，对外提供了注册接口。Handler 代码是 kitool 工具生成的，注册操作也是 kitool 生成的代码中完成的。</p></li></ol><p>kitool 工具的角色其实有两个功能：</p><ul><li>为 thrift 生成的 stub 代码，生成 Handler</li><li>将 stub 注册到 kite 框架</li></ul><h5 id="Handler-注册"><a href="#Handler-注册" class="headerlink" title="Handler 注册"></a>Handler 注册</h5><p>kitool 默认生成了一个 Handler，然后调用了 stub 的注册完成注册，这一部分比较简单</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello.NewHelloServiceProcessor(&amp;HelloServiceHandler&#123;&#125;)</span><br></pre></td></tr></table></figure><h5 id="stub-注册"><a href="#stub-注册" class="headerlink" title="stub 注册"></a>stub 注册</h5><p>stub 是通过工具从 idl 中生成的，独立于 kite 框架。框架中提供了接口将外部的 stub 注册进来。在 kite 框架中有一个 export 的全局变量 Processor thrift.TProcessor，给这个变量赋值就完成了 stub 的注册。</p><p>实际上这个操作是由 kitool 生成的代码完成的。通过 kitool 生成的项目在项目根目录下有一个 kite.go 文件，这个文件里就完成了 stub 的注册：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">kite.Processor = Hello.NewHelloServiceProcessor(&amp;HelloServiceHandler&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，把 TProtocol 交给 Processor 处理即可。</p><h4 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h4><p>可以发现，到目前位置，kite 框架看起来是比较“简单”的，但是似乎有很多 routine work 多没有提到，比如限流，日志记录，监控上报等等。这就要提到 middleware（中间件）了。kite 通过使用中间件将框架主体与这些 routine work 进行了解藕。kite框架主体，只关注底层请求的接入，routine work 全都集中在了 middleware 当中。这一部分是在 kitool 生成的 Handler 中完成的。</p><p>这里先引入两个类型：</p><ul><li>EndPoint</li><li>Middleware</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EndPoint represent one method for calling from remote.</span></span><br><span class="line"><span class="keyword">type</span> EndPoint <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, req <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(resp <span class="keyword">interface</span>&#123;&#125;, err error)</span></span></span><br><span class="line"><span class="function">// <span class="title">Middleware</span> <span class="title">deal</span> <span class="title">with</span> <span class="title">input</span> <span class="title">EndPoint</span> <span class="title">and</span> <span class="title">output</span> <span class="title">EndPoint</span></span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">Middleware</span> <span class="title">func</span><span class="params">(EndPoint)</span> <span class="title">EndPoint</span></span></span><br></pre></td></tr></table></figure><p>可以发现，EndPoint 是一个函数类型，middleware 实际上是一个高级函数，入参是 EndPoint，返回值也是 EndPoint。有这两个类型就可以写出类似这样的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MyMW</span><span class="params">(next EndPoint)</span> <span class="title">EndPoint</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx contex.Context, req <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(resp <span class="keyword">interface</span>&#123;&#125;, err error)</span></span> &#123;</span><br><span class="line">        <span class="comment">//do something before next</span></span><br><span class="line">        rsp, err := next(ctx, req)</span><br><span class="line">        <span class="comment">//do something after next</span></span><br><span class="line">        <span class="keyword">return</span> rsp, err</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 MyMW 返回了一个新的 EndPoint，实际上是一个闭包，wrap 了 next。当执行下面的代码时，实际上执行的是 MyMW 返回的新 EndPoint，这个 EndPoint 可以在执行 next 之前/之后，执行一些 pre/after 操作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newNext := MyMW(next)</span><br></pre></td></tr></table></figure><p>并且，由于 middleware 的入参和返回值都是同一个类型，因此 middleware 还可以串联起来：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n1 := MyMW1(next)</span><br><span class="line">n2 := MyMW2(n1)</span><br><span class="line">n3 := MyM3(n2)</span><br></pre></td></tr></table></figure><p>可以发现，使用中间件我们可以在原始的函数之外包上很多层的逻辑。回到框架，kite 就是使用这样的方法在最原始的业务处理函数之外包裹整个过程不需要侵入框架或则侵入业务处理函数中做任何的修改，以一种方便，可扩展，可维护的方式拓展了框架的功能。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> rpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud</title>
      <link href="/2019/06/27/Spring-Cloud/"/>
      <url>/2019/06/27/Spring-Cloud/</url>
      
        <content type="html"><![CDATA[<p><a href="#一、Spring-Cloud-是什么">一、Spring Cloud 是什么</a></p><p><a href="#二、Eureka-服务注册与发现">二、Eureka 服务注册与发现</a></p><p><a href="#三、Feign-服务消费者">三、Feign 服务消费者</a></p><p><a href="#四、Ribbon-负载均衡">四、Ribbon 负载均衡</a></p><p><a href="#五、Hystrix-断路器">五、Hystrix 断路器</a></p><p><a href="#六、Zuul-路由网关">六、Zuul 路由网关</a></p><p><a href="#七、组件功能总结">七、组件功能总结</a></p><p><a href="#八、Spring-Cloud-Config-分布式配置中心">八、Spring Cloud Config 分布式配置中心</a></p><h2 id="一、Spring-Cloud-是什么"><a href="#一、Spring-Cloud-是什么" class="headerlink" title="一、Spring Cloud 是什么"></a>一、Spring Cloud 是什么</h2><p>Spring Cloud 是基于 Spring Boot 提供了一套微服务解决方案，包括服务注册与发现，配置中心，全链路监控，服务网关，负载均衡，熔断器等组件，除了基于 NetFlix 的开源组件做高度抽象封装之外，还有一些选型中立的开源组件。Spring Cloud = 分布式微服务架构下的一站式解决方案，是各个微服务架构落地技术的集合体，俗称微服务全家桶。</p><h4 id="微服务化"><a href="#微服务化" class="headerlink" title="微服务化"></a>微服务化</h4><p>微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合,每一个微服务提供单个业务功能的服务，一个服务做一件事，从技术角度看就是一种小而独立的处理过程，类似进程概念，能够自行单独启动或销毁，拥有自己独立的数据库。</p><h4 id="Spring-Boot-和-Spring-Cloud-的关系"><a href="#Spring-Boot-和-Spring-Cloud-的关系" class="headerlink" title="Spring Boot 和 Spring Cloud 的关系"></a>Spring Boot 和 Spring Cloud 的关系</h4><ul><li>Spring Boot 专注于快速方便的开发单个个体微服务。</li><li>Spring Cloud 是关注全局的微服务协调整理治理框架，它将 Spring Boot 开发的一个个单体微服务整合并管理起来，为各个微服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务。</li><li>Spring Boot 可以离开 Spring Cloud 独立使用开发项目，但是 Spring Cloud 离不开 Spring Boot，属于依赖的关系。</li></ul><h2 id="二、Eureka-服务注册与发现"><a href="#二、Eureka-服务注册与发现" class="headerlink" title="二、Eureka 服务注册与发现"></a>二、Eureka 服务注册与发现</h2><h3 id="Eureka-是什么"><a href="#Eureka-是什么" class="headerlink" title="Eureka 是什么"></a>Eureka 是什么</h3><p>Eureka 是 Netflix 的一个子模块，也是核心模块之一。Eureka 是一个基于 REST 的服务，用于定位服务，以实现云端中间层服务发现和故障转移。</p><p>服务注册与发现对于微服务架构来说是非常重要的，有了服务发现与注册，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了。功能类似于 dubbo 的注册中心，比如 Zookeeper。</p><h5 id="抽象理解"><a href="#抽象理解" class="headerlink" title="抽象理解"></a>抽象理解</h5><p>Eureka 相当于一个商业中心，所有的微服务相当于入驻的商户，需要在 Eureka 注册。此外，商户之间通信是基于 REST  的，这就需要服务发现暴露接口（即对于注册进 Eureka 里面的微服务，可以通过服务发现来获取该服务的信息）。</p><h3 id="Eureka-实现原理"><a href="#Eureka-实现原理" class="headerlink" title="Eureka 实现原理"></a>Eureka 实现原理</h3><h5 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h5><p>Eureka 采用了 C-S 的设计架构。Eureka Server 作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务使用 Eureka 的客户端连接到 Eureka Server 并维持心跳连接。这样系统的维护人员就可以通过 Eureka Server 来监控系统中各个微服务是否正常运行。Spring Cloud 的一些其他模块（比如Zuul）就可以通过 Eureka Server 来发现系统中的其他微服务，并执行相关的逻辑。</p><ul><li><p>Eureka Server</p><p>提供服务注册服务，各个节点启动后，会在 Eureka Server 中进行注册，这样 Eureka Server 中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。</p></li><li><p>Eureka Client</p><p>是一个 Java 客户端，用于简化 Eureka Server 的交互，客户端同时也具备一个内置的、使用轮询 (round-robin) 负载算法的负载均衡器。在应用启动后，将会向 Eureka Server 发送心跳(默认周期为30秒)。如果 Eureka Server 在多个心跳周期内没有接收到某个节点的心跳，Eureka Server 将会从服务注册表中把这个服务节点移除（默认90秒）。</p></li></ul><h5 id="三大角色"><a href="#三大角色" class="headerlink" title="三大角色"></a>三大角色</h5><p><img src="http://qnya.pomo16.club/255.png" style="height:300px;"></p><ul><li><p>Eureka Server 提供服务注册和发现。</p></li><li><p>Service Provider 服务提供方将自身服务注册到 Eureka，从而使服务消费方能够找到。</p></li><li><p>Service Consumer 服务消费方从 Eureka 获取注册服务列表，从而能够消费服务。</p></li></ul><h3 id="Eureka-自我保护"><a href="#Eureka-自我保护" class="headerlink" title="Eureka 自我保护"></a>Eureka 自我保护</h3><p>某时刻某一个微服务不可用了，Eureka 不会立刻清理，依旧会对该微服务的信息进行保存。</p><p>默认情况下，如果 Eureka Server 在一定时间内没有接收到某个微服务实例的心跳，Eureka Server 将会注销该实例（默认90秒）。但是当网络分区故障发生时，微服务与 Eureka Server 之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，此时本不应该注销这个微服务。Eureka 通过“自我保护模式”来解决这个问题：</p><p>当 Eureka Server 节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。在自我保护模式中，Eureka Server 会保护服务注册表中的信息，不再注销任何服务实例。当它收到的心跳数重新恢复到阈值以上时，该 Eureka Server 节点就会自动退出自我保护模式。</p><p>综上，自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留），也不盲目注销任何健康的微服务。使用自我保护模式，可以让 Eureka 集群更加的健壮、稳定。在 Spring Cloud 中，可以使用 <code>eureka.server.enable-self-preservation = false</code> 禁用自我保护模式。</p><h2 id="三、Feign-服务消费者"><a href="#三、Feign-服务消费者" class="headerlink" title="三、Feign 服务消费者"></a>三、Feign 服务消费者</h2><h3 id="Feign-是什么"><a href="#Feign-是什么" class="headerlink" title="Feign 是什么"></a>Feign 是什么</h3><p>Feign 是一个声明式 WebService 客户端。使用 Feign 能让编写 Web Service 客户端更加简单, 它的使用方法是<strong>定义一个接口，然后在上面添加注解</strong>，同时也支持 JAX-RS 标准的注解。Feign 也支持可拔插式的编码器和解码器。Spring Cloud 对 Feign 进行了封装，使其支持了 Spring MVC 标准注解和 HttpMessageConverters。Feign 可以与 Eureka 和 Ribbon 组合使用以支持负载均衡。</p><p>Feign 旨在使编写 Java Http 客户端变得更容易。如果只使用 Ribbon + RestTemplate，利用 RestTemplate 对 http 请求的封装处理，形成了一套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，Feign 在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在 Feign 的实现下，我们只需创建一个接口并使用注解的方式来配置它(以前是 Dao 接口上面标注 Mapper 注解,现在是一个微服务接口上面标注一个 Feign 注解即可)，即可完成对服务提供方的接口绑定，简化了使用 Spring Cloud Ribbon 时，自动封装服务调用客户端的开发量。</p><p>Feign 集成了 Ribbon。利用 Ribbon 维护了服务列表信息，并且通过轮询实现了客户端的负载均衡。而与 Ribbon 不同的是，通过 Feign 只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。</p><h3 id="Feign-架构说明"><a href="#Feign-架构说明" class="headerlink" title="Feign 架构说明"></a>Feign 架构说明</h3><p>Feign 是如何做到这么神奇的呢？很简单，<strong>Feign 的一个关键机制就是使用了动态代理</strong>。</p><ul><li><p>首先，如果你对某个接口定义了 @FeignClient 注解，Feign 就会针对这个接口创建一个动态代理。</p></li><li><p>接着你要是调用那个接口，本质就是会调用 Feign 创建的动态代理，这是核心中的核心。</p></li><li><p>Feign 的动态代理会根据你在接口上的 @RequestMapping 等注解，来动态构造出你要请求的服务的地址。</p></li><li><p>最后针对这个地址，发起请求、解析响应。</p></li></ul><p><img src="http://qnya.pomo16.club/256.png" alt></p><h2 id="四、Ribbon-负载均衡"><a href="#四、Ribbon-负载均衡" class="headerlink" title="四、Ribbon 负载均衡"></a>四、Ribbon 负载均衡</h2><h3 id="Ribbon-是什么"><a href="#Ribbon-是什么" class="headerlink" title="Ribbon 是什么"></a>Ribbon 是什么</h3><p>Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的一套<strong>客户端负载均衡</strong>的工具。</p><p>简单的说，Ribbon 是 Netflix 发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将 Netflix 的中间层服务连接在一起。Ribbon 客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出 Load Balancer（简称LB）后面所有的机器，Ribbon 会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们也很容易使用 Ribbon 实现自定义的负载均衡算法。</p><blockquote><p>LB，即负载均衡 (Load Balance)，在微服务或分布式集群中经常用的一种应用。负载均衡简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的 HA。常见的负载均衡有软件 Nginx，LVS，硬件 F5 等。相应的在中间件，例如：dubbo 和 Spring Cloud 中均给我们提供了负载均衡，Spring Cloud 的负载均衡算法可以自定义。 </p><p>集中式 LB：即在服务的消费方和提供方之间使用独立的 LB 设施(可以是硬件，如 F5，也可以是软件，如 nginx)，由该设施负责把访问请求通过某种策略转发至服务的提供方。</p><p>进程内 LB：将 LB 逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。</p><p>Ribbon 就属于进程内 LB，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</p></blockquote><h3 id="Ribbon-架构说明"><a href="#Ribbon-架构说明" class="headerlink" title="Ribbon 架构说明"></a>Ribbon 架构说明</h3><p><img src="http://qnya.pomo16.club/257.png" style="height:300px;"></p><p>Ribbon 在工作时分成两步：第一步先选择 Eureka Server ,它优先选择在同一个区域内负载较少的 server。第二步再根据用户指定的策略，在从 server 取到的服务注册列表中选择一个地址。其中 Ribbon 提供了多种策略：比如轮询、随机和根据响应时间加权。</p><p><img src="http://qnya.pomo16.club/258.png" alt></p><h2 id="五、Hystrix-断路器"><a href="#五、Hystrix-断路器" class="headerlink" title="五、Hystrix 断路器"></a>五、Hystrix 断路器</h2><h3 id="分布式面临问题：服务雪崩"><a href="#分布式面临问题：服务雪崩" class="headerlink" title="分布式面临问题：服务雪崩"></a>分布式面临问题：服务雪崩</h3><p>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免地失败。</p><p>多个微服务之间调用的时候，假设微服务 A 调用微服务 B 和微服务 C，微服务 B 和微服务 C 又调用其它的微服务，这就是所谓的“扇出”。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务 A 的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”。</p><p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。 </p><h3 id="Hystrix-是什么"><a href="#Hystrix-是什么" class="headerlink" title="Hystrix 是什么"></a>Hystrix 是什么</h3><p>Hystrix 是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix 能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</p><p>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。 </p><h3 id="Hystrix-功能"><a href="#Hystrix-功能" class="headerlink" title="Hystrix 功能"></a>Hystrix 功能</h3><h5 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h5><p>熔断机制是应对雪崩效应的一种微服务链路保护机制。当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回”错误”的响应信息。当检测到该节点微服务调用响应正常后恢复调用链路。在 Spring Cloud 框架里熔断机制通过 Hystrix 实现。Hystrix 会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败就会启动熔断机制。熔断机制的注解是 @HystrixCommand。一旦调用服务方法失败并抛出了错误信息后，会自动调用 @HystrixCommand 标注好的 fallbackMethod 调用类中的指定方法。</p><h5 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h5><p>整体资源快不够了，忍痛将某些服务先关掉，待渡过难关，再开启回来。服务降级处理是在客户端实现完成的，与服务端没有关系。</p><h5 id="服务实时监控"><a href="#服务实时监控" class="headerlink" title="服务实时监控"></a>服务实时监控</h5><p>除了隔离依赖服务的调用以外，Hystrix 还提供了准实时的调用监控（Hystrix Dashboard），Hystrix 会持续地记录所有通过 Hystrix 发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。Netflix 通过 hystrix-metrics-event-stream 项目实现了对以上指标的监控。Spring Cloud 也提供了 Hystrix Dashboard 的整合，对监控内容转化成可视化界面。</p><h3 id="Hystrix-实现原理"><a href="#Hystrix-实现原理" class="headerlink" title="Hystrix 实现原理"></a>Hystrix 实现原理</h3><p>如下图，Hystrix 会搞很多个小小的线程池，比如订单服务请求库存服务是一个线程池，请求仓储服务是一个线程池，请求积分服务是一个线程池。每个线程池里的线程就仅仅用于请求那个服务。</p><p><img src="http://qnya.pomo16.club/259.png" alt></p><h2 id="六、Zuul-路由网关"><a href="#六、Zuul-路由网关" class="headerlink" title="六、Zuul 路由网关"></a>六、Zuul 路由网关</h2><h3 id="Zuul-是什么"><a href="#Zuul-是什么" class="headerlink" title="Zuul 是什么"></a>Zuul 是什么</h3><p>Zuul 包含了对请求的<strong>路由和过滤</strong>两个最主要的功能：其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验、服务聚合等功能的基础。</p><p>Zuul 和 Eureka 进行整合，将 Zuul 自身注册为 Eureka 服务治理下的应用，同时从 Eureka 中获得其他微服务的消息，也即以后的访问微服务都是通过 Zuul 跳转后获得。</p><p>注意：Zuul 服务最终还是会注册进 Eureka</p><p>Zuul = 代理 + 路由 + 过滤</p><p><img src="http://qnya.pomo16.club/260.png" alt></p><h2 id="七、组件功能总结"><a href="#七、组件功能总结" class="headerlink" title="七、组件功能总结"></a>七、组件功能总结</h2><p><strong>Eureka</strong>：各个服务启动时，Eureka Client 都会将服务注册到 Eureka Server，并且 Eureka Client 还可以反过来从 Eureka Server 拉取注册表，从而知道其他服务在哪里。</p><p><strong>Ribbon</strong>：服务间发起请求的时候，基于 Ribbon 做负载均衡，从一个服务的多台机器中选择一台。</p><p><strong>Feign</strong>：基于 Feign 的动态代理机制，根据注解和选择的机器，拼接请求 URL 地址，发起请求。</p><p><strong>Hystrix</strong>：发起请求是通过 Hystrix 的线程池来走的，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题。</p><p><strong>Zuul</strong>：如果前端、移动端要调用后端系统，统一从 Zuul 网关进入，由 Zuul 网关转发请求给对应的服务。</p><p><img src="http://qnya.pomo16.club/261.png" alt></p><h2 id="八、Spring-Cloud-Config-分布式配置中心"><a href="#八、Spring-Cloud-Config-分布式配置中心" class="headerlink" title="八、Spring Cloud Config 分布式配置中心"></a>八、Spring Cloud Config 分布式配置中心</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行，所以一套集中式的、动态的配置管理设施是必不可少的。</p><h3 id="Spring-Cloud-Config-是什么"><a href="#Spring-Cloud-Config-是什么" class="headerlink" title="Spring Cloud Config 是什么"></a>Spring Cloud Config 是什么</h3><p>Spring Cloud Config 为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置。作用如下：</p><ul><li>集中管理配置文件</li><li>不同环境不同配置，动态化的配置更新，分环境部署比如：dev/test/prod/beta/release</li><li>运行期间动态调整配置，不再需要每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li><li>将配置信息以 REST 接口的形式暴露</li></ul><h3 id="Spring-Cloud-Config-架构"><a href="#Spring-Cloud-Config-架构" class="headerlink" title="Spring Cloud Config 架构"></a>Spring Cloud Config 架构</h3><p>Spring Cloud Config 分为客户端和服务端两部分。</p><p>服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口。</p><p>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。</p><p>配置服务器默认使用 git 来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过 git 客户端工具来方便地管理和访问配置内容。</p><p><img src="http://qnya.pomo16.club/262.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程池</title>
      <link href="/2019/06/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2019/06/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="Executor-类图"><a href="#Executor-类图" class="headerlink" title="Executor 类图"></a>Executor 类图</h2><p><img src="http://qnya.pomo16.club/253.png" alt></p><h2 id="线程池原理"><a href="#线程池原理" class="headerlink" title="线程池原理"></a>线程池原理</h2><p>线程池中的核心线程数，当提交一个任务时，线程池创建一个新线程执行任务，直到当前线程数等于corePoolSize；如果当前线程数为 corePoolSize，继续提交的任务被保存到阻塞队列中，等待被执行；如果阻塞队列满了，那就创建新的线程执行当前任务；直到线程池中的线程数达到 maxPoolSize，这时再有任务来，只能执行 reject() 处理该任务。</p><p><img src="http://qnya.pomo16.club/254.png" alt></p><h2 id="线程池种类"><a href="#线程池种类" class="headerlink" title="线程池种类"></a>线程池种类</h2><ul><li><p>newFixedThreadPool()</p><p><strong>初始化一个指定线程数的线程池</strong>，其中 corePoolSize == maxiPoolSize，使用 LinkedBlockingQuene 作为阻塞队列 特点：即使当线程池没有可执行任务时，也不会释放线程。</p></li><li><p>newCachedThreadPool()</p><p><strong>初始化一个可以缓存线程的线程池</strong>，默认缓存 60s，线程池的线程数可达到 Integer.MAX_VALUE，即 2147483647，内部使用 SynchronousQueue 作为阻塞队列； 特点：在没有任务执行时，当线程的空闲时间超过 keepAliveTime，会自动释放线程资源；当提交新任务时，如果没有空闲线程，则创建新线程执行任务，会导致一定的系统开销； 因此，使用时要注意控制并发的任务数，防止因创建大量的线程导致而降低性能。</p></li><li><p>newSingleThreadExecutor()</p><p><strong>初始化只有一个线程的线程池</strong>，内部使用 LinkedBlockingQueue 作为阻塞队列。 特点：如果该线程异常结束，会重新创建一个新的线程继续执行任务，唯一的线程可以保证所提交任务的顺序执行。</p></li><li><p>newScheduledThreadPool()</p><p>特点：初始化的线程池可以在指定的时间内周期性的执行所提交的任务，在实际的业务场景中可以使用该线程池定期的同步数据。</p></li><li><p>ThreadPoolExecutor()</p><p>默认线程池，可控制参数比较多，实际上是前面四种的模板，自定义时只需传入自己想要的参数即可。</p></li></ul><p><strong>初始化示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Executors静态方法进行初始化</span></span><br><span class="line">ExecutorService service = Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="comment">// 常用方法</span></span><br><span class="line">service.execute(<span class="keyword">new</span> Thread());</span><br><span class="line">service.submit(<span class="keyword">new</span> Thread());</span><br><span class="line">service.shutDown();</span><br><span class="line">service.shutDownNow();</span><br></pre></td></tr></table></figure><p><strong>常用方法</strong></p><ol><li>execute 与 submit 的区别<ul><li>execute 只能提交 Runnable 类型的任务，而 submit 既能提交 Runnable 类型任务也能提交 Callable 类型任务。</li><li>execute 会直接抛出任务执行时的异常，submit 会吃掉异常，可通过 Future 的 get 方法将任务执行时的异常重新抛出。</li><li>submit 有返回值，而 execute 没有。</li></ul></li><li>shutDown 与 shutDownNow 的区别<ul><li>shutDown：当线程池调用该方法时,线程池的状态则立刻变成 SHUTDOWN 状态。此时，则不能再往线程池中添加任何任务，否则将会抛出 RejectedExecutionException异常。但是，此时线程池不会立刻退出，直到添加到线程池中的任务都已经处理完成，才会退出。 </li><li>shutDownNow：相当于调用每个线程的 interrupt() 方法。</li></ul></li><li>其他方法<ul><li>prestartAllCoreThreads()：提前创建并启动所有核心线程。</li><li>setCorePoolSize() 和 setMaximumPoolSize()：动态调整线程池容量大小。</li></ul></li></ol><h2 id="关键参数"><a href="#关键参数" class="headerlink" title="关键参数"></a>关键参数</h2><ul><li>corePoolSize：核心线程数</li><li>maximumPoolSize：最大线程数</li><li>keepAliveTime：线程存活时间（在 corePore &lt; * &lt; maxPoolSize 情况下有用）</li><li><p>workQueue：阻塞队列（用来保存等待被执行的任务）</p></li><li><p>handler：当拒绝处理任务时的策略</p></li></ul><h2 id="四大阻塞队列（workQueue）"><a href="#四大阻塞队列（workQueue）" class="headerlink" title="四大阻塞队列（workQueue）"></a>四大阻塞队列（workQueue）</h2><ul><li>ArrayBlockingQueue：基于数组结构的有界阻塞队列，按 FIFO 排序任务</li><li>LinkedBlockingQuene：基于链表结构的阻塞队列，按 FIFO 排序任务</li><li>SynchronousQuene：一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于 ArrayBlockingQuene</li><li>PriorityBlockingQuene：具有优先级的无界阻塞队列</li></ul><h2 id="四大拒绝策略（handler）"><a href="#四大拒绝策略（handler）" class="headerlink" title="四大拒绝策略（handler）"></a>四大拒绝策略（handler）</h2><ul><li>ThreadPoolExecutor.AbortPolicy：默认，队列满了丢弃任务并抛出 RejectedExecutionException 异常</li><li>ThreadPoolExecutor.DiscardPolicy：队列满了丢弃任务，但是不抛出异常</li><li>ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试加入队列（重复此过程）</li><li>ThreadPoolExecutor.CallerRunsPolicy：如果添加到线程池失败，那么主线程会自己去执行该任务</li></ul><h2 id="合理设置线程池大小"><a href="#合理设置线程池大小" class="headerlink" title="合理设置线程池大小"></a>合理设置线程池大小</h2><p>线程等待时间所占比例越高，需要越多线程。线程 CPU 时间所占比例越高，需要越少线程。</p><p>一般需要根据任务的类型来配置线程池大小： 如果是 CPU 密集型任务，就需要尽量压榨 CPU，参考值可以设为 NCPU+1；如果是 IO 密集型任务，参考值可以设置为 2*NCPU。</p><p>补充：CPU 密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠 CPU 的运算能力；涉及到网络、磁盘 IO 的任务都是 IO 密集型任务，这类任务的特点是 CPU 消耗很少，任务的大部分时间都在等待 IO 操作完成（因为 IO 的速度远远低于 CPU 和内存的速度）。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2019/06/11/mysql/"/>
      <url>/2019/06/11/mysql/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#一、事务">一、事务</a></li><li><a href="#二、范式">二、范式</a></li><li><a href="#三、存储引擎">三、存储引擎</a></li><li><a href="#四、数据类型">四、数据类型</a></li><li><a href="#五、索引">五、索引</a></li><li><a href="#六、查询性能优化">六、查询性能优化</a></li><li><a href="#七、分库分表">七、分库分表</a></li><li><a href="#八、主从复制与读写分离">八、主从复制与读写分离</a></li><li><a href="#九、锁">九、锁</a></li></ul><h2 id="一、事务"><a href="#一、事务" class="headerlink" title="一、事务"></a>一、事务</h2><h4 id="1-什么是事务？"><a href="#1-什么是事务？" class="headerlink" title="1.什么是事务？"></a>1.什么是事务？</h4><p>事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。MySQL 默认采用自动提交模式。也就是说，如果不显式使用 <code>START TRANSACTION</code> 语句来开始一个事务，那么每个查询都会被当做一个事务自动提交。事务简单来说：<strong>一个Session中所进行所有的操作，要么同时成功，要么同时失败。</strong></p><h4 id="2-ACID"><a href="#2-ACID" class="headerlink" title="2.ACID"></a>2.ACID</h4><ul><li><p>原子性（Atomicity）<br>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</p></li><li><p>一致性（Consistency）<br>事务前后数据的完整性必须保持一致。</p></li><li><p>隔离性（Isolation）<br>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。</p></li><li><p>持久性（Durability）</p><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。</p></li></ul><h4 id="3-事务隔离级别"><a href="#3-事务隔离级别" class="headerlink" title="3.事务隔离级别"></a>3.事务隔离级别</h4><p>数据库定义了4个隔离级别：</p><ol><li>序列化：Serializable【可避免脏读，不可重复读，虚读】</li><li>可重复读：Repeatable read【可避免脏读，不可重复读】</li><li>已提交读：Read committed【可避免脏读】</li><li>未提交读：Read uncommitted【级别最低，什么都避免不了】</li></ol><ul><li>分别对应Connection类中的4个常量<ul><li>TRANSACTION_READ_UNCOMMITTED</li><li>TRANSACTION_READ_COMMITTED</li><li>TRANSACTION_REPEATABLE_READ</li><li>TRANSACTION_SERIALIZABLE</li></ul></li><li>脏读：一个事务读取到另外一个事务未提交的数据。</li><li>不可重复读：一个事务读取到另外一个事务已经提交的数据，也就是说一个事务可以看到其他事务所做的修改。</li><li>虚读(幻读)：是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。</li><li>简单总结：<strong>脏读是不可容忍的，不可重复读和虚读在一定的情况下是可以的【做统计的肯定就不行】</strong></li></ul><h2 id="二、范式"><a href="#二、范式" class="headerlink" title="二、范式"></a>二、范式</h2><p>数据库中的范式指的是数据库的设计规范，范式具有包含关系。一个数据库设计如果符合第二范式，一定也符合第一范式。如果符合第三范式，一定也符合第二范式…范式逐级加严，一般数据库只需满足 3NF 即可。</p><h4 id="1-第一范式：属性不可分"><a href="#1-第一范式：属性不可分" class="headerlink" title="1.第一范式：属性不可分"></a>1.第一范式：属性不可分</h4><p>当关系模式 R 的所有属性都不能在分解为更基本的数据单位时，称 R 是满足第一范式的，简记为 1NF。</p><p>1NF 是针对于数据表的列的规范，即<strong>数据表的每一列都是不可分割的原子数据项，而不能是数组，集合，记录等非原子数据项</strong>，说白了就是，不能把好几列的数据合在一起，且每一列的数据都是不可分割的。</p><h4 id="2-第二范式：每个非主属性完全函数依赖于键码"><a href="#2-第二范式：每个非主属性完全函数依赖于键码" class="headerlink" title="2.第二范式：每个非主属性完全函数依赖于键码"></a>2.第二范式：每个非主属性完全函数依赖于键码</h4><p>如果关系模式 R 满足第一范式，并且 R 的所有非主属性都完全依赖于 R 的每一个候选关键属性，称 R 满足第二范式，简记为 2NF。</p><p>2NF 基于第一范式，非码属性必须完全依赖码，即非主键数据必须依赖主键数据。“码”(主键)是数据表用来唯一区分实例或记录的数据项，若没有，可人为添加。对于第一范式针对列来说，第二范式则是针对于行的规范。<strong>第二范式需要确保数据库表中每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）</strong>。也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。</p><h4 id="3-第三范式：非主属性不传递函数依赖于键码"><a href="#3-第三范式：非主属性不传递函数依赖于键码" class="headerlink" title="3.第三范式：非主属性不传递函数依赖于键码"></a>3.第三范式：非主属性不传递函数依赖于键码</h4><p>设 R 是一个满足第一范式条件的关系模式，X 是 R 的任意属性集，如果 X 非传递依赖于 R 的任意一个候选关键字，称 R 满足第三范式，简记为 3NF。</p><p>3NF 需要确保数据表中的<strong>每一列数据都和主键直接相关，而不能间接相关。</strong></p><h2 id="三、存储引擎"><a href="#三、存储引擎" class="headerlink" title="三、存储引擎"></a>三、存储引擎</h2><p>这里主要介绍两个搜索引擎：InnoDB 和 MyISAM</p><h4 id="1-InnoDB"><a href="#1-InnoDB" class="headerlink" title="1.InnoDB"></a>1.InnoDB</h4><p>MySQL 5.5 及之后版本的默认存储引擎，只有在需要它不支持的特性时，才考虑使用其它存储引擎。</p><p><strong>特性</strong></p><ul><li>InnoDB为事务性存储引擎</li><li>完全支持事物的 ACID 特性</li><li>Redo log （实现事务的持久性） 和 Undo log（为了实现事务的原子性，存储未完成事务log，用于回滚）</li><li>InnoDB支持行级锁</li><li>行级锁可以最大程度的支持并发</li><li>行级锁是由存储引擎层实现的</li><li>实现了四个标准的隔离级别，默认级别是可重复读（REPEATABLE READ）。在可重复读隔离级别下，通过多版本并发控制（MVCC）+ 间隙锁（Next-Key Locking）防止幻影读</li><li>主索引是聚簇索引，在索引中保存了数据，从而避免直接读取磁盘，因此对查询性能有很大的提升</li></ul><p><strong>应用场景</strong></p><ul><li>可靠性要求比较高，或者要求事务</li><li>表更新和查询都相当的频繁，并且行锁定的机会比较大的情况。</li></ul><h4 id="2-MyISAM"><a href="#2-MyISAM" class="headerlink" title="2.MyISAM"></a>2.MyISAM</h4><p>MySQL 5.5 版本之前的默认存储引擎，在 <code>5.0</code> 以前最大表存储空间最大 <code>4G</code>，<code>5.0</code> 以后最大 <code>256TB</code>。</p><p>MyISAM 存储引擎由 <code>.myd</code>（数据）和 <code>.myi</code>（索引文件）组成，<code>.frm</code>文件存储表结构（所有存储引擎都有）</p><p><strong>特性</strong></p><ul><li>并发性和锁级别 （对于读写混合的操作不好，为表级锁，写入和读互斥）</li><li>表损坏修复</li><li>MyISAM 表支持的索引类型（全文索引）</li><li>MyISAM 支持表压缩（压缩后，此表为只读，不可以写入。使用 myisampack 压缩）</li></ul><p><strong>应用场景</strong></p><ul><li>没有事务</li><li>只读类应用（插入不频繁，查询非常频繁）</li><li>空间类应用（唯一支持空间函数的引擎）</li><li>做很多 count 的计算</li></ul><h4 id="3-InnoDB-和-MyISAM-区别"><a href="#3-InnoDB-和-MyISAM-区别" class="headerlink" title="3.InnoDB 和 MyISAM 区别"></a>3.InnoDB 和 MyISAM 区别</h4><table><thead><tr><th>对比项</th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>主外键</td><td>不支持</td><td>支持</td></tr><tr><td>事务</td><td>不支持</td><td>支持</td></tr><tr><td>行表锁</td><td>表锁，即使操作一条记录也会锁住整个表，不适合高并发的操作</td><td>行锁，操作时只锁某一行，不对其他行有影响，适合高并发的操作</td></tr><tr><td>缓存</td><td>只缓存索引，不缓存真实数据</td><td>不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响</td></tr><tr><td>表空间</td><td>小</td><td>大</td></tr><tr><td>关注点</td><td>性能</td><td>事务</td></tr><tr><td>其他</td><td>MyISAM 表是保存成文件的形式，在跨平台的数据转移中使用 MyISAM 存储会省去不少的麻烦。MyISAM 崩溃后发生损坏的概率比 InnoDB 高很多，而且恢复的速度也更慢。</td><td>InnoDB 表比 MyISAM 表更安全，可以在保证数据不会丢失的情况下，切换非事务表到事务表（alter table tablename type=innodb）。InnoDB 支持在线热备份。</td></tr><tr><td>应用场景</td><td>MyISAM 管理非事务表。它提供高速存储和检索，以及全文搜索能力。如果应用中需要执行大量的 SELECT 查询，那么 MyISAM 是更好的选择。</td><td>InnoDB 用于事务处理应用程序，具有众多特性，包括 ACID 事务支持。如果应用中需要执行大量的 INSERT 或 UPDATE 操作，则应该使用 InnoDB，这样可以提高多用户并发操作的性能。</td></tr></tbody></table><h2 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h2><h4 id="1-整型"><a href="#1-整型" class="headerlink" title="1.整型"></a>1.整型</h4><p>TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT 分别使用 8, 16, 24, 32, 64 位存储空间，一般情况下越小的列越好。INT(11) 中的数字只是规定了交互工具显示字符的个数，对于存储和计算来说是没有意义的。</p><h4 id="2-浮点型"><a href="#2-浮点型" class="headerlink" title="2.浮点型"></a>2.浮点型</h4><p>FLOAT 和 DOUBLE 为浮点类型，DECIMAL 为高精度小数类型。CPU 原生支持浮点运算，但是不支持 DECIMAl 类型的计算，因此 DECIMAL 的计算比浮点类型需要更高的代价。</p><p>FLOAT、DOUBLE 和 DECIMAL 都可以指定列宽，例如 DECIMAL(18, 9) 表示总共 18 位，取 9 位存储小数部分，剩下 9 位存储整数部分。</p><h4 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3.字符串"></a>3.字符串</h4><p>主要有 CHAR 和 VARCHAR 两种类型，一种是定长的，一种是变长的。</p><p>VARCHAR 这种变长类型能够节省空间，因为只需要存储必要的内容。但是在执行 UPDATE 时可能会使行变得比原来长，当超出一个页所能容纳的大小时，就要执行额外的操作。MyISAM 会将行拆成不同的片段存储，而 InnoDB 则需要分裂页来使行放进页内。</p><p>VARCHAR 会保留字符串末尾的空格，而 CHAR 会删除。</p><h4 id="4-时间和日期"><a href="#4-时间和日期" class="headerlink" title="4.时间和日期"></a>4.时间和日期</h4><p>MySQL 提供了两种相似的日期时间类型：DATATIME 和 TIMESTAMP。</p><h5 id="DATATIME"><a href="#DATATIME" class="headerlink" title="DATATIME"></a>DATATIME</h5><p>能够保存从 1001 年到 9999 年的日期和时间，精度为秒，使用 8 字节的存储空间。</p><p>它与时区无关。</p><p>默认情况下，MySQL 以一种可排序的、无歧义的格式显示 DATATIME 值，例如“2008-01-16 22:37:08”，这是 ANSI 标准定义的日期和时间表示方法。</p><h5 id="TIMESTAMP"><a href="#TIMESTAMP" class="headerlink" title="TIMESTAMP"></a>TIMESTAMP</h5><p>和 UNIX 时间戳相同，保存从 1970 年 1 月 1 日午夜（格林威治时间）以来的秒数，使用 4 个字节，只能表示从 1970 年 到 2038 年。</p><p>它和时区有关，也就是说一个时间戳在不同的时区所代表的具体时间是不同的。</p><p>MySQL 提供了 FROM_UNIXTIME() 函数把 UNIX 时间戳转换为日期，并提供了 UNIX_TIMESTAMP() 函数把日期转换为 UNIX 时间戳。</p><p>默认情况下，如果插入时没有指定 TIMESTAMP 列的值，会将这个值设置为当前时间。</p><p>应该尽量使用 TIMESTAMP，因为它比 DATETIME 空间效率更高。</p><h2 id="五、索引"><a href="#五、索引" class="headerlink" title="五、索引"></a>五、索引</h2><h4 id="1-索引使用场景"><a href="#1-索引使用场景" class="headerlink" title="1.索引使用场景"></a>1.索引使用场景</h4><p>索引能够轻易将查询性能提升几个数量级。</p><ol><li>对于非常小的表、大部分情况下简单的全表扫描比建立索引更高效。</li><li>对于中到大型的表，索引就非常有效。</li><li>但是对于特大型的表，建立和维护索引的代价将会随之增长。这种情况下，需要用到一种技术可以直接区分出需要查询的一组数据，而不是一条记录一条记录地匹配，例如可以使用分区技术。</li></ol><p>索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。</p><h4 id="2-B-树"><a href="#2-B-树" class="headerlink" title="2.B+ 树"></a>2.B+ 树</h4><p>B Tree 指的是 Balance Tree，也就是平衡树。平衡树是一颗查找树，并且所有叶子节点位于同一层。</p><p>B+ Tree 是基于 B Tree 和叶子节点顺序访问指针进行实现，它具有 B Tree 的平衡性，并且通过顺序访问指针来提高区间查询的性能。在 B+ Tree 中，一个节点中的 key 从左到右非递减排列，如果某个指针的左右相邻 key 分别是 keyi 和 keyi+1，且不为 null，则该指针指向节点的所有 key 大于等于 keyi 且小于等于 keyi+1。</p><p><img src="http://qnya.pomo16.club/246.png" alt></p><p>主要特点：<strong>内节点只存指针，叶子节点只存数据，有序</strong></p><h4 id="3-为什么选-B-树？"><a href="#3-为什么选-B-树？" class="headerlink" title="3.为什么选 B+ 树？"></a>3.为什么选 B+ 树？</h4><p>红黑树等平衡树也可以用来实现索引，但是文件系统及数据库系统普遍采用 B Tree 作为索引结构，主要有以下两个原因：</p><ol><li><p><strong>更少的检索次数</strong></p><p>平衡树检索数据的时间复杂度等于树高 h，而树高大致为 O(h)=O(log<sub>d</sub>N)，其中 d 为每个节点的出度。</p><p>红黑树的出度为 2，而 B Tree 的出度一般都非常大。红黑树的树高 h 很明显比 B Tree 大非常多，因此检索的次数也就更多。</p><p>B+Tree 相比于 B-Tree 更适合外存索引，因为 B+Tree 内节点去掉了 data 域，因此可以拥有更大的出度，检索效率会更高。</p></li><li><p><strong>利用磁盘预读特性</strong></p><p>为了减少磁盘 I/O 操作，磁盘往往不是严格按需读取，而是每次都会预读。预读过程中，磁盘进行顺序读取，顺序读取不需要进行磁盘寻道，并且只需要很短的磁盘旋转时间，速度会非常快。</p><p>操作系统一般将内存和磁盘分割成固定大小的块，每一块称为一页，内存与磁盘以页为单位交换数据。数据库系统将索引的一个节点的大小设置为页的大小，使得一次 I/O 就能完全载入一个节点。并且可以利用预读特性，相邻的节点也能够被预先载入。</p></li></ol><h4 id="4-索引分类"><a href="#4-索引分类" class="headerlink" title="4.索引分类"></a>4.索引分类</h4><h5 id="B-树索引"><a href="#B-树索引" class="headerlink" title="B+ 树索引"></a>B+ 树索引</h5><ul><li>B+Tree 索引是大多数 MySQL 存储引擎的默认索引类型。</li><li>因为不再需要进行全表扫描，只需要对树进行搜索即可，因此查找速度快很多。除了用于查找，还可以用于排序和分组。</li><li>可以指定多个列作为索引列，多个索引列共同组成键。</li><li>适用于全键值、键值范围和键前缀查找，其中键前缀查找只适用于最左前缀查找。如果不是按照索引列的顺序进行查找，则无法使用索引。</li></ul><p>InnoDB 的 B+Tree 索引分为<strong>主索引</strong>和<strong>辅助索引</strong>。</p><p>主索引的叶子节点 data 域记录着完整的数据记录，这种索引方式被称为聚簇索引。因为无法把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。</p><p><img src="http://qnya.pomo16.club/247.png" alt></p><p>辅助索引的叶子节点的 data 域记录着主键的值，因此在使用辅助索引进行查找时，需要先查找到主键值，然后再到主索引中进行查找。</p><p><img src="http://qnya.pomo16.club/248.png" alt></p><h5 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h5><p>InnoDB 引擎有一个特殊的功能叫 “自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。</p><p>哈希索引能以 O(1) 时间进行查找，但是失去了有序性，它具有以下限制：</p><ul><li>无法用于排序与分组。</li><li>只支持精确查找，无法用于部分查找和范围查找。</li></ul><h5 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h5><p>MyISAM 存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较是否相等。查找条件使用 MATCH AGAINST，而不是普通的 WHERE。</p><p>全文索引一般使用倒排索引实现，它记录着关键词到其所在文档的映射。</p><p>InnoDB 存储引擎在 MySQL 5.6.4 版本中也开始支持全文索引。</p><h5 id="空间数据索引（R-Tree）"><a href="#空间数据索引（R-Tree）" class="headerlink" title="空间数据索引（R-Tree）"></a>空间数据索引（R-Tree）</h5><p>MyISAM 存储引擎支持空间数据索引，可以用于地理数据存储。空间数据索引会从所有维度来索引数据，可以有效地使用任意维度来进行组合查询。</p><p>必须使用 GIS 相关的函数来维护数据。</p><h4 id="5-索引种类"><a href="#5-索引种类" class="headerlink" title="5.索引种类"></a>5.索引种类</h4><ul><li><p>聚簇索引：数据行的物理顺序与列值（一般是主键的那一列）的逻辑顺序相同，一个表中只能拥有一个聚集索引。</p><ul><li><p>主键索引：加速查询 + 列值唯一（不可以有null）+ 表中只有一个</p><p>一种唯一性索引，必须指定为 primary key。一个表可以有多个唯一索引，但只能有一个主键。主键一定是唯一，唯一不一定是主键。且主键索引可以被其他表引用当外键，唯一索引不可以。</p></li></ul></li><li><p>非聚簇索引：该索引中索引的逻辑顺序与磁盘上行的物理存储顺序不同，一个表中可以拥有多个非聚集索引。</p><ul><li>普通索引：仅加速查询</li><li>唯一索引：加速查询 + 列值唯一（可以有null）</li><li>组合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并</li><li>全文索引：对文本的内容进行分词，进行搜索，可以在char、varchar或text类型的列上创建。</li></ul></li></ul><h4 id="6-联合索引"><a href="#6-联合索引" class="headerlink" title="6.联合索引"></a>6.联合索引</h4><h5 id="什么是联合索引？"><a href="#什么是联合索引？" class="headerlink" title="什么是联合索引？"></a>什么是联合索引？</h5><p>两个或更多个列上的索引被称作联合索引，联合索引又叫复合索引。对于复合索引：Mysql 从左到右的使用索引中的字段，一个查询可以只使用索引中的一部份，但只能是最左侧部分。</p><p>例如索引是 key index (a,b,c)，可以支持[a]、[a,b]、[a,b,c] 3种组合进行查找，但不支 [b,c] 进行查找。当最左侧字段是常量引用时，索引就十分有效。</p><h5 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h5><ul><li>需要加索引的字段，要在 where 条件中</li><li>数据量少的字段不需要加索引</li><li>如果 where 条件中是OR关系，加索引不起作用</li><li>符合最左原则</li></ul><h4 id="7-索引的特点"><a href="#7-索引的特点" class="headerlink" title="7.索引的特点"></a>7.索引的特点</h4><ul><li>可以加快数据库的检索速度</li><li>降低数据库插入、修改、删除等维护的速度</li><li>只能创建在表上，不能创建到视图上</li><li>既可以直接创建又可以间接创建</li><li>可以在优化隐藏中使用索引</li><li>使用查询处理器执行SQL语句，在一个表上，一次只能使用一个索引</li></ul><p><strong>优点</strong></p><ul><li>创建唯一性索引，保证数据库表中每一行数据的唯一性</li><li>大大加快数据的检索速度，这是创建索引的最主要的原因</li><li>加速数据库表之间的连接，特别是在实现数据的参考完整性方面特别有意义</li><li>在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间</li><li>通过使用索引，可以在查询中使用优化隐藏器，提高系统的性能</li></ul><p><strong>缺点</strong></p><ul><li>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加</li><li>索引需要占用物理空间，除了数据表占用数据空间之外，每一个索引还要占一定的物理空间，如果建立聚簇索引，那么需要的空间就会更大</li><li>当对表中的数据进行增加、删除和修改的时候，索引也需要维护，降低数据维护的速度</li></ul><h4 id="8-索引失效的情况"><a href="#8-索引失效的情况" class="headerlink" title="8.索引失效的情况"></a>8.索引失效的情况</h4><ul><li><p>如果MySQL估计使用<strong>全表扫秒比使用索引快</strong>，则不使用索引。</p><p>例：如果列 key 均匀分布在 1 和 100 之间，下面的查询使用索引就不是很好：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name where key&gt;1 and key&lt;90;</span><br></pre></td></tr></table></figure></li><li><p>如果<strong>条件中有 or</strong>，即使其中有条件带索引也不会使用。</p><p>例：如果在 key1 上有索引而在 key2 上没有索引，则该查询也不会走索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name where key1=&apos;a&apos; or key2=&apos;b&apos;;</span><br></pre></td></tr></table></figure></li><li><p>复合索引，如果索引列<strong>不是复合索引的第一部分</strong>，则不使用索引。（即不符合最左前缀）</p><p>例：复合索引为(key1,key2)，则下列查询将不会使用索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name where key2=&apos;b&apos;;</span><br></pre></td></tr></table></figure></li><li><p>如果 <strong>like 是以 % 开始的</strong>，则该列上的索引不会被使用。</p><p>例：下列查询即使 key1 上存在索引，也不会被使用如果列类型是字符串，那一定要在条件中使用引号引起来，否则不会使用索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name where key1 like &apos;%a&apos;;</span><br></pre></td></tr></table></figure></li><li><p>如果列为字符串，则 where 条件中必须将字符常量值加引号，否则即使该列上存在索引，也不会被使用。</p><p>例：如果key1列保存的是字符串，即使key1上有索引，也不会被使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name where key1=1;</span><br></pre></td></tr></table></figure></li><li><p>如果使用 MEMORY/HEAP 表，并且 where 条件中不使用 “=” 进行索引列，那么不会用到索引，head 表只有在 “=” 的条件下才会使用索引。</p></li></ul><h4 id="9-在什么情况下适合建立索引？"><a href="#9-在什么情况下适合建立索引？" class="headerlink" title="9.在什么情况下适合建立索引？"></a>9.在什么情况下适合建立索引？</h4><ul><li>为经常出现在关键字 order by、group by、distinct 后面的字段，建立索引。</li><li>在 union 等集合操作的结果集字段上，建立索引。其建立索引的目的同上。</li><li>为经常用作查询选择 where 后的字段，建立索引。</li><li>在经常用作表连接 join 的属性上，建立索引。</li><li>考虑使用索引覆盖。对数据很少被更新的表，如果用户经常只查询其中的几个字段，可以考虑在这几个字段上建立索引，从而将表的扫描改变为索引的扫描。</li></ul><h4 id="10-主键、外键和索引的区别"><a href="#10-主键、外键和索引的区别" class="headerlink" title="10.主键、外键和索引的区别"></a>10.主键、外键和索引的区别</h4><table><thead><tr><th></th><th>定义</th><th>作用</th><th>个数</th></tr></thead><tbody><tr><td><strong>主键</strong></td><td>唯一标识一条记录，不能有重复的，不允许为空</td><td>用来保证数据完整性</td><td>主键只能有一个</td></tr><tr><td><strong>外键</strong></td><td>表的外键是另一表的主键，外键可以有重复的，可以是空值</td><td>用来和其他表建立联系用的</td><td>一个表可以有多个外键</td></tr><tr><td><strong>索引</strong></td><td>该字段没有重复值，但可以有一个空值</td><td>是提高查询排序的速度</td><td>一个表可以有多个惟一索引</td></tr></tbody></table><h4 id="11-SQL-约束有哪几种？"><a href="#11-SQL-约束有哪几种？" class="headerlink" title="11. SQL 约束有哪几种？"></a>11. SQL 约束有哪几种？</h4><ul><li>NOT NULL: 用于控制字段的内容一定不能为空（NULL）。</li><li>UNIQUE: 控件字段内容不能重复，一个表允许有多个 Unique 约束。</li><li>PRIMARY KEY: 也是用于控件字段内容不能重复，但它在一个表只允许出现一个。</li><li>FOREIGN KEY: 用于预防破坏表之间连接的动作，也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。</li><li>CHECK: 用于控制字段的值范围。</li></ul><h2 id="六、查询性能优化"><a href="#六、查询性能优化" class="headerlink" title="六、查询性能优化"></a>六、查询性能优化</h2><h4 id="1-用-Explain-进行分析"><a href="#1-用-Explain-进行分析" class="headerlink" title="1.用 Explain 进行分析"></a>1.用 Explain 进行分析</h4><p>Explain 用来分析 SELECT 查询语句，开发人员可以通过分析 Explain 结果来优化查询语句。</p><p>比较重要的字段有：</p><ul><li>select_type : 查询类型，有简单查询、联合查询、子查询等</li><li>key : 使用的索引</li><li>rows : 扫描的行数</li></ul><h4 id="2-优化数据访问"><a href="#2-优化数据访问" class="headerlink" title="2.优化数据访问"></a>2.优化数据访问</h4><ul><li>减少请求的数据量<ul><li>只返回必要的列：最好不要使用 SELECT * 语句。</li><li>只返回必要的行：使用 LIMIT 语句来限制返回的数据。</li><li>缓存重复查询的数据：使用缓存可以避免在数据库中进行查询，特别在要查询的数据经常被重复查询时，缓存带来的查询性能提升将会是非常明显的。</li></ul></li><li>减少服务器端扫描的行数<ul><li>最有效的方式是使用索引来覆盖查询。</li></ul></li></ul><h4 id="3-重构查询方式"><a href="#3-重构查询方式" class="headerlink" title="3.重构查询方式"></a>3.重构查询方式</h4><ul><li><p>切分大查询</p><p>一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELEFT FROM messages WHERE create &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rows_affected = 0</span><br><span class="line">do &#123;</span><br><span class="line">    rows_affected = do_query(</span><br><span class="line">    &quot;DELETE FROM messages WHERE create  &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000&quot;)</span><br><span class="line">&#125; while rows_affected &gt; 0</span><br></pre></td></tr></table></figure></li><li><p>分解大连接查询</p><p>将一个大连接查询（JOIN）分解成对每一个表进行一次单表查询，然后将结果在应用程序中进行关联，这样做的好处有：</p><ul><li>让缓存更高效。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用。</li><li>分解成多个单表查询，这些单表查询的缓存结果更可能被其它查询使用到，从而减少冗余记录的查询。</li><li>减少锁竞争；</li><li>在应用层进行连接，可以更容易对数据库进行拆分，从而更容易做到高性能和可扩展。</li><li>查询本身效率也可能会有所提升。例如下面的例子中，使用 IN() 代替连接查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机的连接要更高效。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tab</span><br><span class="line">JOIN tag_post ON tag_post.tag_id=tag.id</span><br><span class="line">JOIN post ON tag_post.post_id=post.id</span><br><span class="line">WHERE tag.tag=&apos;mysql&apos;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tag WHERE tag=&apos;mysql&apos;;</span><br><span class="line">SELECT * FROM tag_post WHERE tag_id=1234;</span><br><span class="line">SELECT * FROM post WHERE post.id IN (123,456,567,9098,8904);</span><br></pre></td></tr></table></figure></li></ul><h2 id="七、分库分表"><a href="#七、分库分表" class="headerlink" title="七、分库分表"></a>七、分库分表</h2><p>简单来说，数据的切分就是通过某种特定的条件，将我们存放在同一个数据库中的数据分散存放到多个数据库（主机）中，以达到分散单台设备负载的效果，即分库分表。</p><p>数据的切分根据其切分规则的类型，可以分为如下两种切分模式。</p><ul><li>垂直（纵向）切分：把单一的表拆分成多个表，并分散到不同的数据库（主机）上。</li><li>水平（横向）切分：根据表中数据的逻辑关系，将同一个表中的数据按照某种条件拆分到多台数据库（主机）上。</li></ul><h4 id="1-水平切分"><a href="#1-水平切分" class="headerlink" title="1.水平切分"></a>1.水平切分</h4><p>水平切分又称为 Sharding，它是将同一个表中的记录拆分到多个结构相同的表中。</p><p>当一个表的数据不断增多时，Sharding 是必然的选择，它可以将数据分布到集群的不同节点上，从而缓存单个数据库的压力。</p><p><img src="http://qnya.pomo16.club/249.png" alt></p><h5 id="Sharding-优点"><a href="#Sharding-优点" class="headerlink" title="Sharding 优点"></a>Sharding 优点</h5><ul><li>单库单表的数据保持在一定的量级，有助于性能的提高</li><li>切分的表的结构相同，应用层改造较少，只需要增加路由规则即可</li><li>提高了系统的稳定性和负载能力</li></ul><h5 id="Sharding-缺点"><a href="#Sharding-缺点" class="headerlink" title="Sharding 缺点"></a>Sharding 缺点</h5><ul><li>切分后，数据是分散的，很难利用数据库的 join 操作，跨库 join 性能较差</li><li>拆分规则难以抽象</li><li>分片事务的一致性难以解决</li><li>数据扩容的难度和维护量极大</li></ul><h5 id="Sharding-策略"><a href="#Sharding-策略" class="headerlink" title="Sharding 策略"></a>Sharding 策略</h5><ul><li>哈希取模：hash(key) % NUM_DB<ul><li>比如按照 userId mod 64，将数据分布在64个服务器上</li></ul></li><li>范围：可以是 ID 范围也可以是时间范围<ul><li>比如每台服务器计划存放一个亿的数据,先将数据写入服务器 A.一旦服务器 A 写满,则将数据写入服务器 B,以此类推. 这种方式的好处是扩展方便.数据在各个服务器上分布均匀</li></ul></li><li>映射表：使用单独的一个数据库来存储映射关系</li></ul><h5 id="Sharding-存在的问题及解决方案"><a href="#Sharding-存在的问题及解决方案" class="headerlink" title="Sharding 存在的问题及解决方案"></a>Sharding 存在的问题及解决方案</h5><ul><li>事务问题：使用分布式事务来解决，比如 XA 接口。</li><li>JOIN：可以将原来的 JOIN 查询分解成多个单表查询，然后在用户程序中进行 JOIN。</li><li>ID 唯一性<ul><li>使用全局唯一 ID：GUID。</li><li>为每个分片指定一个 ID 范围。</li><li>分布式 ID 生成器 (如 Twitter 的 Snowflake 算法)。</li></ul></li></ul><h4 id="2-垂直切分"><a href="#2-垂直切分" class="headerlink" title="2.垂直切分"></a>2.垂直切分</h4><p>垂直切分是将一张表按列切分成多个表，通常是按照列的关系密集程度进行切分，也可以利用垂直切分将经常被使用的列和不经常被使用的列切分到不同的表中。</p><p>在数据库的层面使用垂直切分将按数据库中表的密集程度部署到不同的库中，例如将原来的电商数据库垂直切分成商品数据库、用户数据库等。</p><p><img src="http://qnya.pomo16.club/250.png" alt></p><h5 id="垂直切分的优点"><a href="#垂直切分的优点" class="headerlink" title="垂直切分的优点"></a>垂直切分的优点</h5><ul><li>拆分后业务清晰，拆分规则明确</li><li>系统之间进行整合或扩展很容易</li><li>按照成本、应用的等级、应用的类型等将表放到不同的机器上，便于管理</li><li>便于实现<strong>动静分离</strong>、<strong>冷热分离</strong>的数据库表的设计模式</li><li>数据维护简单</li></ul><h5 id="垂直切分的缺点"><a href="#垂直切分的缺点" class="headerlink" title="垂直切分的缺点"></a>垂直切分的缺点</h5><ul><li>部分业务表无法关联（Join），只能通过接口方式解决，提高了系统的复杂度</li><li>受每种业务的不同限制，存在单库性能瓶颈，不易进行数据扩展和提升性能</li><li>事务处理复杂</li></ul><h4 id="3-垂直切分和水平切分的共同点"><a href="#3-垂直切分和水平切分的共同点" class="headerlink" title="3.垂直切分和水平切分的共同点"></a>3.垂直切分和水平切分的共同点</h4><ul><li>存在分布式事务的问题</li><li>存在跨节点 Join 的问题</li><li>存在跨节点合并排序、分页的问题</li><li>存在多数据源管理的问题</li></ul><h2 id="八、主从复制与读写分离"><a href="#八、主从复制与读写分离" class="headerlink" title="八、主从复制与读写分离"></a>八、主从复制与读写分离</h2><h4 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h4><p>主要涉及三个线程：binlog 线程、I/O 线程和 SQL 线程。</p><ul><li><strong>binlog 线程</strong> ：负责将主服务器上的数据更改写入二进制文件（binlog）中。</li><li><strong>I/O 线程</strong> ：负责从主服务器上读取二进制日志文件，并写入从服务器的中继日志中。</li><li><strong>SQL 线程</strong> ：负责读取中继日志并重放其中的 SQL 语句。</li></ul><p><img src="http://qnya.pomo16.club/251.png" alt></p><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><p>主服务器用来处理写操作以及实时性要求比较高的读操作，而从服务器用来处理读操作。</p><p>读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。</p><p>MySQL 读写分离能提高性能的原因在于：</p><ul><li>主从服务器负责各自的读和写，极大程度缓解了锁的争用；</li><li>从服务器可以配置 MyISAM 引擎，提升查询性能以及节约系统开销；</li><li>增加冗余，提高可用性。</li></ul><p><img src="http://qnya.pomo16.club/252.png" alt></p><h2 id="九、锁"><a href="#九、锁" class="headerlink" title="九、锁"></a>九、锁</h2><p>MySQL/InnoDB 的加锁，一直是一个面试中常问的话题。例如，数据库如果有高并发请求，如何保证数据完整性？产生死锁问题如何排查并解决？在工作过程中，也会经常用到，乐观锁，排它锁等。</p><p>注：MySQL 是一个支持插件式存储引擎的数据库系统。下面的所有介绍，都是基于 InnoDB 存储引擎，其他引擎的表现，会有较大的区别。</p><p><strong>版本查看</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select version();</span><br></pre></td></tr></table></figure><p><strong>存储引擎查看</strong></p><p>MySQL 给开发者提供了查询存储引擎的功能，我这里使用的是 MySQL5.6.4，可以使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW ENGINES</span><br></pre></td></tr></table></figure><h4 id="1-乐观锁"><a href="#1-乐观锁" class="headerlink" title="1.乐观锁"></a>1.乐观锁</h4><p>假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。</p><p>用数据版本（Version）记录机制实现，这是乐观锁最常用的一种实现方式。何谓数据版本？即为数据增加一个版本标识，一般是通过为数据库表增加一个数字类型的 “version” 字段来实现。当读取数据时，将 version 字段的值一同读出，数据每更新一次，对此 version 值加1。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的 version 值进行比对，如果数据库表当前版本号与第一次取出来的 version 值相等，则予以更新，否则认为是过期数据。例：</p><p>a. 数据库表设计三个字段，分别是 id,value,version</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,value,version from TABLE where id=#&#123;id&#125;</span><br></pre></td></tr></table></figure><p>b. 每次更新表中的value字段时，为了防止发生冲突，需要这样操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update TABLE</span><br><span class="line">set value=2,version=version+1</span><br><span class="line">where id=#&#123;id&#125; and version=#&#123;version&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-悲观锁"><a href="#2-悲观锁" class="headerlink" title="2.悲观锁"></a>2.悲观锁</h4><p>假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。</p><p>悲观锁就是在操作数据时，认为此操作会出现数据冲突，所以在进行每次操作时都要通过获取锁才能进行对相同数据的操作，这点跟 Java 中的 synchronized 很相似，所以悲观锁需要耗费较多的时间。另外与乐观锁相对应的，悲观锁是由数据库自己实现了的，要用的时候，我们直接调用数据库的相关语句就可以了。</p><p>说到这里，由悲观锁涉及到的另外两个锁概念就出来了，它们就是<strong>共享锁</strong>与<strong>排它锁</strong>。<strong>共享锁和排它锁是悲观锁的不同的实现</strong>，它俩都属于悲观锁的范畴。以排它锁为例：</p><p>要使用悲观锁，我们必须关闭 mysql 数据库的自动提交属性，因为 MySQL 默认使用 autocommit 模式，也就是说，当你执行一个更新操作后，MySQL 会立刻将结果进行提交。我们可以使用命令设置 MySQL 为非 autocommit 模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">set autocommit=0;</span><br><span class="line"># 设置完autocommit后，我们就可以执行我们的正常业务了。具体如下：</span><br><span class="line"></span><br><span class="line"># 1. 开始事务 (三者选一就可以)</span><br><span class="line">begin; / begin work; / start transaction;</span><br><span class="line"></span><br><span class="line"># 2. 查询表信息</span><br><span class="line">select status from TABLE where id=1 for update;</span><br><span class="line"></span><br><span class="line"># 3. 插入一条数据</span><br><span class="line">insert into TABLE (id,value) values (2,2);</span><br><span class="line"></span><br><span class="line"># 4. 修改数据为</span><br><span class="line">update TABLE set value=2 where id=1;</span><br><span class="line"></span><br><span class="line"># 5. 提交事务</span><br><span class="line">commit;/commit work;</span><br></pre></td></tr></table></figure><h4 id="3-共享锁"><a href="#3-共享锁" class="headerlink" title="3.共享锁"></a>3.共享锁</h4><p>共享锁又称<strong>读锁</strong>（read lock），是读取操作创建的锁。其他用户可以并发读取数据，但任何事务都不能对数据进行修改（获取数据上的排他锁），直到已释放所有共享锁。</p><p>如果事务 T 对数据 A 加上共享锁后，则其他事务只能对 A 再加共享锁，不能加排他锁。获得共享锁的事务只能读数据，不能修改数据。</p><p>打开第一个查询窗口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#三者选一就可以</span><br><span class="line">begin; / begin work; / start transaction;</span><br><span class="line"></span><br><span class="line">SELECT * from TABLE where id = 1  lock in share mode;</span><br></pre></td></tr></table></figure><p>然后在另一个查询窗口中，对 id 为 1 的数据进行更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update TABLE set name=&quot;www.souyunku.com&quot; where id =1;</span><br></pre></td></tr></table></figure><p>此时，操作界面进入了卡顿状态，过了超时间，提示错误信息</p><p>如果在超时前，执行 <code>commit</code>，此更新语句就会成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SQL]update  test_one set name=&quot;www.souyunku.com&quot; where id =1;</span><br><span class="line">[Err] 1205 - Lock wait timeout exceeded; try restarting transaction</span><br></pre></td></tr></table></figure><p>加上共享锁后，也提示错误信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update test_one set name=&quot;www.souyunku.com&quot; where id =1 lock in share mode;</span><br><span class="line">[SQL]update  test_one set name=&quot;www.souyunku.com&quot; where id =1 lock in share mode;</span><br><span class="line">[Err] 1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;lock in share mode&apos; at line 1</span><br></pre></td></tr></table></figure><p>在查询语句后面增加 <code>lock in share mode</code>，MySQL 会对查询结果中的每行都加共享锁，当没有其他线程对查询结果集中的任何一行使用排他锁时，可以成功申请共享锁，否则会被阻塞。其他线程也可以读取使用了共享锁的表，而且这些线程读取的是同一个版本的数据。</p><p>加上共享锁后，对于 <code>update,insert,delete</code> 语句会自动加排它锁。</p><h4 id="4-排它锁"><a href="#4-排它锁" class="headerlink" title="4.排它锁"></a>4.排它锁</h4><p>排他锁 exclusive lock（也叫 writer lock）又称<strong>写锁</strong>。</p><p><strong>排它锁是悲观锁的一种实现，在上面悲观锁也介绍过</strong>。</p><p>若事务 1 对数据对象 A 加上 X 锁，事务 1 可以读 A 也可以修改 A，其他事务不能再对 A 加任何锁，直到事物 1 释放 A 上的锁。这保证了其他事务在事物 1 释放 A 上的锁之前不能再读取和修改 A。排它锁会阻塞所有的排它锁和共享锁。</p><p>读取为什么要加读锁呢：防止数据在被读取的时候被别的线程加上写锁。</p><p>使用方式：在需要执行的语句后面加上 <code>for update</code> 就可以了。</p><h4 id="5-行锁"><a href="#5-行锁" class="headerlink" title="5.行锁"></a>5.行锁</h4><p>行锁又分<strong>共享锁</strong>和<strong>排他锁</strong>，由字面意思理解，就是给某一行加上锁，也就是一条记录加上锁。</p><p>注意：行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁。</p><p><strong>共享锁：</strong></p><p>名词解释：共享锁又叫做读锁，所有的事务只能对其进行读操作不能写操作，加上共享锁后在事务结束之前其他事务只能再加共享锁，除此之外其他任何类型的锁都不能再加了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#结果集的数据都会加共享锁</span><br><span class="line">SELECT * from TABLE where id = &quot;1&quot;  lock in share mode;</span><br></pre></td></tr></table></figure><p><strong>排他锁：</strong></p><p>名词解释：若某个事物对某一行加上了排他锁，只能这个事务对其进行读写，在此事务结束之前，其他事务不能对其进行加任何锁，其他进程可以读取，不能进行写操作，需等待其释放。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select status from TABLE where id=1 for update;</span><br></pre></td></tr></table></figure><p>可以参考之前演示的共享锁，排它锁语句</p><p>由于对于表中 id 字段为主键，就也相当于索引。执行加锁时，会将 id 这个索引为 1 的记录加上锁，那么这个锁就是行锁。</p><h4 id="6-表锁"><a href="#6-表锁" class="headerlink" title="6.表锁"></a>6.表锁</h4><p><strong>如何加表锁</strong></p><p>innodb 的行锁是在有索引的情况下,没有索引的表是锁定全表的。</p><p><strong>Innodb中的行锁与表锁</strong></p><p>前面提到过，在 Innodb 引擎中既支持行锁也支持表锁，那么什么时候会锁住整张表，什么时候或只锁住一行呢？ 只有通过索引条件检索数据，InnoDB 才使用行级锁，否则，InnoDB 将使用表锁！</p><p>在实际应用中，要特别注意 InnoDB 行锁的这一特性，不然的话，可能导致大量的锁冲突，从而影响并发性能。</p><p>行级锁都是基于索引的，如果一条 SQL 语句用不到索引是不会使用行级锁的，会使用表级锁。行级锁的缺点是：由于需要请求大量的锁资源，所以速度慢，内存消耗大。</p><h4 id="7-死锁"><a href="#7-死锁" class="headerlink" title="7. 死锁"></a>7. 死锁</h4><p>死锁（Deadlock） 所谓死锁：是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。由于资源占用是互斥的，当某个进程提出申请资源后，使得有关进程在无外力协助下，永远分配不到必需的资源而无法继续运行，这就产生了一种特殊现象死锁。</p><p>解除正在死锁的状态有两种方法：</p><p><strong>第一种</strong>：</p><p>查询是否锁表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show OPEN TABLES where In_use &gt; 0;</span><br></pre></td></tr></table></figure><p>查询进程（如果您有SUPER权限，您可以看到所有线程。否则，您只能看到您自己的线程）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show processlist</span><br></pre></td></tr></table></figure><p>杀死进程id（就是上面命令的id列）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill id</span><br></pre></td></tr></table></figure><p><strong>第二种</strong>：</p><p>查看当前的事务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM INFORMATION_SCHEMA.INNODB_TRX;</span><br></pre></td></tr></table></figure><p>查看当前锁定的事务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS;</span><br></pre></td></tr></table></figure><p>查看当前等锁的事务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;</span><br></pre></td></tr></table></figure><p>杀死进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill 进程ID</span><br></pre></td></tr></table></figure><p>如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。其次，进程运行推进顺序与速度不同，也可能产生死锁。 产生死锁的四个必要条件：</p><ol><li>互斥条件：一个资源每次只能被一个进程使用。</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件：进程已获得的资源，在末使用完之前，不能强行剥夺。</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li></ol><p>虽然不能完全避免死锁，但可以使死锁的数量减至最少。将死锁减至最少可以增加事务的吞吐量并减少系统开销，因为只有很少的事务回滚，而回滚会取消事务执行的所有工作。由于死锁时回滚而由应用程序重新提交。</p><p><strong>下列方法有助于最大限度地降低死锁：</strong></p><ol><li>按同一顺序访问对象</li><li>避免事务中的用户交互</li><li>保持事务简短并在一个批处理中</li><li>使用低隔离级别</li><li>使用绑定连接</li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络基础</title>
      <link href="/2019/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>总结自 <a href="https://juejin.im/post/5b7be0b2e51d4538db34a51e" target="_blank" rel="noopener">SnailClimb</a> 和 <a href="https://github.com/frank-lam/fullstack-tutorial/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.md#5-tcp%E5%92%8Cudp%E5%8C%BA%E5%88%AB%E5%A6%82%E4%BD%95%E6%94%B9%E8%BF%9Btcp" target="_blank" rel="noopener">frank-lam</a> 的博文。</p><a id="more"></a><h2 id="一、OSI七层模型、TCP-IP四层模型和五层协议"><a href="#一、OSI七层模型、TCP-IP四层模型和五层协议" class="headerlink" title="一、OSI七层模型、TCP/IP四层模型和五层协议"></a>一、OSI七层模型、TCP/IP四层模型和五层协议</h2><p><img src="http://qnya.pomo16.club/236.png" alt></p><h3 id="1-五层协议"><a href="#1-五层协议" class="headerlink" title="1. 五层协议"></a>1. 五层协议</h3><h4 id="1-应用层"><a href="#1-应用层" class="headerlink" title="(1) 应用层"></a>(1) 应用层</h4><p>提供用户接口，特指能够发起网络流量的程序，比如客户端程序：QQ，MSN，浏览器等；服务器程序：web 服务器，邮件服务器，流媒体服务器等等。</p><p>在互联网中应用层协议很多，如域名系统 DNS，支持万维网应用的 HTTP 协议，支持电子邮件的 SMTP 协议等等。数据单位为报文。</p><p><strong>域名系统</strong></p><blockquote><p>域名系统 (Domain Name System 缩写 DNS，Domain Name 被译为域名)是因特网的一项核心服务，它作为可以将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的 IP 数串。（百度百科）例如：一个公司的 Web  网站可看作是它在网上的门户，而域名就相当于其门牌地址，通常域名都使用该公司的名称或简称。例如上面提到的微软公司的域名，类似的还有：IBM 公司的域名是 <a href="https://link.juejin.im?target=http%3A%2F%2Fwww.ibm.com" target="_blank" rel="noopener">www.ibm.com</a>、Oracle 公司的域名是 <a href="https://link.juejin.im?target=http%3A%2F%2Fwww.oracle.com" target="_blank" rel="noopener">www.oracle.com</a>、Cisco公司的域名是 <a href="https://link.juejin.im?target=http%3A%2F%2Fwww.cisco.com" target="_blank" rel="noopener">www.cisco.com</a> 等。</p></blockquote><p><strong>HTTP 协议</strong></p><blockquote><p>超文本传输协议（HTTP，HyperText Transfer Protocol) 是互联网上应用最为广泛的一种网络协议。所有的 WWW（万维网） 文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。</p></blockquote><h4 id="2-传输层"><a href="#2-传输层" class="headerlink" title="(2) 传输层"></a>(2) 传输层</h4><p>负责向两台主机进程之间的通信提供通用的数据传输服务。由于应用层协议很多，定义通用的传输层协议就可以支持不断增多的应用层协议。传输层向用户提供可靠的端到端服务，透明地传送报文。</p><p><strong>传输层主要两种协议</strong></p><ul><li><strong>传输控制协议 TCP</strong>提供<strong>面向连接的，</strong>可靠的数据传输服务。</li><li><strong>用户数据协议 UDP</strong>提供<strong>无连接</strong>的，尽最大努力的数据传输服务（<strong>不保证数据传输的可靠性</strong>）。</li><li>TCP 主要提供完整性服务，UDP 主要提供及时性服务。</li></ul><p><strong>UDP 的主要特点</strong></p><ol><li>UDP 是无连接的；</li><li>UDP 使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态（这里面有许多参数）；</li><li>UDP 是面向报文的；</li><li>UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如直播，实时视频会议等）；</li><li>UDP 支持一对一、一对多、多对一和多对多的交互通信；</li><li>UDP 的首部开销小，只有8个字节，比 TCP 的20个字节的首部要短。</li></ol><p><strong>TCP 的主要特点</strong></p><ol><li>TCP 是面向连接的。（就好像打电话一样，通话前需要先拨号建立连接，通话结束后要挂机释放连接）；</li><li>每一条 TCP 连接只能有两个端点，每一条 TCP 连接只能是点对点的（一对一）；</li><li>TCP 提供可靠交付的服务。通过 TCP 连接传送的数据，无差错、不丢失、不重复、并且按序到达；</li><li>TCP 提供全双工通信。TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据；</li><li>面向字节流。TCP 中的 “流”（Stream）指的是流入进程或从进程流出的字节序列。“面向字节流”的含义是：虽然应用程序和 TCP 的交互是一次一个数据块（大小不等），但 TCP 把应用程序交下来的数据仅仅看成是一连串的无结构的字节流。</li></ol><h4 id="3-网络层"><a href="#3-网络层" class="headerlink" title="(3) 网络层"></a>(3) 网络层</h4><p>为主机间提供数据传输服务，而运输层协议是为主机中的进程提供服务。网络层把运输层传递下来的报文段或者用户数据报封装成分组和包进行传送。（负责选择最佳路径规划 IP 地址）</p><p>在 TCP/IP 体系结构中，由于网络层使用 <strong>IP 协议</strong>，因此分组也叫 <strong>IP 数据报</strong> ，简称<strong>数据报</strong>。</p><p>网络层的另一个任务就是选择合适的路由，使源主机运输层所传下来的分株，能通过网络层中的路由器找到目的主机。路由器查看数据包目标 IP 地址，根据路由表为数据包选择路径。路由表中的类目可以人工添加（静态路由）也可以动态生成（动态路由）。</p><h4 id="4-数据链路层"><a href="#4-数据链路层" class="headerlink" title="(4) 数据链路层"></a>(4) 数据链路层</h4><p>不同的网络类型，发送数据的机制不同，数据链路层就是将数据包封装成能够在不同的网络传输的帧。能够进行差错检验，但不纠错，监测出错误丢掉该帧。如果需要改正数据在链路层传输时出现差错（这就是说，数据链路层不仅要检错，而且还要纠错），那么就要采用可靠性传输协议来纠正出现的差错。这种方法会使链路层的协议复杂些。</p><h4 id="5-物理层"><a href="#5-物理层" class="headerlink" title="(5) 物理层"></a>(5) 物理层</h4><p>在物理层上所传送的数据单位是比特。物理层的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。 </p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在互联网使用的各种协中最重要和最著名的就是 TCP/IP 两个协议。现在人们经常提到的 TCP/IP 并不一定单指 TCP 和 IP 这两个具体的协议，而往往表示互联网所使用的整个 TCP/IP 协议族。</p><h3 id="2-ISO-七层模型中表示层和会话层功能是什么？"><a href="#2-ISO-七层模型中表示层和会话层功能是什么？" class="headerlink" title="2. ISO 七层模型中表示层和会话层功能是什么？"></a>2. ISO 七层模型中表示层和会话层功能是什么？</h3><ul><li><strong>表示层</strong> ：数据压缩、加密以及数据描述。这使得应用程序不必担心在各台主机中表示/存储的内部格式（二进制、ASCII，比如乱码）不同的问题。</li><li><strong>会话层</strong> ：建立会话，如 session 认证、断点续传。通信的应用程序之间建立、维护和释放面向用户的连接。通信的应用程序之间建立会话，需要传输层建立1个或多个连接。</li><li>说明：五层协议没有表示层和会话层，而是将这些功能留给应用程序开发者处理。</li></ul><h4 id="3-数据在各层之间的传递过程"><a href="#3-数据在各层之间的传递过程" class="headerlink" title="3. 数据在各层之间的传递过程"></a>3. 数据在各层之间的传递过程</h4><p>在向下的过程中，需要添加下层协议所需要的首部或者尾部，而在向上的过程中不断拆开首部和尾部。</p><ol><li>路由器只有下面三层协议，因为路由器位于网络核心中，不需要为进程或者应用程序提供服务，因此也就不需要运输层和应用层。</li><li>交换机只有下面两层协议</li></ol><h2 id="二、TCP-三次握手和四次挥手"><a href="#二、TCP-三次握手和四次挥手" class="headerlink" title="二、TCP 三次握手和四次挥手"></a>二、TCP 三次握手和四次挥手</h2><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p><img src="http://qnya.pomo16.club/237.png" alt></p><p>为了准确无误地把数据送达目标处，TCP协议采用了三次握手策略。</p><ol><li>客户端–发送带有 SYN 标志的数据包</li><li>服务端–发送带有 SYN/ACK 标志的数据包</li><li>客户端–发送带有 ACK 标志的数据包</li></ol><h4 id="为什么要三次握手？"><a href="#为什么要三次握手？" class="headerlink" title="为什么要三次握手？"></a>为什么要三次握手？</h4><p>三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的。</p><p>第一次握手：Client 什么都不能确认；Server 确认了对方发送正常</p><p>第二次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己接收正常，对方发送正常</p><p>第三次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送接收正常</p><p>所以三次握手就能确认双发收发功能都正常，缺一不可。</p><h4 id="为什么要传回-SYN？"><a href="#为什么要传回-SYN？" class="headerlink" title="为什么要传回 SYN？"></a>为什么要传回 SYN？</h4><p>接收端传回发送端所发送的 SYN 是为了告诉发送端，我接收到的信息确实就是你所发送的信号了。</p><h4 id="传了-SYN-为啥还要传-ACK？"><a href="#传了-SYN-为啥还要传-ACK？" class="headerlink" title="传了 SYN,为啥还要传 ACK？"></a>传了 SYN,为啥还要传 ACK？</h4><p>双方通信无误必须是两者互相发送信息都无误。传了 SYN，证明发送方到接收方的通道没有问题，但是接收方到发送方的通道还需要 ACK 信号来进行验证。</p><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p><img src="http://qnya.pomo16.club/238.png" alt></p><blockquote><p>MSL 是 Maximum Segment Lifetime 英文的缩写，中文可以译为 “报文最大生存时间”，他是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。2MSL = 2*2mins = 4mins</p></blockquote><p>断开一个 TCP 连接则需要“四次挥手”。</p><ol><li>客户端-发送一个 FIN，用来关闭客户端到服务器的数据传送</li><li>服务器-收到这个 FIN，它发回一 个 ACK，确认序号为收到的序号加1 。和 SYN 一样，一个 FIN 将占用一个序号</li><li>服务器-关闭与客户端的连接，发送一个 FIN 给客户端</li><li>客户端-发回 ACK 报文确认，并将确认序号设置为收到序号加1</li></ol><h4 id="为什么要四次挥手？"><a href="#为什么要四次挥手？" class="headerlink" title="为什么要四次挥手？"></a>为什么要四次挥手？</h4><p>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。</p><h4 id="TIME-WAIT"><a href="#TIME-WAIT" class="headerlink" title="TIME_WAIT"></a>TIME_WAIT</h4><p>客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：</p><ul><li>确保最后一个确认报文段能够到达。如果 B 没收到 A 发送来的确认报文段，那么就会重新发送连接释放请求报文段，A 等待一段时间就是为了处理这种情况的发生。</li><li>等待一段时间是为了让本连接持续时间内所产生的所有报文段都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文段。</li></ul><h2 id="三、TCP-和-UDP-的区别"><a href="#三、TCP-和-UDP-的区别" class="headerlink" title="三、TCP 和 UDP 的区别"></a>三、TCP 和 UDP 的区别</h2><p><img src="http://qnya.pomo16.club/239.png" alt></p><p>UDP 在传送数据之前不需要先建立连接，远地主机在收到 UDP 报文后，不需要给出任何确认。虽然 UDP 不提供可靠交付，但在某些情况下 UDP 确是一种最有效的工作方式（一般用于即时通信），比如： QQ 语音、 QQ 视频 、直播等等。</p><p>TCP 提供面向连接的服务。在传送数据之前必须先建立连接，数据传送结束后要释放连接。 TCP 不提供广播或多播服务。由于 TCP 要提供可靠的，面向连接的运输服务（TCP 的可靠体现在 TCP 在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源），这一难以避免增加了许多开销，如确认，流量控制，计时器以及连接管理等。这不仅使协议数据单元的首部增大很多，还要占用许多处理机资源。TCP 一般用于文件传输、发送和接收邮件、远程登录等场景。</p><h2 id="四、TCP-协议如何保证可靠传输"><a href="#四、TCP-协议如何保证可靠传输" class="headerlink" title="四、TCP 协议如何保证可靠传输"></a>四、TCP 协议如何保证可靠传输</h2><ul><li>应用数据被分割成 TCP 认为最适合发送的数据块。 </li><li>TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。 </li><li>TCP的接收端会丢弃重复的数据。</li><li><strong>校验和：</strong> TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li><li><strong>拥塞控制</strong>：当网络拥塞时，减少数据的发送。</li><li><strong>停止等待协议</strong> 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。<strong>超时重传</strong>：当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</li><li><strong>流量控制</strong>：TCP 连接的每一方都有固定大小的缓冲空间，TCP 的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。</li></ul><h3 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h3><ul><li>停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组；</li><li>在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认；</li></ul><p><strong>1. 无差错情况</strong></p><p><img src="http://qnya.pomo16.club/240.png" style="height:400px"></p><p><strong>2. 出现差错情况（超时重传）</strong></p><p><img src="http://qnya.pomo16.club/241.png" alt></p><p>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 <strong>自动重传请求 ARQ</strong> 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。<strong>连续 ARQ 协议</strong> 可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。</p><p><strong>3. 确认丢失和确认迟到</strong></p><ul><li><strong>确认丢失</strong>：确认消息在传输过程丢失</li></ul><p><img src="http://qnya.pomo16.club/242.png" alt></p><p>当 A 发送 M1 消息，B 收到后，B 向 A 发送了一个 M1 确认消息，但却在传输过程中丢失。而A 并不知道，在超时计时过后，A 重传 M1 消息，B 再次收到该消息后采取以下两点措施：</p><ol><li>丢弃这个重复的M1消息，不向上层交付。</li><li>向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。</li></ol><ul><li><strong>确认迟到</strong> ：确认消息在传输过程中迟到</li></ul><p><img src="http://qnya.pomo16.club/243.png" alt></p><p>A 发送 M1 消息，B 收到并发送确认。在超时时间内没有收到确认消息，A 重传 M1 消息，B 仍然收到并继续发送确认消息（B 收到了 2 份 M1）。此时 A 收到了 B 第二次发送的确认消息。接着发送其他数据。过了一会，A 收到了 B 第一次发送的对 M1 的确认消息（A 也收到了2份确认消息）。处理如下：</p><ol><li>A 收到重复的确认后，直接丢弃。</li><li>B 收到重复的 M1 后，也直接丢弃重复的 M1。</li></ol><h3 id="自动重传请求-ARQ-协议"><a href="#自动重传请求-ARQ-协议" class="headerlink" title="自动重传请求 ARQ 协议"></a>自动重传请求 ARQ 协议</h3><p>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为自动重传请求 ARQ。</p><p><strong>优点</strong>：简单。</p><p><strong>缺点</strong>：信道利用率低。</p><h3 id="连续-ARQ-协议"><a href="#连续-ARQ-协议" class="headerlink" title="连续 ARQ 协议"></a>连续 ARQ 协议</h3><p>连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。</p><p><strong>优点：</strong> 信道利用率高，容易实现，即使确认丢失，也不必重传。</p><p><strong>缺点：</strong> 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5条消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。</p><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><ul><li>TCP 利用滑动窗口实现流量控制的机制。</li><li>滑动窗口（Sliding window）是一种流量控制技术。早期的网络通信中，通信双方不会考虑网络的拥挤情况直接发送数据。由于大家不知道网络拥塞状况，同时发送数据，导致中间节点阻塞掉包，谁也发不了数据，所以就有了滑动窗口机制来解决此问题。</li><li>TCP 中采用滑动窗口来进行传输控制，滑动窗口的大小意味着接收方还有多大的缓冲区可以用于接收数据。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。当滑动窗口为 0 时，发送方一般不能再发送数据报，但有两种情况除外，一种情况是可以发送紧急数据，例如，允许用户终止在远端机上的运行进程。另一种情况是发送方可以发送一个 1 字节的数据报来通知接收方重新声明它希望接收的下一字节及发送方的滑动窗口大小。</li></ul><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><ul><li>TCP 利用滑动窗口实现流量控制。</li><li>流量控制是为了控制发送方发送速率，保证接收方来得及接收。</li><li>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</li></ul><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><ul><li>在某段时间，若对网络中某资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏——产生拥塞(congestion)。</li><li>出现资源拥塞的条件：对资源需求的总和 &gt; 可用资源</li><li>若网络中有许多资源同时产生拥塞，网络的性能就要明显变坏，整个网络的吞吐量将随输入负荷的增大而下降。</li><li>拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载。</li><li>拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器，以及与降低网络传输性能有关的所有因素。相反，流量控制往往是点对点通信量的控制，是个端到端的问题。</li></ul><p>为了进行拥塞控制，TCP 发送方要维持一个 <strong>拥塞窗口(cwnd)</strong> 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让自己的发送窗口取为拥塞窗口和接收方的接受窗口中较小的一个。</p><p>TCP 的拥塞控制采用了四种算法，即 <strong>慢开始</strong> 、 <strong>拥塞避免</strong> 、<strong>快重传</strong> 和 <strong>快恢复</strong>。在网络层也可以使路由器采用适当的分组丢弃策略（如主动队列管理 AQM），以减少网络拥塞的发生。</p><ul><li><p>慢开始</p><p>慢开始算法的思路是当主机开始发送数据时，如果立即把大量数据字节注入到网络，那么可能会引起网络阻塞，因为现在还不知道网络的符合情况。经验表明，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd 初始值为1，每经过一个传播轮次，cwnd 加倍。 </p></li><li><p>拥塞避免</p><p>拥塞避免算法的思路是让拥塞窗口 cwnd 缓慢增大，即每经过一个往返时间 RTT 就把发送放的 cwnd 加1。</p></li><li><p>快重传和快恢复</p><p>在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。  当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。 </p></li></ul><h2 id="五、在浏览器中输入url地址-gt-显示主页的过程"><a href="#五、在浏览器中输入url地址-gt-显示主页的过程" class="headerlink" title="五、在浏览器中输入url地址 -&gt; 显示主页的过程"></a>五、在浏览器中输入url地址 -&gt; 显示主页的过程</h2><p><img src="http://qnya.pomo16.club/244.png" alt></p><h2 id="六、状态码"><a href="#六、状态码" class="headerlink" title="六、状态码"></a>六、状态码</h2><table><thead><tr><th></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1xx</td><td>Informational (信息性状态码)</td><td>接收的请求正在处理</td></tr><tr><td>2xx</td><td>Success (成功状态码)</td><td>请求正常处理完毕</td></tr><tr><td>3xx</td><td>Redirection (重定向状态码)</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4xx</td><td>Client Error (客户端错误状态码)</td><td>服务器无法处理请求</td></tr><tr><td>5xx</td><td>Server Error (服务器错误状态码)</td><td>服务器处理请求出错</td></tr></tbody></table><p>详见博文 <a href="[https://pomo16.github.io/2018/11/19/HTTP%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%8A%B6%E6%80%81%E7%A0%81/](https://pomo16.github.io/2018/11/19/HTTP中常用的状态码/">HTTP中常用的状态码</a>)</p><h2 id="七、各协议与-HTTP-协议之间的关系"><a href="#七、各协议与-HTTP-协议之间的关系" class="headerlink" title="七、各协议与 HTTP 协议之间的关系"></a>七、各协议与 HTTP 协议之间的关系</h2><p><img src="http://qnya.pomo16.club/245.png" alt></p><h2 id="八、HTTP-的长连接和短连接"><a href="#八、HTTP-的长连接和短连接" class="headerlink" title="八、HTTP 的长连接和短连接"></a>八、HTTP 的长连接和短连接</h2><p>在 HTTP/1.0 中默认使用短连接。也就是说，客户端和服务器每进行一次 HTTP 操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个 HTML 或其他类型的 Web 页中包含有其他的 Web 资源（如 JavaScript 文件、图像文件、CSS 文件等），每遇到这样一个 Web 资源，浏览器就会重新建立一个 HTTP 会话。</p><p>而从 HTTP/1.1 起，默认使用长连接，用以保持连接特性。使用长连接的 HTTP 协议，会在响应头加入这行代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection:keep-alive</span><br></pre></td></tr></table></figure><p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。 Keep-Alive 不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如 Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</p><p><strong>HTTP 协议的长连接和短连接，实质上是 TCP 协议的长连接和短连接。</strong></p><h2 id="九、HTTP-和-HTTPS-的区别"><a href="#九、HTTP-和-HTTPS-的区别" class="headerlink" title="九、HTTP 和 HTTPS 的区别"></a>九、HTTP 和 HTTPS 的区别</h2><ul><li>https 协议需要到 ca 申请证书，一般免费证书较少，因而需要一定费用。</li><li>http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 ssl 加密传输协议。</li><li>http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li>http 的连接很简单，是无状态的；https 协议是由 SSL + http 协议构建的可进行加密传输、身份认证的网络协议，比 http 协议安全。</li></ul><h2 id="十、SSL-的四次握手"><a href="#十、SSL-的四次握手" class="headerlink" title="十、SSL 的四次握手"></a>十、SSL 的四次握手</h2><ol><li><p>客户端请求建立 SSL 链接，并向服务端发送一个随机数（client random）和客户端支持的加密方法（比如 RSA），此时是明文传输的。 </p></li><li><p>服务端选择客户端支持的一种加密算法并生成另一个随机数（server random），并将授信的服务端证书和公钥下发给客户端。 </p></li><li><p>客户端收到服务端的回复，会校验服务端证书的合法性，若合法，则生成一个新的随机数 premaster secret 并通过服务端下发的公钥及加密方法进行加密，然后发送给服务端。 </p></li><li><p>服务端收到客户端的回复，利用已知的加解密方式进行解密，同时利用 client random、server random 和 premater secret 通过一定算法生成对称加密 key - session key。</p></li></ol><p>此后，数据传输即通过对称加密方式进行加密传输。 </p><p>从以上过程可以看到 https 实际上是用了对称加密技术和非对称加密技术，非对称加密解密速度慢，但安全性高，用来加密对称加密的密钥；而对称加密虽然安全性低，但解密速度快，可以用于传输数据的加密。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 基础知识</title>
      <link href="/2019/06/09/Spring-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/06/09/Spring-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-IOC-和-AOP"><a href="#Spring-IOC-和-AOP" class="headerlink" title="Spring IOC 和 AOP"></a>Spring IOC 和 AOP</h2><p>Spring 的 IOC 容器是 Spring 的核心，Spring AOP 是 Spring 框架的重要组成部分。</p><h4 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h4><p><strong>1. IOC 是什么？</strong></p><ul><li>IOC (Inversion Of Control)控制反转，包含了两个方面：控制和反转<ul><li>控制：当前对象对内部成员的控制权。</li><li>反转：这种控制权不由当前对象管理了，由其他(类,第三方容器)来管理。</li></ul></li><li>IOC 的意思是控件反转也就是由容器控制程序之间的关系，这也是 Spring 的优点所在，把控件权交给了外部容器，之前的写法，由程序代码直接操控，而现在控制权由应用代码中转到了外部容器，控制权的转移是所谓反转。换句话说之前用 new 的方式获取对象，现在由 Spring 给你，至于怎么给你就是 DI 了。</li><li>IOC 容器是 Spring 用来实现 IOC 的载体， IOC 容器实际上就是个 Map（key，value），Map 中存放的是各种对象。</li></ul><p><strong>2. IOC 实现原理</strong></p><ul><li>创建 xml 配置文件，配置要创建的对象类。</li><li>通过反射创建实例。</li><li><p>获取需要注入的接口实现类并将其赋值给该接口。</p><p><strong>3. 优点</strong></p></li><li><p>解耦合，开发更方便组织分工</p></li><li>高层不依赖于底层（依赖倒置）</li><li>让应用更容易测试</li><li>因为把对象生成放在了 XML 里定义，所以当我们需要换一个实现子类将会变成很简单（一般这样的对象都是实现于某种接口的），只要修改 XML 就可以了，这样我们甚至可以实现对象的热插拨</li></ul><h4 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h4><p><strong>1. AOP是什么？</strong></p><ul><li>AOP（Aspect Oriented Programming ）称为面向切面编程，扩展功能不是修改源代码实现，在程序开发中主要用来解决一些系统层面上的问题，比如日志，事务，权限等待，Struts2 的拦截器设计就是基于 AOP 的思想，是个比较经典的例子。</li><li>面向切面编程（aop）是对面向对象编程（oop）的补充。</li><li>面向切面编程提供声明式事务管理。</li><li>AOP就是典型的代理模式的体现。</li></ul><p><strong>2. AOP 实现原理</strong></p><ul><li>动态代理（利用<strong>反射和动态编译</strong>将代理模式变成动态的）</li><li>JDK 的动态代理<ul><li>JDK 内置的 Proxy 动态代理可以在运行时动态生成字节码，而没必要针对每个类编写代理类</li><li>JDK Proxy 返回动态代理类，是目标类所实现接口的另一个实现版本，它实现了对目标类的代理（如同 UserDAOProxy 与 UserDAOImp 的关系）</li></ul></li><li>cglib动态代理<ul><li>CGLibProxy 返回的动态代理类，则是目标代理类的一个子类（代理类扩展了 UserDaoImpl 类）</li><li>cglib 继承被代理的类，重写方法，织入通知，动态生成字节码并运行</li></ul></li><li>两种实现的区别<ul><li>JDK 动态代理只能对实现了接口的类生成代理，而不能针对类</li><li>cglib 是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法因为是继承，所以该类或方法最好不要声明成 final</li><li>JDK 代理是不需要以来第三方的库，只要 JDK 环境就可以进行代理</li><li>cglib 必须依赖于 cglib 的类库，但是它需要类来实现任何接口代理的是指定的类生成一个子类，覆盖其中的方法，是一种继承</li></ul></li></ul><p><strong>3. 优点</strong></p><ul><li>各个步骤之间的良好隔离性</li><li>源代码无关性</li><li>松耦合</li><li>易扩展</li><li>代码复用</li></ul><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p><strong>DI 是什么？</strong></p><p>DI(Dependency Injection) ，即依赖注入，是 Spring 中实现 IOC 的方式。所谓依赖注入，就是把底层类作为参数传入上层类，实现上层类对下层类的控制。DI 依赖注入，向类里面属性注入值 ，依赖注入不能单独存在，需要在 IOC 基础上完成操作。</p><p><strong>3种注入方式（使用注解）</strong></p><ul><li><p>field 注入，简单易用，但可能会出现依赖循环，且无法适用于 IOC 容器以外的环境。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="comment">//@Inject</span></span><br><span class="line">  <span class="keyword">private</span> FooService fooService;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//简单的使用例子，下同</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Foo&gt; <span class="title">listFoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fooService.list();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 setter 方法注入，比构造器注入轻量，另外 setter 方式能让类在之后重新配置或重新注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooController</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> FooService fooService;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//使用方式上同，略</span></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFooService</span><span class="params">(FooService fooService)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fooService = fooService;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用构造器注入，Spring 官方建议使用构造器注入，因为其能保证<strong>组件不可变</strong>，并且确保需要的<strong>依赖不为空</strong>。此外，构造器注入的依赖总是能够在返回客户端（组件）代码的时候保证<strong>完全初始化的状态</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooController</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> FooService fooService;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FooController</span><span class="params">(FooService fooService)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fooService = fooService;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//使用方式上同，略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring-IOC-初始化过程"><a href="#Spring-IOC-初始化过程" class="headerlink" title="Spring IOC 初始化过程"></a>Spring IOC 初始化过程</h2><p><img src="http://qnya.pomo16.club/233.png" alt></p><ol><li>Resource 资源定位。这个 Resouce 指的是 BeanDefinition 的资源定位。这个过程就是容器找数据的过程，就像水桶装水需要先找到水一样。</li><li><p>BeanDefinition 的载入过程。这个载入过程是把用户定义好的 Bean 表示成 IOC 容器内部的数据结构，而这个容器内部的数据结构就是 BeanDefition。</p></li><li><p>向 IOC 容器注册这些 BeanDefinition 的过程，这个过程就是将前面的 BeanDefition 保存到 HashMap 中的过程。</p></li></ol><h2 id="Spring-AOP-的使用"><a href="#Spring-AOP-的使用" class="headerlink" title="Spring AOP 的使用"></a>Spring AOP 的使用</h2><p>AOP（Aspect Oriented Programming ）称为面向切面编程，扩展功能不是修改源代码实现，在程序开发中主要用来解决一些系统层面上的问题，比如日志，事务，权限等待， Struts2 的拦截器设计就是基于 AOP 的思想，是个比较经典的例子。</p><ul><li><strong>Joinpoint</strong>（连接点）：类里面可以被增强的方法，这些方法称为连接点</li><li><strong>Pointcut</strong>（切入点）：所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义</li><li><strong>Advice</strong>（通知/增强）：所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。通知分为前置通知，后置通知，异常通知，最终通知，环绕通知（切面要完成的功能）</li><li>Aspect（切面）：是切入点和通知（引介）的结合</li><li>Introduction（引介）：引介是一种特殊的通知在不修改类代码的前提下，Introduction可以在运行期为类动态地添加一些方法或 Field</li><li>Target（目标对象）：代理的目标对象（要增强的类）</li><li>Weaving（织入）：是把增强应用到目标的过程，把 advice 应用到 target 的过程</li><li>Proxy（代理）：一个类被 AOP 织入增强后，就产生一个结果代理类</li></ul><p><strong>Spring 的 AOP 常用的是拦截器</strong></p><p>一般拦截器都是实现 HandlerInterceptor，其中有三个方法 preHandle、postHandle、afterCompletion。</p><ol><li>preHandle：执行 controller 之前执行</li><li>postHandle：执行完 controller，return modelAndView 之前执行，主要操作 modelAndView 的值</li><li>afterCompletion：controller 返回后执行</li></ol><h2 id="Spring-的事务管理"><a href="#Spring-的事务管理" class="headerlink" title="Spring 的事务管理"></a>Spring 的事务管理</h2><p>事务管理可以帮助我们保证数据的一致性，对应企业的实际应用很重要。</p><p>Spring 的事务机制包括声明式事务和编程式事务。</p><ul><li><strong>编程式事务管理</strong>：Spring 推荐使用 TransactionTemplate，实际开发中使用声明式事务较多。</li><li><strong>声明式事务管理</strong>：将我们从复杂的事务处理中解脱出来，获取连接，关闭连接、事务提交、回滚、异常处理等这些操作都不用我们处理了，Spring 都会帮我们处理。</li></ul><p>声明式事务管理使用了 AOP 面向切面编程实现的，本质就是在目标方法执行前后进行拦截。在目标方法执行前加入或创建一个事务，在执行方法执行后，根据实际情况选择提交或是回滚事务。</p><p><strong>如何使用？</strong></p><p>Spring 事务管理主要包括3个接口，Spring 的事务主要是由它们(PlatformTransactionManager，TransactionDefinition，TransactionStatus)三个共同完成的。</p><ol><li><p>PlatformTransactionManager：事务管理器，主要用于平台相关事务的管理。</p><p>主要有三个方法：commit 事务提交；rollback 事务回滚；getTransaction 获取事务状态。</p></li><li><p>TransactionDefinition：事务定义信息，用来定义事务相关的属性，给事务管理器 PlatformTransactionManager 使用。</p><p>该接口有四个主要方法：</p><ul><li>getIsolationLevel：获取隔离级别；</li><li>getPropagationBehavior：获取传播行为；</li><li>getTimeout：获取超时时间；</li><li>isReadOnly：是否只读（保存、更新、删除时属性变为false–可读写，查询时为true–只读）</li></ul><p>事务管理器能够根据这个返回值进行优化，这些事务的配置信息，都可以通过配置文件进行配置。</p></li><li><p>TransactionStatus：事务具体运行状态，事务管理过程中，每个时间点事务的状态信息。</p><p>一些方法：</p><ul><li>hasSavepoint()：返回这个事务内部是否包含一个保存点</li><li>isCompleted()：返回该事务是否已完成，也就是说，是否已经提交或回滚</li><li>isNewTransaction()：判断当前事务是否是一个新事务</li></ul></li></ol><p><strong>声明式事务的优缺点</strong>：</p><ul><li><strong>优点</strong>：不需要在业务逻辑代码中编写事务相关代码，只需要在配置文件配置或使用注解（@Transaction），这种方式没有侵入性。</li><li><strong>缺点</strong>：声明式事务的最细粒度作用于方法上，如果像代码块也有事务需求，只能变通下，将代码块变为方法。</li></ul><h2 id="Spring-事务隔离级别及传播行为"><a href="#Spring-事务隔离级别及传播行为" class="headerlink" title="Spring 事务隔离级别及传播行为"></a>Spring 事务隔离级别及传播行为</h2><h4 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a>传播行为</h4><p>事务的第一个方面是传播行为。传播行为定义关于客户端和被调用方法的事务边界。Spring 定义了7中传播行为。</p><p><strong>支持当前事务的情况：</strong></p><ul><li><strong>TransactionDefinition.PROPAGATION_REQUIRED：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li><li><strong>TransactionDefinition.PROPAGATION_SUPPORTS：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li><strong>TransactionDefinition.PROPAGATION_MANDATORY：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）</li></ul><p><strong>不支持当前事务的情况：</strong></p><ul><li><strong>TransactionDefinition.PROPAGATION_REQUIRES_NEW：</strong> 创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li><li><strong>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：</strong> 以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li><strong>TransactionDefinition.PROPAGATION_NEVER：</strong> 以非事务方式运行，如果当前存在事务，则抛出异常。</li></ul><p><strong>其他情况：</strong></p><ul><li><strong>TransactionDefinition.PROPAGATION_NESTED：</strong> 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 TransactionDefinition.PROPAGATION_REQUIRED。</li></ul><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><table><thead><tr><th>隔离级别</th><th>含义</th></tr></thead><tbody><tr><td>ISOLATION_DEFAULT</td><td>使用后端数据库默认的隔离级别。</td></tr><tr><td>ISOLATION_READ_UNCOMMITTED</td><td>允许读取尚未提交的更改。可能导致脏读、幻影读或不可重复读。</td></tr><tr><td>ISOLATION_READ_COMMITTED</td><td>允许从已经提交的并发事务读取。可防止脏读，但幻影读和不可重复读仍可能会发生。</td></tr><tr><td>ISOLATION_REPEATABLE_READ</td><td>对相同字段的多次读取的结果是一致的，除非数据被当前事务本身改变。可防止脏读和不可重复读，但幻影读仍可能发生。</td></tr><tr><td>ISOLATION_SERIALIZABLE</td><td>完全服从 ACID 的隔离级别，确保不发生脏读、不可重复读和幻影读。这在所有隔离级别中也是最慢的，因为它通常是通过完全锁定当前事务所涉及的数据表来完成的。</td></tr></tbody></table><h2 id="Spring-中的-Bean"><a href="#Spring-中的-Bean" class="headerlink" title="Spring 中的 Bean"></a>Spring 中的 Bean</h2><h4 id="如何创建-Spring-容器？"><a href="#如何创建-Spring-容器？" class="headerlink" title="如何创建 Spring 容器？"></a>如何创建 Spring 容器？</h4><p>容器是 Spring 的核心，在基于 Spring 的应用里，应用对象生存于 Spring 容器中。容器负责创建对象，装配它们，配置它们并管理它们的整个生命周期，从生存到死亡（类似从 new 到 finalize() ）。Spring 可以归为两种不同的类型：</p><ul><li>bean 工厂(由 org.springframework.beans.factory.BeanFactory 接口定义)是最简单的容器，提供基本的 DI 功能。</li><li>应用上下文(由 org.springframework.context.ApplicationContext 接口定义)基于 BeanFactory 构建，并提供应用框架级别的服务，例如从属性文件解析文本信息以及发布应用事件给感兴趣的事件监听者。</li></ul><p>一般来说，bean 工厂太低级了，应用上下文的使用更为广泛。</p><p><strong>使用应用上下文</strong></p><p>常见五种类型：</p><ul><li><p>AnnotationConfigApplicationContext：从一个或多个基于 java 的配置类中加载 Spring 应用上下文</p></li><li><p>AnnotationConfigWebApplicationContext：从一个或多个基于 java 的配置类中加载Spring Web 应用上下文</p></li><li><p>ClassPathXmlApplicationContext：从路径下的一个或多个 XML 配置文件中加载上下文定义，把应用上下文的定义文件作为类资源</p></li><li><p>FileSystemXmlApplicationContext：从文件系统下的一个或多个 XML 配置文件中加载上下文定义</p></li><li><p>XmlWebApplicationContext：从 Web 应用下的一个或多个 XML 配置文件中加载上下文定义</p></li></ul><p><strong>ApplicationContext 上下文的生命周期</strong></p><ol><li>实例化一个 Bean，也就是我们通常说的 new；</li><li>按照 Spring 上下文对实例化的 Bean 进行配置，也就是 IOC 注入</li><li>如果这个 Bean 实现了 BeanNameAware 接口，会调用它实现的 setBeanName(String beanId) 方法，此处传递的是 Spring 配置文件中 Bean 的 ID</li><li>如果这个 Bean 实现了 BeanFactoryAware 接口，会调用它实现的 setBeanFactory() ，传递的是 Spring 工厂本身（可以用这个方法获取到其他 Bean）</li><li>如果这个 Bean 实现了 ApplicationContextAware 接口，会调用 setApplicationContext(ApplicationContext) 方法，传入 Spring 上下文，该方式同样可以实现步骤4，但比4更好，因为 ApplicationContext 是 BeanFactory 的子接口，有更多的实现方法</li><li>如果这个 Bean 关联了 BeanPostProcessor 接口，将会调用postProcessBeforeInitialization(Object obj, String s) 方法，BeanPostProcessor 经常被用作是 Bean 内容的更改，并且由于这个是在 Bean 初始化结束时调用 After 方法，也可用于内存或缓存技术</li><li>如果这个 Bean 在 Spring 配置文件中配置了 init-method 属性会自动调用其配置的初始化方法</li><li>如果这个 Bean 关联了 BeanPostProcessor 接口，将会调用 postAfterInitialization(Object obj, String s) 方法；</li></ol><p>注意：以上工作完成以后就可以用这个 Bean 了，那这个 Bean 是一个 single 的，所以一般情况下我们调用同一个 ID 的 Bean 会是在内容地址相同的实例</p><ol start="9"><li><p>当 Bean 不再需要时，会经过清理阶段，如果 Bean 实现了 DisposableBean 接口，会调用其实现的 destroy 方法</p></li><li><p>最后，如果这个 Bean 的 Spring 配置中配置了 destroy-method 属性，会自动调用其配置的销毁方法</p></li></ol><p>以上10步骤可以作为面试或者笔试的模板，另外这里描述的是应用 Spring 上下文 Bean 的生命周期，如果应用 Spring 的工厂也就是 BeanFactory 的话去掉第5步就Ok了。</p><h4 id="Bean-生命周期"><a href="#Bean-生命周期" class="headerlink" title="Bean 生命周期"></a>Bean 生命周期</h4><p><img src="http://qnya.pomo16.club/234.png" alt></p><ol><li>Spring 对 Bean 进行实例化</li><li>Spring 将值和 Bean 的引用注入进 Bean 对应的属性中</li><li><strong>如果 Bean 实现了 BeanNameAware 接口</strong>，Spring 将 Bean 的 ID 传递给 setBeanName() 方法</li><li><strong>如果 Bean 实现了 BeanFactoryAware 接口</strong>，Spring 将调用 setBeanFactory(BeanFactory bf) 方法并把 BeanFactory 容器实例作为参数传入<ul><li>实现 BeanFactoryAware 主要目的是为了获取 Spring 容器，如 Bean 通过 Spring 容器发布事件等</li></ul></li><li><strong>如果 Bean 实现了 ApplicationContextAwaer 接口</strong>，Spring 容器将调用 setApplicationContext(ApplicationContext ctx) 方法，将 bean 所在的应用上下文的引用传入进来<ul><li>作用与 BeanFactory 类似都是为了获取 Spring 容器，不同的是 Spring 容器在调用 setApplicationContext 方法时会把它自己作为 setApplicationContext 的参数传入，而 Spring 容器在调用 setBeanFactory 前需要程序员自己指定（注入） setBeanFactory 里的 BeanFactory 参数</li></ul></li><li><strong>如果 Bean 实现了 BeanPostProcessor 接口</strong>，Spring 将调用它们的 postProcessBeforeInitialization() 预初始化方法<ul><li>作用是在 Bean 实例创建成功后对进行增强处理，如对 Bean 进行修改，增加某个功能</li></ul></li><li><strong>如果 Bean 实现了 InitializingBean 接口</strong>，Spring 将调用它们的 afterPropertiesSet() 方法，作用与在配置文件中对 Bean 使用 init-method 声明初始化的作用一样，都是在 Bean 的全部属性设置成功后执行的初始化方法</li><li><strong>如果 Bean 实现了 BeanPostProcessor 接口</strong>，Spring 将调用它们的 postProcessAfterInitialization() 后初始化方法<ul><li>作用与6的一样，只不过6是在 Bean 初始化前执行的，而这个是在 Bean 初始化后执行的，时机不同</li></ul></li><li>经过以上的工作后，Bean 将一直驻留在应用上下文中给应用使用，直到应用上下文被销毁</li><li><strong>如果 Bean 实现了 DispostbleBean 接口</strong>，Spring 将调用它的 destory 方法，作用与在配置文件中对 Bean 使用 destory-method 属性的作用一样，都是在 Bean 实例销毁前执行的方法。</li></ol><h4 id="Bean-实例化的三种方式"><a href="#Bean-实例化的三种方式" class="headerlink" title="Bean 实例化的三种方式"></a>Bean 实例化的三种方式</h4><ul><li>使用类的无参构造创建（此种方式用的最多）</li><li>使用静态工厂创建对象</li><li>使用实例工厂创建对象</li></ul><h4 id="Bean-的作用域"><a href="#Bean-的作用域" class="headerlink" title="Bean 的作用域"></a>Bean 的作用域</h4><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>单例(Singleton)</td><td>在整个应用中，只创建 bean 的一个实例。(默认)</td></tr><tr><td>原型(Prototype)</td><td>每次注入或者通过 Spring 应用上下文获取的时候，都会创建一个新的 bean 的实例。</td></tr><tr><td>会话(Session)</td><td>在 Web 应用中，为每个会话创建一个 bean 实例。</td></tr><tr><td>请求(Request)</td><td>在 Web 应用中，为每个请求创建一个 bean 实例。</td></tr></tbody></table><h4 id="BeanFactory-和-FactoryBean-的区别"><a href="#BeanFactory-和-FactoryBean-的区别" class="headerlink" title="BeanFactory 和 FactoryBean 的区别"></a>BeanFactory 和 FactoryBean 的区别</h4><ul><li><strong>BeanFactory</strong> 是个 Factory，也就是 IOC 容器或对象工厂，在 Spring 中，所有的 Bean 都是由 BeanFactory (也就是 IOC 容器)来进行管理的，提供了实例化对象和拿对象的功能。</li><li><strong>FactoryBean</strong> 是个 Bean，这个 Bean 不是简单的 Bean，而是一个能生产或者修饰对象生成的工厂 Bean，它的实现与设计模式中的工厂模式和修饰器模式类似。</li></ul><h4 id="BeanFactory-和-ApplicationContext-的区别"><a href="#BeanFactory-和-ApplicationContext-的区别" class="headerlink" title="BeanFactory 和 ApplicationContext 的区别"></a>BeanFactory 和 ApplicationContext 的区别</h4><table><thead><tr><th>区别</th><th>BeanFactory</th><th>ApplicationContext</th></tr></thead><tbody><tr><td>功能</td><td>BeanFactory 是 Spring 里面最低层的接口，提供了最简单的容器的功能，只提供了实例化对象和拿对象的功能。BeanFactory 需要在代码中通过手工调用 <code>addBeanPostProcessor()</code> 方法进行注册。</td><td>ApplicationContext 会利用 Java 反射机制自动识别出配置文件中定义的 BeanPostProcessor、 InstantiationAwareBeanPostProcessor 和 BeanFactoryPostProcessor 后置器，并自动将它们注册到应用上下文中。</td></tr><tr><td>装载 Bean</td><td>BeanFactory 在初始化容器的时候并未实例化 Bean，直到第一次访问某个 Bean 时才实例化目标 Bean。</td><td>ApplicationContext 在初始化应用上下文的时候就实例化所有单实例的 Bean。</td></tr></tbody></table><p><strong>我们该用 BeanFactory 还是 ApplicationContent ？</strong></p><p><strong>BeanFactory</strong> 延迟实例化的优点：</p><p>应用启动的时候占用资源很少，对资源要求较高的应用，比较有优势，而且通过 Bean 工厂创建的 bean 生命周期会简单一些。</p><p>缺点：速度会相对来说慢一些，而且有可能会出现空指针异常的错误。</p><p><strong>ApplicationContext</strong> 不延迟实例化的优点：</p><ul><li>所有的 Bean 在启动的时候都加载，系统运行的速度快。</li><li>在启动的时候所有的 Bean 都加载了，我们就能在系统启动的时候，尽早的发现系统中的配置问题。</li><li>建议 web 应用，在启动的时候就把所有的 Bean 都加载了。</li></ul><p>缺点：把费时的操作放到系统启动中完成，所有的对象都可以预加载，缺点就是消耗服务器的内存。</p><p><strong>ApplicationContext 的其他特点</strong></p><p>除了提供 BeanFactory 所支持的所有功能外，ApplicationContext 还有额外的功能</p><ul><li>默认初始化所有的 Singleton，也可以通过配置取消预初始化。</li><li>继承 MessageSource，因此支持国际化。</li><li>资源访问，比如访问 URL 和文件（ResourceLoader）。</li><li>事件机制，（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的 web 层。</li><li>同时加载多个配置文件。</li><li>消息发送、响应机制（ApplicationEventPublisher）。</li><li>以声明式方式启动并创建 Spring 容器。</li></ul><p>由于 ApplicationContext 会预先初始化所有的 Singleton Bean，于是在系统创建前期会有较大的系统开销，但一旦 ApplicationContext 初始化完成，程序后面获取 Singleton Bean 实例时候将有较好的性能。</p><p>也可以为 bean 设置 lazy-init 属性为 true，即 Spring 容器将不会预先初始化该 bean。</p><h4 id="Spring-中的单例-bean-的线程安全问题了解吗？"><a href="#Spring-中的单例-bean-的线程安全问题了解吗？" class="headerlink" title="Spring 中的单例 bean 的线程安全问题了解吗？"></a>Spring 中的单例 bean 的线程安全问题了解吗？</h4><p>大部分时候我们并没有在系统中使用多线程，所以很少有人会关注这个问题。单例 Bean 存在线程问题，主要是因为当多个线程操作同一个对象的时候，对这个对象的非静态成员变量的写操作会存在线程安全问题。</p><p>常见的有两种解决办法：</p><ol><li>在 Bean 对象中尽量避免定义可变的成员变量（不太现实）。</li><li>在类中定义一个 ThreadLocal 成员变量，将需要的可变成员变量保存在 ThreadLocal 中（推荐的一种方式）。</li></ol><h2 id="Spring中-autowire-和-resourse-关键字的区别"><a href="#Spring中-autowire-和-resourse-关键字的区别" class="headerlink" title="Spring中 autowire 和 resourse 关键字的区别"></a>Spring中 autowire 和 resourse 关键字的区别</h2><p>@Resource 和 @Autowired 都是做 bean 的注入时使用，其实 @Resource 并不是 Spring 的注解，它的包是 javax.annotation.Resource，需要导入，但是 Spring 支持该注解的注入。</p><h4 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h4><p>两者都可以写在字段和 setter 方法上。两者如果都写在字段上，那么就不需要再写 setter 方法。</p><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><p><strong>@Autowired</strong></p><p>@Autowired 为 Spring 提供的注解，需要导入包 org.springframework.beans.factory.annotation.Autowired; </p><p>只按照 byType 注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 下面两种@Autowired只要使用一种即可</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao; <span class="comment">// 用于字段上</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123; <span class="comment">// 用于属性的方法上</span></span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Autowired 注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许 null 值，可以设置它的 required 属性为 false。如果我们想使用按照名称（byName）来装配，可以结合 @Qualifier 注解一起使用。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"userDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Resource</strong></p><p>@Resource 默认按照 byName 自动注入，由 J2EE 提供，需要导入包javax.annotation.Resource。</p><p>@Resource 有两个重要的属性：name 和 type，而 Spring 将@Resource 注解的 name 属性解析为 bean 的名字，而 type 属性则解析为 bean 的类型。所以，如果使用 name 属性，则使用 byName 的自动注入策略，而使用 type 属性时则使用 byType 自动注入策略。如果既不制定 name 也不制定 type 属性，这时将通过反射机制使用 byName 自动注入策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 下面两种@Resource只要使用一种即可</span></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"userDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao; <span class="comment">// 用于字段上</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"userDao"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123; <span class="comment">// 用于属性的setter方法上</span></span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：最好是将 @Resource 放在 setter 方法上，因为这样更符合面向对象的思想，通过 set、get 去操作属性，而不是直接去操作属性。</p><p>@Resource 装配顺序：</p><ol><li>如果同时指定了 name 和 type，则从 Spring 上下文中找到唯一匹配的 bean 进行装配，找不到则抛出异常。</li><li>如果指定了 name，则从上下文中查找名称（id）匹配的 bean 进行装配，找不到则抛出异常。</li><li>如果指定了 type，则从上下文中找到类似匹配的唯一 bean 进行装配，找不到或是找到多个，都会抛出异常。</li><li>如果既没有指定 name，又没有指定 type，则自动按照 byName 方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。</li></ol><p><strong>@Resource 的作用相当于 @Autowired，只不过 @Autowired 按照 byType 自动注入。@Resource 注解的使用性更为灵活，可指定名称，也可以指定类型 ；@Autowired 注解进行装配容易抛出异常，特别是装配的 bean 类型有多个的时候，而解决的办法是需要在增加 @Qualifier 进行限定。</strong></p><h2 id="Spring-常用注解"><a href="#Spring-常用注解" class="headerlink" title="Spring 常用注解"></a>Spring 常用注解</h2><h4 id="一、组件类注解"><a href="#一、组件类注解" class="headerlink" title="一、组件类注解"></a>一、组件类注解</h4><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Component</td><td>标准一个普通的 Spring Bean 类</td></tr><tr><td>@Repository</td><td>标注一个 DAO 组件类</td></tr><tr><td>@Service</td><td>标注一个业务逻辑组件类</td></tr><tr><td>@Controller</td><td>标注一个控制器组件类</td></tr></tbody></table><p>这些都是注解在平时的开发过程中出镜率极高，@Component、@Repository、@Service、@Controller 实质上属于同一类注解，用法相同，功能相同，区别在于标识组件的类型。@Component 可以代替 @Repository、@Service、@Controller，因为这三个注解是被 @Component 标注的。如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意点</strong></p><ol><li>被注解的 java 类当做 Bean 实例，Bean 实例的名称默认是 Bean 类的首字母小写，其他部分不变。@Service 也可以自定义 Bean 名称，但是必须是唯一的！</li><li>尽量使用对应组件注解的类替换 @Component 注解，在 Spring 未来的版本中，@Controller，@Service，@Repository 会携带更多语义。并且便于开发和维护！</li><li>指定了某些类可作为 Spring Bean 类使用后，最好还需要让 Spring 搜索指定路径，在 Spring 配置文件加入如下配置：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 自动扫描指定包及其子包下的所有Bean类 --&gt;</span><br><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"org.springframework.*"</span>/&gt;</span><br></pre></td></tr></table></figure><h4 id="二、装配bean时常用的注解"><a href="#二、装配bean时常用的注解" class="headerlink" title="二、装配bean时常用的注解"></a>二、装配bean时常用的注解</h4><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Autowired</td><td>属于 Spring 的 org.springframework.beans.factory.annotation 包下,可用于为类的属性、构造器、方法进行注值</td></tr><tr><td>@Resource</td><td>不属于 Spring 的注解，而是来自于 JSR-250 位于 javax.annotation 包下，使用该 annotation 为目标 bean 指定协作者 Bean</td></tr><tr><td>@PostConstruct</td><td>实现初始化之前的操作</td></tr><tr><td>@PreDestroy</td><td>实现销毁 bean 之前进行的操作</td></tr></tbody></table><p><strong>注意点</strong></p><p>使用 @Resource 也要注意添加配置文件到 Spring，如果没有配置 <code>component-scan</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--&lt;context:component-scan&gt;的使用，是默认激活&lt;context:annotation-config&gt;功能--&gt;</span></span><br></pre></td></tr></table></figure><p>则一定要配置 <code>annotation-config</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="三、-Component-vs-Configuration-and-Bean"><a href="#三、-Component-vs-Configuration-and-Bean" class="headerlink" title="三、@Component vs @Configuration and @Bean"></a>三、@Component vs @Configuration and @Bean</h4><p><strong>@Component vs @Configuration</strong> (类级)</p><p>Spring 的官方团队说 @Component 可以替代 @Configuration 注解，事实上我们看源码也可以发现看到，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">//看这里！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>虽然说可以替代但是两个注解之间还是有区别的！</p><p>@Configuration 中所有带 @Bean 注解的方法都会被动态代理，因此调用该方法返回的都是同一个实例。@Configuration 本质上还是 @Component，因此 <code>&lt;context:component-scan/&gt;</code> 或者 <code>@ComponentScan</code> 都能处理 @Configuration 注解的类。</p><p> @Configuration 注解的 bean 都已经变成了<strong>增强的类</strong>。示例：</p><p>@Bean 注解方法执行策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Country <span class="title">country</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Country();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserInfo <span class="title">userInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserInfo(country());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接调用 country() 方法返回的是同一个实例，因为注解是 @Configuration 增强版本类，但是如果是变成 @Component 之后，此时返回的就不是一个实例了，每次都会创建一个实例。下例其实 new 了两次 Country：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Country <span class="title">country</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Country();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserInfo <span class="title">userInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserInfo(country());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过有一招可以让 @Component 也保证使用同一个实例——那就是用 @Autowired 来注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Country country;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Country <span class="title">country</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Country();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserInfo <span class="title">userInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserInfo(country);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Configuration 标记的类必须符合下面的要求：</p><ul><li>配置类必须以类的形式提供（不能是工厂方法返回的实例），允许通过生成子类在运行时增强（cglib 动态代理）。</li><li>配置类不能是 final 类（没法动态代理）。</li><li>配置注解通常为了通过 @Bean 注解生成 Spring 容器管理的类，</li><li>配置类必须是非本地的（即不能在方法中声明，不能是 private）。</li><li>任何嵌套配置类都必须声明为 static。</li><li>@Bean 方法可能不会反过来创建进一步的配置类（也就是返回的 bean 如果带有 @Configuration，也不会被特殊处理，只会作为普通的 bean）。</li></ul><p><strong>@Bean</strong> (方法级)</p><p>@Bean 注解主要用于告诉方法，产生一个 Bean 对象，然后这个 Bean 对象交给 Spring 管理。产生这个 Bean 对象的方法 Spring 只会调用一次，随后这个 Spring 将会将这个 Bean 对象放在自己的 IOC 容器中。</p><p>当使用了 @Bean 注解，我们可以连续使用多种定义 bean 时用到的注解，譬如用 @Qualifier 注解定义工厂方法的名称，用 @Scope 注解定义该 bean 的作用域范围，譬如是 singleton 还是 prototype 等。</p><p>Spring 中新的 Java 配置支持的核心就是 @Configuration 注解的类。这些类主要包括 @Bean 注解的方法来为 Spring 的 IOC 容器管理的对象定义实例，配置和初始化逻辑。</p><p>使用 @Configuration 来注解类表示类可以被 Spring 的 IOC 容器所使用，作为 bean 定义的资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyService <span class="title">myService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这和 Spring 的 XML 文件中的非常类似。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"myService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.acme.services.MyServiceImpl"</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>@Bean 注解扮演了和元素相同的角色。</p><h4 id="四、Spring-MVC模块注解"><a href="#四、Spring-MVC模块注解" class="headerlink" title="四、Spring MVC模块注解"></a>四、Spring MVC模块注解</h4><p><strong>web模块常用到的注解</strong></p><ul><li>@Controller ：表明该类会作为与前端作交互的控制层组件，通过服务接口定义的提供访问应用程序的一种行为，解释用户的输入，将其转换成一个模型然后将试图呈献给用户。Spring MVC 使用 @Controller 定义控制器，它还允许自动检测定义在类路径下的组件（配置文件中配置扫描路径）并自动注册。</li><li>@RequestMapping ： 这个注解用于将 url 映射到整个处理类或者特定的处理请求的方法。可以只用通配符！既可以作用在类级别，也可以作用在方法级别。可以使用 value 属性指定具体路径，也可以用 method 属性标记所接受的请求类型。</li><li>@RequestParam ：将请求的参数绑定到方法中的参数上，有 required 参数，默认情况下，required = true，也就是该参数必须要传。如果该参数可以传可不传，可以配置required = false。</li><li>@PathVariable ： 该注解用于方法修饰方法参数，会将修饰的方法参数变为可供使用的 uri 变量（可用于动态绑定）。</li><li><p>@RequestBody ： 可以将请求体中的 JSON 字符串绑定到相应的 bean 上，当然，也可以将其分别绑定到对应的字符串上。</p></li><li><p>@ResponseBody ： @ResponseBody 与 @RequestBody 类似，它的作用是将返回类型直接输入到 HTTP response body 中。@ResponseBody 在输出 JSON 格式的数据时，会经常用到。</p></li><li>@RestController ：控制器实现了 REST 的 API，只为服务于 JSON，XML 或其它自定义的类型内容，@RestController 用来创建 REST 类型的控制器。@RestController = @Controller + @ResponseBody。</li></ul><h4 id="五、Spring-事务模块注解"><a href="#五、Spring-事务模块注解" class="headerlink" title="五、Spring 事务模块注解"></a>五、Spring 事务模块注解</h4><p><strong>@Transactional</strong></p><p>在处理 dao 层或 service 层的事务操作时，譬如删除失败时的回滚操作。使用 @Transactional 作为注解，但是需要在配置文件激活。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启注解方式声明事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompanyServiceImpl</span> <span class="keyword">implements</span> <span class="title">CompanyService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> CompanyDAO companyDAO;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED, readOnly = <span class="keyword">false</span>, rollbackFor = Exception.class)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = companyDAO.deleteByName(name);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>readOnly</td><td>事务的读写属性，取 true 或者 false，true 为只读，默认为 false</td></tr><tr><td>rollbackFor</td><td>回滚策略，当遇到指定异常时回滚。譬如上例遇到异常就回滚</td></tr><tr><td>timeout</td><td>设置超时时间，单位为秒</td></tr><tr><td>isolation</td><td>设置事务隔离级别，枚举类型，一共五种</td></tr></tbody></table><h2 id="Spring-中用了哪些设计模式"><a href="#Spring-中用了哪些设计模式" class="headerlink" title="Spring 中用了哪些设计模式"></a>Spring 中用了哪些设计模式</h2><p>Spring框架中使用到了大量的设计模式，下面列举了比较有代表性的：</p><ul><li>代理模式：在 AOP 和 remoting 中被用的比较多。</li><li>单例模式：在 Spring 配置文件中定义的 bean 默认为单例模式。</li><li>模板方法：用来解决代码重复的问题。比如: RestTemplate, JmsTemplate, JpaTemplate。</li><li>工厂模式：BeanFactory 用来创建对象的实例。</li><li>适配器：Spring AOP</li><li>装饰器：Spring data hashmapper</li><li>观察者：Spring 时间驱动模型</li><li>回调：Spring ResourceLoaderAware 回调接口</li></ul><h2 id="Spring-MVC的工作原理"><a href="#Spring-MVC的工作原理" class="headerlink" title="Spring MVC的工作原理"></a>Spring MVC的工作原理</h2><p><img src="http://qnya.pomo16.club/235.png" alt></p><ol><li><p>客户端的所有请求都交给前端控制器 DispatcherServlet 来处理，它会负责调用系统的其他模块来真正处理用户的请求。 </p></li><li><p>DispatcherServlet 把请求转发到 HandlerMapping 处理映射器。 </p></li><li><p>找到具体映射之后，生成具体的对象或者拦截对象返回给 DispatcherServlet。</p></li><li><p>DispatcherServlet 请求 HandlerAdapter 适配器执行 Handler。</p></li><li><p>Handler(controller) 执行、调用处理器相应功能处理方法。</p></li><li><p>处理请求完毕后，返回 ModelAndView 给 DispatcherServlet。</p></li><li><p>DispatcherServlet 把 ModelAndView 交给 ViewResolver 视图解析器解析。</p></li><li><p>ViewResolver 视图解析器返回 view 给 DispatcherServlet。</p></li><li><p>DispatcherServlet 根据 view 进行渲染。(把 Model 填进视图)</p></li><li><p>返回响应给用户。</p></li></ol><p><strong>组件及作用</strong></p><ol><li><p>前端控制器 (DispatcherServlet)</p><p>接收请求，响应结果，相当于转发器，中央处理器。负责调用系统的其他模块来真正处理用户的请求。 </p><p>有了 DispatcherServlet 减少了其他组件之间的耦合度</p></li><li><p>处理器映射器 (HandlerMapping)</p><p>作用：根据请求的 url 查找 Handler</p></li><li><p><strong>处理器 (Handler)</strong></p><p>注意：编写 Handler 时按照 HandlerAdapter 的要求去做，这样适配器才可以去正确执行 Handler</p></li><li><p>处理器适配器 (HandlerAdapter)</p><p>作用：按照特定规则（HandlerAdapter要求的规则）执行 Handler。</p></li><li><p>视图解析器 (ViewResolver)</p><p>作用：进行视图解析，根据逻辑视图解析成真正的视图 (View)</p></li><li><p><strong>视图 (View)</strong></p><p>View 是一个接口实现类支持不同的 View 类型（jsp、pdf、图片、json字符串、XML、HTML等等）</p></li></ol><p>注意：只需要程序员开发，处理器和视图。</p><h2 id="Spring-注解的优点"><a href="#Spring-注解的优点" class="headerlink" title="Spring 注解的优点"></a>Spring 注解的优点</h2><ul><li>可以充分利用 Java 的反射机制获取类结构信息，这些信息可以有效减少配置的工作。如使用 JPA 注释配置 ORM 映射时，我们就不需要指定 PO 的属性名、类型等信息，如果关系表字段和 PO 属性名、类型都一致，您甚至无需编写任务属性映射信息——因为这些信息都可以通过 Java 反射机制获取。 </li><li>注释和 Java 代码位于一个文件中，而 XML 配置采用独立的配置文件，大多数配置信息在程序开发完成后都不会调整，如果配置信息和 Java 代码放在一起，有助于增强程序的内聚性。而采用独立的 XML 配置文件，程序员在编写一个功能时，往往需要在程序文件和配置文件中不停切换，这种思维上的不连贯会降低开发效率。 </li><li>编译期校验，错误的注解在编译期间就会报错。注解在java代码中，从而避免了额外的文件维护工作。注解被编译成java字节码，消耗的内存小，读取速度快，往往比xml配置文件解析快几个数量级，利用测试和维护。</li></ul><h2 id="Spring-AOP-和-AspectJ-AOP-有什么区别？"><a href="#Spring-AOP-和-AspectJ-AOP-有什么区别？" class="headerlink" title="Spring AOP 和 AspectJ AOP 有什么区别？"></a>Spring AOP 和 AspectJ AOP 有什么区别？</h2><p><strong>Spring AOP 属于运行时增强，而 AspectJ 是编译时增强。</strong> Spring AOP 基于代理 (Proxying)，而 AspectJ 基于字节码操作 (Bytecode Manipulation)。</p><p>Spring AOP 已经集成了 AspectJ  ，AspectJ  应该算的上是 Java 生态系统中最完整的 AOP 框架了。AspectJ  相比于 Spring AOP 功能更加强大，但是 Spring AOP 相对来说更简单，</p><p>如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择 AspectJ ，它比 Spring AOP 快很多。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb基础</title>
      <link href="/2019/06/07/JavaWeb%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/06/07/JavaWeb%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><a href="#1-什么是-Servlet？">1. 什么是 Servlet？</a></p><p><a href="#2-Servlet-类的继承关系">2. Servlet 类的继承关系</a></p><p><a href="#3-Servlet-实现方式">3. Servlet 实现方式</a></p><p><a href="#4-Tomcat-容器等级">4. Tomcat 容器等级</a></p><p><a href="#5-Servlet-执行流程">5. Servlet 执行流程</a></p><p><a href="#6-Servlet-生命周期">6. Servlet 生命周期</a></p><p><a href="#7-Tomcat-装载-Servlet-的三种情况">7. Tomcat 装载 Servlet 的三种情况</a></p><p><a href="#8-forward-和-redirect">8. forward 和 redirect</a></p><p><a href="#9-Jsp-和-Servlet-的区别">9. Jsp 和 Servlet 的区别</a></p><p><a href="#10-Tomcat-和-Servlet-的联系">10. Tomcat 和 Servlet 的联系</a></p><p><a href="#11-cookie-和-session">11. cookie 和 session</a></p><p><a href="#12-JavaEE-中的三层结构和-MVC">12. JavaEE 中的三层结构和 MVC</a></p><p><a href="#13-RESTful-架构">13. RESTful 架构</a></p><h2 id="1-什么是-Servlet？"><a href="#1-什么是-Servlet？" class="headerlink" title="1. 什么是 Servlet？"></a>1. 什么是 Servlet？</h2><p>Servlet 是在服务器上运行的小程序。一个 servlet 就是一个 Java 类，并且可以通过 “请求—响应” 编程模式来访问的这个驻留在服务器内存里的 servlet 程序。</p><h2 id="2-Servlet-类的继承关系"><a href="#2-Servlet-类的继承关系" class="headerlink" title="2. Servlet 类的继承关系"></a>2. Servlet 类的继承关系</h2><p><img src="http://qnya.pomo16.club/221.png" alt></p><h2 id="3-Servlet-实现方式"><a href="#3-Servlet-实现方式" class="headerlink" title="3. Servlet 实现方式"></a>3. Servlet 实现方式</h2><ul><li><p>实现 javax.servlet.Servlet 接口</p></li><li><p>继承 javax.servlet.GenericServlet 类</p></li><li><p>继承 javax.servlet.http.HttpServlet 类</p><p>通常会去继承 HttpServlet 类来完成 Servlet</p></li></ul><h2 id="4-Tomcat-容器等级"><a href="#4-Tomcat-容器等级" class="headerlink" title="4. Tomcat 容器等级"></a>4. Tomcat 容器等级</h2><p>Tomcat 的容器分为4个等级，Servlet 的容器管理 Context 容器，一个 Context 对应一个 Web 工程。</p><p><img src="http://qnya.pomo16.club/222.png" alt></p><h2 id="5-Servlet-执行流程"><a href="#5-Servlet-执行流程" class="headerlink" title="5. Servlet 执行流程"></a>5. Servlet 执行流程</h2><p>主要描述了从浏览器到服务器，再从服务器到浏览器的整个执行过程。</p><p><strong>1.浏览器请求</strong></p><p><img src="http://qnya.pomo16.club/223.png" alt></p><p>浏览器向服务器请求时，服务器不会直接执行我们的类，而是到 web.xml 里寻找路径名。</p><p>① 浏览器输入访问路径后，携带了请求行，头，体 </p><p>② 根据访问路径找到已注册的 servlet 名称</p><p>③ 根据映射找到对应的 servlet 名 </p><p>④ 根据根据 servlet 名找到我们全限定类名，既我们自己写的类</p><p><strong>2.服务器创建对象</strong></p><p><img src="http://qnya.pomo16.club/224.png" alt></p><p>① 服务器找到全限定类名后，通过反射创建对象，同时也创建了 servletConfig，里面存放了一些初始化信息（注意服务器只会创建一次 servlet 对象，所以 servletConfig 也只有一个）</p><p><strong>3.调用 init 方法</strong></p><p><img src="http://qnya.pomo16.club/225.png" alt></p><p>① 对象创建好之后，首先要执行 init 方法，但是我们发现我们自定义类下没有 init 方法，所以程序会到其父类 HttpServlet 里找</p><p>② 我们发现 HttpServlet 里也没有 init 方法，所以继续向上找，既向其父类 GenericServlet 中继续寻找，在 GenericServlet 中我们发现了 init 方法，则执行 init 方法（对接口 Servlet 中的 init 方法进行了重写）</p><p>注意： 在 GenericServlet 中执行 public void init(ServletConfig config) 方法的时候，又调用了自己无参无方法体的 init() 方法，其目的是为了方便开发者，如果开发者在初始化的过程中需要实现一些功能，可以重写此方法。</p><p><strong>4.调用 service 方法</strong></p><p><img src="http://qnya.pomo16.club/226.png" alt></p><p>接着，服务器会先创建两个对象：ServletRequest 请求对象和 ServletResponse 响应对象，用来封装浏览器的请求数据和封装向浏览器的响应数据</p><p> ① 接着服务器会默认在我们写的类里寻找 service(ServletRequest req, ServletResponse res) 方法，但是 DemoServlet 中不存在，那么会到其父类中寻找 </p><p>② 到父类 HttpServlet 中发现有此方法，则直接调用此方法，并将之前创建好的两个对象传入</p><p>③ 然后将传入的两个参数强转，并调用 HttpServlet 下的另外个 service 方法</p><p>④ 接着执行 <code>service(HttpServletRequest req, HttpServletResponse resp)</code> 方法，在此方法内部进行了判断请求方式，并执行 doGet 和 doPost，但是 doGet 和 doPost 方法已经被我们自己重写了，所以会执行我们重写的方法</p><p>看到这里，你或许有疑问：为什么我们不直接重写 service 方法？ 因为如果重写 service 方法的话，我们需要将强转，以及一系列的安全保护判断重新写一遍，会存在安全隐患。</p><p><strong>4.向浏览器响应</strong></p><p><img src="http://qnya.pomo16.club/227.png" alt></p><h2 id="6-Servlet-生命周期"><a href="#6-Servlet-生命周期" class="headerlink" title="6. Servlet 生命周期"></a>6. Servlet 生命周期</h2><ul><li><strong>加载和实例化</strong>：Servlet 容器负责加载和实例化 Servlet 对象。</li><li><strong>初始化</strong>：<code>void init(ServletConfig servletConfig)</code> Servlet 对象创建之后马上执行的初始化方法，只执行一次。</li><li><strong>请求处理</strong>：<code>void service(ServletRequest servletRequest, ServletResponse servletResponse)</code> 每次处理请求都是在调用这个方法，它会被调用多次</li><li><strong>销毁</strong>：<code>void destroy()</code> 在 Servlet 被销毁之前调用，负责释放 Servlet 对象占用的资源的方法</li></ul><p><strong>服务器执行流程</strong></p><ol><li>Servlet 类由自己编写，但对象由服务器来创建，并由服务器来调用相应的方法。　</li><li>服务器启动时 ( web.xml 中配置 <code>load-on-startup=1</code>，默认为0 ) 或者第一次请求该 Servlet 时，就会初始化一个 Servlet 对象，也就是会执行初始化方法 init(ServletConfig conf)。</li><li>该 Servlet 对象去处理所有客户端请求，在 <code>service(ServletRequest req，ServletResponse res)</code> 方法中执行。</li><li>最后服务器关闭时，才会销毁这个 Servlet 对象，执行 destroy() 方法。</li></ol><p><img src="http://qnya.pomo16.club/228.png" alt></p><p><strong>一些问题</strong></p><p>Servlet 何时创建？ 答：默认第一次访问 Servlet 时创建该对象(调用 init() 方法)</p><p>Servlet何时销毁？答：服务器关闭 Servlet 就销毁了(调用 destroy() 方法)</p><p>每次访问必须执行的方法是什么？答：public void service(ServletRequest arg0, ServletResponse arg1)</p><h2 id="7-Tomcat-装载-Servlet-的三种情况"><a href="#7-Tomcat-装载-Servlet-的三种情况" class="headerlink" title="7. Tomcat 装载 Servlet 的三种情况"></a>7. Tomcat 装载 Servlet 的三种情况</h2><ul><li><p>Servlet 容器启动时自动装载某些 Servlet，实现它只需要在 web.xml 文件中的 <code>&lt;servlet&gt;&lt;/servlet&gt;</code> 之间添加以下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，数字越小表示优先级越高。启动和关闭 Tomcat：优先级高的先启动也先关闭。</p></li><li><p>客户端首次向某个 Servlet 发送请求。</p></li><li><p>Servlet 类被修改后，Tomcat 容器会重新装载 Servlet。</p></li></ul><h2 id="8-forward-和-redirect"><a href="#8-forward-和-redirect" class="headerlink" title="8. forward 和 redirect"></a>8. forward 和 redirect</h2><p>Servlet 中主要有两种实现跳转的方式：forward 与 redirect 方式。</p><p>forward 是服务器内部的重定向，服务器直接访问目标地址的 URL，把那个 URL 的响应内容读取过来，而客户端并不知道，因此在客户端浏览器的地址栏中不会显示转向后的地址，还是原来的地址。由于在整个定向的过程中用的是同一个 Request，因此 forward 会将 Request 的信息带到被定向的 JSP 或 Servlet 中使用。</p><p>redirect 则是客户端的重定向，是完全的跳转，即客户端浏览器会获取到跳转后的地址，然后重新发送请求，因此浏览器中会显示跳转后的地址。同事，由于这种方式比 forward 方式多了一次网络请求，因此其效率要低于 forward 方式。需要注意的是，客户端的重定向可以通过设置特定的 HTTP 头或改写 JavaScript 脚本实现。</p><p><img src="http://qnya.pomo16.club/229.png" alt></p><p>鉴于以上的区别，一般当 forward 方式可以满足需求时，尽可能地使用 forward 方式。但在有些情况下，例如，需要跳转到下一个其他服务器上的资源，则必须使用 redirect 方式。</p><p><strong>引申：filter的作用是什么？主要实现什么方法？</strong></p><p>filter 使用户可以改变一个 request 并且修改一个 response。filter 不是一个 Servlet，它不能产生一个 response，但它能够在一个 request 到达 Servlet 之前预处理 request，也可以在离开 Servlet 时处理 response。filter 其实是一个 “Servlet Chaining” (Servler 链)。</p><p>一个 filter 的作用包括以下几个方面：</p><ol><li>在 Servlet 被调用之前截获</li><li>在 Servlet 被调用之前检查 Servlet Request</li><li>根据需要修改 Request 头和 Request 数据</li><li>根据需要修改 Response 头和 Response 数据</li><li>在 Servlet 被调用之后截获</li></ol><h2 id="9-Jsp-和-Servlet-的区别"><a href="#9-Jsp-和-Servlet-的区别" class="headerlink" title="9. Jsp 和 Servlet 的区别"></a>9. Jsp 和 Servlet 的区别</h2><p><strong>不同之处在哪？</strong></p><ul><li>Servlet 在 Java 代码中通过 HttpServletResponse 对象动态输出 HTML 内容</li><li>JSP 在静态 HTML 内容中嵌入 Java 代码，Java 代码被动态执行后生成 HTML 内容</li></ul><p><strong>各自的特点</strong></p><ul><li>Servlet 能够很好地组织业务逻辑代码，但是在 Java 源文件中通过字符串拼接的方式生成动态 HTML 内容会导致代码维护困难、可读性差</li><li>JSP 虽然规避了 Servlet 在生成 HTML 内容方面的劣势，但是在 HTML 中混入大量、复杂的业务逻辑同样也是不可取的</li></ul><p><strong>通过 MVC 双剑合璧</strong></p><p>既然 JSP 和 Servlet 都有自身的适用环境，那么能否扬长避短，让它们发挥各自的优势呢？答案是肯定的——MVC(Model-View-Controller)模式非常适合解决这一问题。</p><p>MVC模式（Model-View-Controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）：</p><ul><li>Controller——负责转发请求，对请求进行处理</li><li>View——负责界面显示</li><li>Model——业务功能编写（例如算法实现）、数据库设计以及数据存取操作实现</li></ul><p>在 JSP/Servlet 开发的软件系统中，这三个部分的描述如下所示：</p><p><img src="http://qnya.pomo16.club/230.png" alt></p><ol><li>Web 浏览器发送 HTTP 请求到服务端，被 Controller(Servlet) 获取并进行处理（例如参数解析、请求转发）</li><li>Controller(Servlet) 调用核心业务逻辑——Model部分，获得结果</li><li>Controller(Servlet) 将逻辑处理结果交给 View（JSP），动态输出 HTML 内容</li><li>动态生成的 HTML 内容返回到浏览器显示</li></ol><p>MVC 模式在 Web 开发中的好处是非常明显，它规避了 JSP 与 Servlet 各自的短板，Servlet 只负责业务逻辑而不会通过 out.append() 动态生成 HTML 代码；JSP 中也不会充斥着大量的业务代码。这大大提高了代码的可读性和可维护性。</p><h2 id="10-Tomcat-和-Servlet-的联系"><a href="#10-Tomcat-和-Servlet-的联系" class="headerlink" title="10. Tomcat 和 Servlet 的联系"></a>10. Tomcat 和 Servlet 的联系</h2><p>Tomcat 是 Web 应用服务器，是一个 Servlet/JSP 容器。Tomcat 作为 Servlet 容器，负责处理客户请求，把请求传送给 Servlet，并将 Servlet 的响应传送回给客户。而 Servlet 是一种运行在支持 Java 语言的服务器上的组件。Servlet 最常见的用途是扩展 Java Web 服务器功能，提供非常安全的，可移植的，易于使用的 CGI 替代品。</p><p><img src="http://qnya.pomo16.club/231.png" alt></p><p>① Tomcat 将 HTTP 请求文本接收并解析，然后封装成 HttpServletRequest 类型的 request 对象，所有的 HTTP 头数据读可以通过 request 对象调用对应的方法查询到。</p><p>② Tomcat 同时会要响应的信息封装为 HttpServletResponse 类型的 response 对象，通过设置 response 属性就可以控制要输出到浏览器的内容，然后将 response 交给 tomcat，Tomcat 就会将其变成响应文本的格式发送给浏览器。</p><p>Java Servlet API 是 Servlet 容器(tomcat) 和 servlet 之间的接口，它定义了 serlvet 的各种方法，还定义了 Servlet 容器传送给 Servlet 的对象类，其中最重要的就是 ServletRequest 和 ServletResponse。所以说我们在编写 servlet 时，需要实现 Servlet 接口，按照其规范进行操作。</p><h2 id="11-cookie-和-session"><a href="#11-cookie-和-session" class="headerlink" title="11. cookie 和 session"></a>11. cookie 和 session</h2><h4 id="什么是-cookie？"><a href="#什么是-cookie？" class="headerlink" title="什么是 cookie？"></a>什么是 cookie？</h4><p>Cookie 是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现 Session 的一种方式。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。</p><h4 id="什么是-session？"><a href="#什么是-session？" class="headerlink" title="什么是 session？"></a>什么是 session？</h4><p>Session 代表着服务器和客户端一次会话的过程。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当客户端关闭会话，或者 Session 超时失效时会话结束。</p><h4 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h4><table><thead><tr><th>区别</th><th>cookie</th><th>session</th></tr></thead><tbody><tr><td>作用范围</td><td>保存在客户端(浏览器)</td><td>保存在服务器端</td></tr><tr><td>存取方式</td><td>只能保存 ASCII</td><td>可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等</td></tr><tr><td>有效期</td><td>可设置为长时间保持，比如我们经常使用的默认登录功能</td><td>一般失效时间较短，客户端关闭或者 Session 超时都会失效</td></tr><tr><td>隐私策略</td><td>存储在客户端，比较容易遭到不法获取</td><td>存储在服务端，安全性相对 Cookie 要好一些</td></tr><tr><td>存储大小</td><td>单个 Cookie 保存的数据不能超过 4K</td><td>可存储数据远高于 Cookie</td></tr></tbody></table><h4 id="为什么需要-cookie-和-session，他们有什么关联？"><a href="#为什么需要-cookie-和-session，他们有什么关联？" class="headerlink" title="为什么需要 cookie 和 session，他们有什么关联？"></a>为什么需要 cookie 和 session，他们有什么关联？</h4><p>说起来为什么需要 Cookie ，这就需要从浏览器开始说起，我们都知道浏览器是没有状态的(HTTP 协议无状态)，这意味着浏览器并不知道是张三还是李四在和服务端打交道。这个时候就需要有一个机制来告诉服务端，本次操作用户是否登录，是哪个用户在执行的操作，那这套机制的实现就需要 Cookie 和 Session 的配合。</p><p><img src="http://qnya.pomo16.club/232.png" alt></p><p>既然服务端是根据 Cookie 中的信息判断用户是否登录，那么如果浏览器中禁止了 Cookie，如何保障整个机制的正常运转。</p><p>第一种方案，每次请求中都携带一个 SessionID 的参数，也可以 Post 的方式提交，也可以在请求的地址后面拼接 <code>xxx?SessionID=123456...</code>。</p><p>第二种方案，Token 机制。Token 机制多用于 App 客户端和服务器交互的模式，也可以用于 Web 端做用户状态管理。</p><p>Token 的意思是“令牌”，是服务端生成的一串字符串，作为客户端进行请求的一个标识。Token 机制和 Cookie 和 Session 的使用机制比较类似。</p><p>当用户第一次登录后，服务器根据提交的用户信息生成一个 Token，响应时将 Token 返回给客户端，以后客户端只需带上这个 Token 前来请求数据即可，无需再次登录验证。</p><h4 id="如何考虑分布式-Session-问题？"><a href="#如何考虑分布式-Session-问题？" class="headerlink" title="如何考虑分布式 Session 问题？"></a>如何考虑分布式 Session 问题？</h4><p>在互联网公司为了可以支撑更大的流量，后端往往需要多台服务器共同来支撑前端用户请求，那如果用户在 A 服务器登录了，第二次请求跑到服务 B 就会出现登录失效问题。</p><p>分布式 Session 一般会有以下几种解决方案：</p><ul><li>Nginx ip_hash 策略，服务端使用 Nginx 代理，每个请求按访问 IP 的 hash 分配，这样来自同一 IP 固定访问一个后台服务器，避免了在服务器 A 创建 Session，第二次分发到服务器 B 的现象。</li><li>Session 复制，任何一个服务器上的 Session 发生改变（增删改），该节点会把这个 Session 的所有内容序列化，然后广播给所有其它节点。</li><li>共享 Session，服务端无状态话，将用户的 Session 等信息使用缓存中间件来统一管理，保障分发到每一个服务器的响应结果都一致。</li></ul><h2 id="12-JavaEE-中的三层结构和-MVC"><a href="#12-JavaEE-中的三层结构和-MVC" class="headerlink" title="12. JavaEE 中的三层结构和 MVC"></a>12. JavaEE 中的三层结构和 MVC</h2><p>做企业应用开发时，经常采用三层架构分层：表示层、业务层、持久层。</p><p>表示层：负责接收用户请求、转发请求、显示数据等。</p><p>业务层：负责组织业务逻辑。</p><p>持久层：负责持久化业务对象。</p><p>这三个分层，每一层都有不同的模式，就是架构模式。<strong>表示层</strong>最常用的架构模式就是 MVC。</p><p>MVC 是<strong>客户端</strong>的一种设计模式，所以他天然就不考虑数据如何存储的问题。作为客户端，只需要解决用户界面、交互和业务逻辑就好了。在 MVC 模式中，View 负责的是用户界面，Controller 负责交互，Model 负责业务逻辑。至于数据如何存储和读取，当然是由 Model 调用服务端的接口来完成。</p><p>在三层架构中，并没有客户端/服务端的概念，所以表示层、业务层的任务其实和 MVC 没什么区别，而持久层在 MVC 里面是没有的。</p><p><strong>总结：MVC = 表示层 + 业务层，但不包括持久层。</strong></p><h2 id="13-RESTful-架构"><a href="#13-RESTful-架构" class="headerlink" title="13. RESTful 架构"></a>13. RESTful 架构</h2><h4 id="什么是REST？"><a href="#什么是REST？" class="headerlink" title="什么是REST？"></a>什么是REST？</h4><p>REST 是所有 Web 应用都应该遵守的架构设计指导原则。 面向资源是 REST 最明显的特征，对于同一个资源的一组不同的操作。对于每个资源只能执行一组有限的操作。（7个HTTP方法：GET/POST/PUT/DELETE/PATCH/HEAD/OPTIONS）</p><h4 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h4><table><thead><tr><th>HTTP方法</th><th>功能</th></tr></thead><tbody><tr><td>GET</td><td>select，从服务器取出资源（一项或多项）。</td></tr><tr><td>POST</td><td>create，在服务器新建一个资源。</td></tr><tr><td>PUT</td><td>update，在服务器更新资源（客户端提供改变后的完整资源）。</td></tr><tr><td>DELETE</td><td>delete，从服务器删除资源。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jsp </category>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jsp </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秒杀系统服务器优化思路</title>
      <link href="/2019/06/01/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%98%E5%8C%96%E6%80%9D%E8%B7%AF/"/>
      <url>/2019/06/01/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%98%E5%8C%96%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Tomcat-优化-Tomcat8"><a href="#一、Tomcat-优化-Tomcat8" class="headerlink" title="一、Tomcat 优化(Tomcat8)"></a>一、Tomcat 优化(Tomcat8)</h2><h4 id="内存优化-catalina-sh"><a href="#内存优化-catalina-sh" class="headerlink" title="内存优化 catalina.sh"></a>内存优化 catalina.sh</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=<span class="string">"-server -Xms2048M -Xmx2048M  -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction=5  -XX:+PrintGCDetails -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=<span class="variable">$CATALINA_HOME</span>/logs/heap.dump"</span></span><br></pre></td></tr></table></figure><h4 id="并发优化"><a href="#并发优化" class="headerlink" title="并发优化"></a>并发优化</h4><p>参考 ${tomcat}/webapps/docs/config/http.html</p><table><thead><tr><th>主要参数</th><th>作用</th></tr></thead><tbody><tr><td>maxConnections</td><td>最大连接数，The maximum number of connections that the server will accept and process at any given time.</td></tr><tr><td>acceptCount</td><td>最大接收数，The maximum queue length for incoming connection requests when all possible request processing threads are in use.</td></tr><tr><td>maxThreads</td><td>工作线程，The maximum number of request processing threads to be created by this Connector.</td></tr><tr><td>minSpareThreads</td><td>最小空闲的工作线程（初始化线程数），The minimum number of threads always kept running.</td></tr></tbody></table><h4 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h4><ol><li><p>参考 ${tomcat}/webapps/docs/config/host.html</p><p>autoDeploy：This flag value indicates if Tomcat should check periodically for new or updated web applications while Tomcat is running.</p></li><li><p>参考 ${tomcat}/webapps/docs/config/http.html</p><p>enableLookups：false</p></li><li><p>参考 ${tomcat}/webapps/docs/config/context.html</p><p>reloadable：false</p></li><li><p>connector：apr优化</p><p>详见 <a href="http://apr.apache.org/" target="_blank" rel="noopener">http://apr.apache.org/</a>，这是一种全新的网络调度模型，打破了传统的 BIO 和 NIO限制。</p><p>注意：开启了 apr 之后，JVM 用到的 native 内存会增大，因此要适当调大 Metaspace 空间，添加 JVM 选项：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:MetaspaceSize=128m</span><br><span class="line">JAVA_OPTS=<span class="string">"-server -Xms2048M -Xmx2048M -XX:MetaspaceSize=128M -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=<span class="variable">$CATALINA_HOME</span>/logs/heap.dump"</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="二、nginx-优化"><a href="#二、nginx-优化" class="headerlink" title="二、nginx 优化"></a>二、nginx 优化</h2><p>文档地址：<a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">http://nginx.org/en/docs/</a></p><h4 id="工作线程数和并发连接数"><a href="#工作线程数和并发连接数" class="headerlink" title="工作线程数和并发连接数"></a>工作线程数和并发连接数</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker_rlimit_nofile 20480; <span class="comment">#每个进程打开的最大的文件数=worker_connections*2是安全的，受限于操作系统(/etc/security/limits.conf)</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/security/limits.conf</span><br><span class="line">* hard nofile 204800</span><br><span class="line">* soft nofile 204800</span><br><span class="line">* soft core unlimited</span><br><span class="line">* soft stack 204800</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 4; <span class="comment">#cpu,如果nginx单独在一台机器上，一般为核数的1~2倍</span></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 10240; <span class="comment">#每一个进程打开的最大连接数，包含了nginx与客户端和upstream之间的连接</span></span><br><span class="line">    multi_accept on; <span class="comment">#可以一次建立多个连接</span></span><br><span class="line">    use epoll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="操作系统优化"><a href="#操作系统优化" class="headerlink" title="操作系统优化"></a>操作系统优化</h4><p>配置文件 <code>/etc/sysctl.conf</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w net.ipv4.tcp_syncookies=1; <span class="comment">#防止一个套接字在有过多试图连接到达时引起过载</span></span><br><span class="line">sysctl-w net.core.somaxconn=1024; <span class="comment">#默认128，连接队列</span></span><br><span class="line">sysctl-w net.ipv4.tcp_fin_timeout=10; <span class="comment">#timewait的超时时间</span></span><br><span class="line">sysctl -w net.ipv4.tcp_tw_reuse=1; <span class="comment">#os直接使用timewait的连接</span></span><br><span class="line">sysctl -w net.ipv4.tcp_tw_recycle=0; <span class="comment">#回收禁用</span></span><br></pre></td></tr></table></figure><h4 id="Keepalive-长连接"><a href="#Keepalive-长连接" class="headerlink" title="Keepalive 长连接"></a>Keepalive 长连接</h4><p>nginx 与 upstream server：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream server_pool&#123;</span><br><span class="line">        server localhost:8080 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">        keepalive 300;  <span class="comment">#300个长连接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时要在 location 中设置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location /  &#123;</span><br><span class="line">proxy_http_version 1.1;</span><br><span class="line">proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">proxy_set_header Connection <span class="string">"upgrade"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端与 nginx(默认是打开的)：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keepalive_timeout 60s; <span class="comment">#长连接的超时时间</span></span><br><span class="line">keepalive_requests 100; <span class="comment">#100个请求之后就关闭连接，可以调大</span></span><br><span class="line">keepalive_disable msie6; <span class="comment">#ie6禁用</span></span><br></pre></td></tr></table></figure><h4 id="启用压缩"><a href="#启用压缩" class="headerlink" title="启用压缩"></a>启用压缩</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gzip on;</span><br><span class="line">gzip_http_version 1.1;</span><br><span class="line">gzip_disable <span class="string">"MSIE [1-6]\.(?!.*SV1)"</span>;</span><br><span class="line">gzip_proxied any;</span><br><span class="line">gzip_types text/plain text/css application/javascript application/x-javascript application/json application/xml application/vnd.ms-fontobject application/x-font-ttf application/svg+xml application/x-icon;</span><br><span class="line">gzip_vary on; <span class="comment">#Vary: Accept-Encoding</span></span><br><span class="line">gzip_static on; <span class="comment">#如果有压缩好的，直接使用</span></span><br></pre></td></tr></table></figure><h4 id="状态监控"><a href="#状态监控" class="headerlink" title="状态监控"></a>状态监控</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location = /nginx_status &#123;</span><br><span class="line">stub_status on;</span><br><span class="line">access_log off;</span><br><span class="line">allow &lt;YOURIPADDRESS&gt;;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Active connections: 1 </span><br><span class="line">server accepts handled requests</span><br><span class="line"> 17122 17122 34873 </span><br><span class="line">Reading: 0 Writing: 1 Waiting: 0</span><br></pre></td></tr></table></figure><p>Active connections: 当前实时的并发连接数<br>accepts: 收到的总连接数<br>handled: 处理的总连接数<br>requests: 处理的总请求数<br>Reading: 当前有多少个读，读取客户端的请求<br>Writing: 当前有多少个写，向客户端输出<br>Waiting: 当前有多少个长连接 (reading + writing)<br>reading – nginx reads request header<br>writing – nginx reads request body, processes request, or writes response to a client<br>waiting – keep-alive connections, actually it is active - (reading + writing)</p><h4 id="实时请求信息统计-ngxtop"><a href="#实时请求信息统计-ngxtop" class="headerlink" title="实时请求信息统计 ngxtop"></a>实时请求信息统计 ngxtop</h4><p><a href="https://github.com/lebinh/ngxtop" target="_blank" rel="noopener">https://github.com/lebinh/ngxtop</a></p><ol><li><p>安装 python-pip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install python-pip</span><br></pre></td></tr></table></figure></li><li><p>安装 ngxtop</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ngxtop</span><br></pre></td></tr></table></figure></li><li><p>使用</p><p>指定配置文件：<code>ngxtop -c ./conf/nginx.conf</code></p><p>查询状态是200：<code>ngxtop -c ./conf/nginx.conf  --filter &#39;status == 200&#39;</code></p><p>查询哪个 ip 访问最多：<code>ngxtop -c ./conf/nginx.conf  --group-by remote_addr</code></p></li></ol><h2 id="三、LVS-四层负载均衡"><a href="#三、LVS-四层负载均衡" class="headerlink" title="三、LVS 四层负载均衡"></a>三、LVS 四层负载均衡</h2><h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h4><p>LVS：linux virtual server</p><p>相关文章：</p><p><a href="http://www.linuxvirtualserver.org/" target="_blank" rel="noopener">http://www.linuxvirtualserver.org/</a><br><a href="http://zh.linuxvirtualserver.org/" target="_blank" rel="noopener">http://zh.linuxvirtualserver.org/</a></p><p><a href="http://www.austintek.com/LVS/LVS-HOWTO/HOWTO/" target="_blank" rel="noopener">http://www.austintek.com/LVS/LVS-HOWTO/HOWTO/</a><br><a href="http://www.linuxvirtualserver.org/whatis.html" target="_blank" rel="noopener">http://www.linuxvirtualserver.org/whatis.html</a></p><p><img src="http://qnya.pomo16.club/219.png" style="height:400px;"></p><h4 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h4><ol><li>VS/NAT：修改报文头信息</li><li>VS/TUNE：IP隧道</li><li>VS/DR：必须得在同一个网段(一般用这个)</li></ol><h4 id="八种调度算法"><a href="#八种调度算法" class="headerlink" title="八种调度算法"></a>八种调度算法</h4><p>轮询，加权轮询，最小连接，加权最小连接，局部最小连接，带复制的局部最小连接，目标地址散列，原地址散列</p><h2 id="四、Keepalived-高可用"><a href="#四、Keepalived-高可用" class="headerlink" title="四、Keepalived 高可用"></a>四、Keepalived 高可用</h2><p><a href="http://www.keepalived.org/" target="_blank" rel="noopener">http://www.keepalived.org/</a></p><p>Keepalived 双机热备</p><p><img src="http://qnya.pomo16.club/220.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> projects </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BIO,NIO和AIO</title>
      <link href="/2019/05/20/BIO-NIO%E5%92%8CAIO/"/>
      <url>/2019/05/20/BIO-NIO%E5%92%8CAIO/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Java 中，有三种 IO 模型: BIO, NIO, AIO。介绍这三种 IO 模型之前，需要介绍一下同步，异步与阻塞，非阻塞的概念，然后再从 Java 和 Linux OS 的角度去分析 BIO, NIO 和 AIO。</p><h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>同步就是发起一个调用后，<strong>被调用者</strong>未处理完请求之前，调用不返回。</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>异步就是发起一个调用后，立刻得到<strong>被调用者</strong>的回应表示已接收到请求，但是被调用者并没有返回结果，此时我们可以处理其他的请求，被调用者通常<strong>依靠事件，回调</strong>等机制来通知调用者其返回结果。</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>同步与异步最大的区别就是<strong>被调用方</strong>的<strong>执行方式</strong>和<strong>返回时机</strong>，同步指的是<strong>被调用方</strong>做完事情之后再返回，异步指的是<strong>被调用方</strong>先返回，然后再做事情，做完之后再想办法通知调用方。</p><h2 id="阻塞和非阻塞"><a href="#阻塞和非阻塞" class="headerlink" title="阻塞和非阻塞"></a>阻塞和非阻塞</h2><h4 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h4><p>阻塞就是发起一个请求，<strong>调用者</strong>一直等待请求结果返回，也就是当前线程会被挂起，无法从事其他任务，只有当条件就绪才能继续。</p><h4 id="非阻塞"><a href="#非阻塞" class="headerlink" title="非阻塞"></a>非阻塞</h4><p>非阻塞就是发起一个请求，<strong>调用者</strong>不用一直等着结果返回，可以先去干其他事情。</p><h2 id="同步、异步和阻塞、非阻塞的区别"><a href="#同步、异步和阻塞、非阻塞的区别" class="headerlink" title="同步、异步和阻塞、非阻塞的区别"></a>同步、异步和阻塞、非阻塞的区别</h2><p>阻塞和同步不是一回事，同步，异步与阻塞，非阻塞针对的对象是不一样的，<strong>阻塞,非阻塞是说的调用者，同步，异步说的是被调用者</strong>。</p><h2 id="BIO、NIO、AIO概览"><a href="#BIO、NIO、AIO概览" class="headerlink" title="BIO、NIO、AIO概览"></a>BIO、NIO、AIO概览</h2><ul><li><strong>BIO(Blocking I/O)</strong>：BIO 也就是传统的同步阻塞 IO 模型，对应 Java.io 包，它提供了很多 IO 功能，比如输入输出流，对文件进行操作。在网络编程( Socket 通信)中也同样进行 IO 操作。</li><li><strong>NIO(New I/O)</strong>: NIO 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入了 NIO 框架，对应 java.nio 包，提供了 Channel , Selector，Buffer 等抽象。</li><li><strong>AIO</strong>: AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的 IO 模型。</li></ul><h2 id="Linux的5种-I-O模型"><a href="#Linux的5种-I-O模型" class="headerlink" title="Linux的5种 I/O模型"></a>Linux的5种 I/O模型</h2><p>上面简单介绍了 Java 中的三种 IO 模型，三种模型提供的与 IO 有关的 API，在文件处理时，底层实际上是依赖操作系统层面的 IO 操作实现的，比如在 Linux 2.6 以后，Java 中的 NIO 和 AIO 都是通过 epoll 来实现的，关于 epoll 等概念后面也会阐述。</p><p>而实际上在 Linux(Unix) 操作系统中，共有五种 IO 模型，分别是：<strong>阻塞 IO 模型</strong>、<strong>非阻塞 IO 模型</strong>、<strong>IO 复用模型</strong>、<strong>信号驱动 IO 模型</strong>以及<strong>异步 IO 模型</strong>，而4种都是同步的，只有最后一种是异步的。</p><h4 id="阻塞IO模型-BIO"><a href="#阻塞IO模型-BIO" class="headerlink" title="阻塞IO模型 - BIO"></a>阻塞IO模型 - BIO</h4><p><img src="http://qnya.pomo16.club/213.png" alt></p><p>一个输入操作通常包括两个不同的阶段：</p><ul><li>等待数据准备好</li><li>从内核向进程复制数据</li></ul><p>对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达，当所等待分组到达时，它被复制到内核中的某个缓冲区，第二步就是把数据从内核缓冲区复制到应用进程缓冲区。</p><p>从上图可以看出，<strong>应用进程通过系统调用 <code>recvfrom</code> 去接收数据，而由于内核数据没有准备好，应用进程就会阻塞，直到内核准备好数据并将其从内核复制到应用进程的缓冲区中或者发生错误才返回</strong>。最常见的错误就是系统调用被信号中断。进程从调用 recvfrom 开始到它返回的整段时间内是被阻塞的。</p><p>Linux下的阻塞式 I/O 模型就对应了 Java下的 BIO 模型，BIO 的底层实现是调用操作系统的 API 去执行的，也就是调用操作系统的 Socket 套接字。</p><h4 id="非阻塞式I-O模型-NIO"><a href="#非阻塞式I-O模型-NIO" class="headerlink" title="非阻塞式I/O模型 - NIO"></a>非阻塞式I/O模型 - NIO</h4><p><img src="http://qnya.pomo16.club/214.png" alt></p><p>应用进程通过系统调用 <code>recvfrom</code> 不断的去和内核交互，直到内核数据报准备好，而如果内核无数据准备好，转而立即返回一个 <code>EWOULDBLOCK</code> 的错误，过一段时间再次发送 <code>recvfrom</code> 请求，在此期间进程可以做其他事情，不用一直等待，这就是非阻塞。</p><p>当一个应用进程循环调用 <code>recvfrom</code> 时，我们称之为<strong>轮询(polling)</strong>，应用进程持续轮询内核，以查看某个操作是否就绪。Java 的 NIO 映射到 Linux 操作系统就是如上图所示的非阻塞 I/O  模型。</p><h4 id="I-O复用模型"><a href="#I-O复用模型" class="headerlink" title="I/O复用模型"></a>I/O复用模型</h4><p><img src="http://qnya.pomo16.club/215.png" alt></p><p>IO 多路复用使用 <code>select/poll/epoll</code> 函数，多个进程的 IO 都可以注册在同一个  <code>select</code> 上，当用户进程调用该 <code>select</code> 时，<code>select</code> 去监听所有注册好的 IO,<strong>如果所有被监听的 IO 需要的数据都没有准备好，那么 select 调用进程会被阻塞</strong>，只要任意一个 IO 的数据报套接字变为可读，即数据报已经准备好，<code>select</code> 就返回套接字可读这一条件，然后调用 <code>recvfrom</code> 把所读数据报复制到应用进程缓冲区。</p><p><strong>强调一点就是，IO 多路复用模型并没有涉及到非阻塞</strong>，进程在发出 <code>select</code> 后，要一直阻塞等待其监听的所有 IO 操作至少有一个数据准备好才返回，强调阻塞状态，不存在非阻塞。</p><p>而在 Java NIO 中也可以实现多路复用，主要是利用多路复用器 <strong>Selector</strong>，与这里的 <code>select</code>函数类型，<strong>Selector</strong> 会不断轮询注册在其上的通道 Channel，如果有某一个 Channel 上面发生读或写事件，这个 Channel 处于就绪状态，就会被 Selector 轮询出来。关于 Java NIO 实现多路复用更多的介绍请查询相关文章。</p><p><strong>I/O 多路复用的主要应用场景</strong></p><ul><li>服务器需要同时处理多个处于监听状态或者多个连接状态的套接字</li><li>服务器需要同时处理多种网络协议的套接字</li></ul><p><strong>I/O多路复用的系统调用函数</strong></p><p>目前支持 I/O 多路复用的系统调用函数有 <code>select，pselect，poll，epoll</code>。在 Linux 网络编程中，很长一段时间都使用 <code>select</code> 做轮询和网络事件通知。然而因为 <code>select</code> 的一些固有缺陷导致它的应用受到了很大的限制，比如 <code>select</code> 单个进程打开的最大句柄数是有限的。最终在 Linux 2.6 选择 <code>epoll</code> 替代了 <code>select</code>，Java NIO 和 AIO 底层就是用 <code>epoll</code>。</p><h4 id="信号驱动式I-O模型"><a href="#信号驱动式I-O模型" class="headerlink" title="信号驱动式I/O模型"></a>信号驱动式I/O模型</h4><p><img src="http://qnya.pomo16.club/216.png" alt></p><p>应用进程预先向内核安装一个信号处理函数，然后立即返回，进程继续工作，不阻塞，当数据报准备好读取时，内核就为该进程产生一个信号通知进程，然后进程再调用 <code>recvfrom</code> 读取数据报。</p><p><strong>信号驱动式IO不是异步的</strong></p><p>信号驱动式 IO 在数据准备阶段是异步的，当内核中有数据报准备后再通知进程，但是在调用  <strong>recvfrom</strong> 操作进行数据拷贝时是同步的，所以总体来说，整个 IO 过程不能是异步的。</p><h4 id="异步I-O模型-AIO"><a href="#异步I-O模型-AIO" class="headerlink" title="异步I/O模型 - AIO"></a>异步I/O模型 - AIO</h4><p><img src="http://qnya.pomo16.club/217.png" alt></p><p>应用进程调用 <code>aio_read</code> 函数，给内核传递描述符，缓存区指针，缓存区大小和文件偏移，并告诉内核当整个操作完成时如何通知进程，然后该系统调用立即返回，而且在等待 I/O 完成期间，我们的进程不被阻塞，进程可以去干其他事情，然后内核开始等待数据准备，数据准备好以后再拷贝数据到进程缓冲区，最后通知整个 IO 操作已完成。</p><p>Java 的 AIO 提供了异步通道 API，其操作系统底层实现就是这个异步 I/O 模型。</p><p><strong>与信号驱动式I/O的区别</strong></p><p>主要区别在于: 信号驱动式 I/O 是由内核通知我们何时去启动一个 I/O 操作，而异步 I/O 模型是由内核通知我们 I/O 操作何时完成。</p><h4 id="5种I-O模型的比较"><a href="#5种I-O模型的比较" class="headerlink" title="5种I/O模型的比较"></a>5种I/O模型的比较</h4><p><img src="http://qnya.pomo16.club/218.png" alt></p><p>由上图可以再次看出，IO操作主要分为两个阶段:</p><ul><li>等待数据报准备阶段</li><li>数据拷贝阶段</li></ul><p><strong>前4种 IO 模型都是同步 IO 模型，为什么说都是同步的，因为它们在第二步数据拷贝阶段都是阻塞的，这会导致整个请求进程存在阻塞的情况，所以是同步的，而异步 IO 模型不会导致请求进程阻塞。</strong></p><h2 id="I-O复用的实现"><a href="#I-O复用的实现" class="headerlink" title="I/O复用的实现"></a>I/O复用的实现</h2><p>select/poll/epoll 都是 I/O 多路复用的具体实现，select 出现的最早，之后是 poll，再是 epoll。</p><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>有三种类型的描述符类型：readset、writeset、exceptset，分别对应读、写、异常条件的描述符集合。fd_set 使用数组实现，数组大小使用 FD_SETSIZE 定义。</p><p>timeout 为超时参数，调用 select 会一直阻塞直到有描述符的事件到达或者等待的时间超过 timeout。</p><p>成功调用返回结果大于 0，出错返回结果为 -1，超时返回结果为 0。</p><h4 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h4><p>pollfd 使用链表实现。</p><h4 id="select-和-poll-比较"><a href="#select-和-poll-比较" class="headerlink" title="select 和 poll 比较"></a>select 和 poll 比较</h4><ol><li><p>功能</p><p>select 和 poll 的功能基本相同，不过在一些实现细节上有所不同。</p><ul><li>select 会修改描述符，而 poll 不会；</li><li>select 的描述符类型使用数组实现，FD_SETSIZE 大小默认为 1024，因此默认只能监听 1024 个描述符。如果要监听更多描述符的话，需要修改 FD_SETSIZE 之后重新编译；而 poll 的描述符类型使用链表实现，没有描述符数量的限制；</li><li>poll 提供了更多的事件类型，并且对描述符的重复利用上比 select 高。</li><li>如果一个线程对某个描述符调用了 select 或者 poll，另一个线程关闭了该描述符，会导致调用结果不确定。</li></ul></li><li><p>速度</p><p>select 和 poll 速度都比较慢。</p><ul><li>select 和 poll 每次调用都需要将全部描述符从应用进程缓冲区复制到内核缓冲区。</li><li>select 和 poll 的返回结果中没有声明哪些描述符已经准备好，所以如果返回值大于 0 时，应用进程都需要使用轮询的方式来找到 I/O 完成的描述符。</li></ul></li><li><p>可移植性</p><p>几乎所有的系统都支持 select，但是只有比较新的系统支持 poll。</p></li></ol><h4 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h4><p>epoll_ctl() 用于向内核注册新的描述符或者是改变某个文件描述符的状态。已注册的描述符在内核中会被维护在一棵红黑树上，通过回调函数内核会将 I/O 准备好的描述符加入到一个链表中管理，进程调用 epoll_wait() 便可以得到事件完成的描述符。</p><p>从上面的描述可以看出，epoll 只需要将描述符从进程缓冲区向内核缓冲区拷贝一次，并且进程不需要通过轮询来获得事件完成的描述符。</p><p>epoll 仅适用于 Linux OS。</p><p>epoll 比 select 和 poll 更加灵活而且没有描述符数量限制。</p><p>epoll 对多线程编程更有友好，一个线程调用了 epoll_wait() 另一个线程关闭了同一个描述符也不会产生像 select 和 poll 的不确定情况。</p><h4 id="epoll工作模式"><a href="#epoll工作模式" class="headerlink" title="epoll工作模式"></a>epoll工作模式</h4><p>epoll 的描述符事件有两种触发模式：LT（level trigger）和 ET（edge trigger）。</p><ol><li><p>LT 模式</p><p>当 epoll_wait() 检测到描述符事件到达时，将此事件通知进程，进程可以不立即处理该事件，下次调用 epoll_wait() 会再次通知进程。是默认的一种模式，并且同时支持 Blocking 和 No-Blocking。</p></li><li><p>ET 模式</p><p>和 LT 模式不同的是，通知之后进程必须立即处理事件，下次再调用 epoll_wait() 时不会再得到事件到达的通知。</p><p>很大程度上减少了 epoll 事件被重复触发的次数，因此效率要比 LT 模式高。只支持 No-Blocking，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</p></li></ol><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>很容易产生一种错觉认为只要用 epoll 就可以了，select 和 poll 都已经过时了，其实它们都有各自的使用场景。</p><ol><li><p>select 应用场景</p><p>select 的 timeout 参数精度为 1ns，而 poll 和 epoll 为 1ms，因此 select 更加适用于实时性要求比较高的场景，比如核反应堆的控制。</p><p>select 可移植性更好，几乎被所有主流平台所支持。</p></li><li><p>poll 应用场景</p><p>poll 没有最大描述符数量的限制，如果平台支持并且对实时性要求不高，应该使用 poll 而不是 select。</p></li><li><p>epoll 应用场景</p><p>只需要运行在 Linux 平台上，有大量的描述符需要同时轮询，并且这些连接最好是长连接。</p><p>需要同时监控小于 1000 个描述符，就没有必要使用 epoll，因为这个应用场景下并不能体现 epoll 的优势。</p><p>需要监控的描述符状态变化多，而且都是非常短暂的，也没有必要使用 epoll。因为 epoll 中的所有描述符都存储在内核中，造成每次需要对描述符的状态改变都需要通 epoll_ctl() 进行系统调用，频繁系统调用降低效率。并且 epoll 的描述符存储在内核，不容易调试。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2019/04/27/Redis/"/>
      <url>/2019/04/27/Redis/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#一、概述">一、概述</a></li><li><a href="#二、数据类型">二、数据类型</a></li><li><a href="#三、常用基本操作">三、常用基本操作</a></li><li><a href="#四、配置文件">四、配置文件</a></li><li><a href="#五、持久化">五、持久化</a></li><li><a href="#六、事务">六、事务</a></li><li><a href="#七、发布订阅">七、发布订阅</a></li><li><a href="#八、复制">八、复制</a></li><li><a href="#九、Jedis">九、Jedis</a></li></ul><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>Redis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。</p><p>键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。</p><p>Redis 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。</p><h2 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h2><table><thead><tr><th>数据类型</th><th>可以存储的值</th><th>操作</th></tr></thead><tbody><tr><td>STRING</td><td>字符串、整数或者浮点数</td><td>对整个字符串或者字符串的其中一部分执行操作 对整数和浮点数执行自增或者自减操作</td></tr><tr><td>LIST</td><td>列表</td><td>从两端压入或者弹出元素  对单个或者多个元素 进行修剪，只保留一个范围内的元素</td></tr><tr><td>SET</td><td>无序集合</td><td>添加、获取、移除单个元素 检查一个元素是否存在于集合中 计算交集、并集、差集 从集合里面随机获取元素</td></tr><tr><td>HASH</td><td>包含键值对的无序散列表</td><td>添加、获取、移除单个键值对 获取所有键值对 检查某个键是否存在</td></tr><tr><td>ZSET</td><td>有序集合</td><td>添加、获取、删除元素 根据分值范围或者成员来获取元素 计算一个键的排名</td></tr></tbody></table><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p><img src="http://qnya.pomo16.club/206.png" width="60%"></p><p>string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。</p><p>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如 jpg 图片或者序列化的对象 。</p><p>string 类型是 Redis 最基本的数据类型，一个 redis 中字符串 value 最多可以是 512M。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p><img src="http://qnya.pomo16.club/207.png" width="60%"></p><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。它的底层实际是个链表。</p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p><img src="http://qnya.pomo16.club/208.png" width="60%"></p><p>Redis 的 set 是 string 类型的无序集合。它是通过 HashTable 实现实现的。</p><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p><img src="http://qnya.pomo16.club/209.png" width="60%"></p><p>Redis hash 是一个键值对集合。</p><p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p><p>类似 Java 里面的 Map&lt;String,Object&gt;。</p><h3 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h3><p><img src="http://qnya.pomo16.club/210.png" width="60%"></p><p>sorted set：有序集合。</p><p>Redis zset 和 set 一样也是 string 类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个 double 类型的分数。</p><p>redis 正是通过分数来为集合中的成员进行从小到大的排序。zset 的成员是唯一的,但分数 (score) 却可以重复。</p><h3 id="Redis常见数据结构操作命令"><a href="#Redis常见数据结构操作命令" class="headerlink" title="Redis常见数据结构操作命令"></a>Redis常见数据结构操作命令</h3><p><a href="http://redisdoc.com/" target="_blank" rel="noopener">http://redisdoc.com/</a></p><h2 id="三、常用基本操作"><a href="#三、常用基本操作" class="headerlink" title="三、常用基本操作"></a>三、常用基本操作</h2><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>keys *</td><td>查看所有 key</td></tr><tr><td>exists key的名字</td><td>判断某个 key 是否存在</td></tr><tr><td>move key db</td><td>移动 key 到 db</td></tr><tr><td>expire key 秒数</td><td>为 key 设置过期时间</td></tr><tr><td>ttl key</td><td>查看还有所少秒过期，-1表示永不过期，-2表示已过期</td></tr><tr><td>type key</td><td>查看 key 的类型</td></tr></tbody></table><h3 id="string-单值单-value"><a href="#string-单值单-value" class="headerlink" title="string (单值单 value)"></a>string (单值单 value)</h3><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>set/get/del/append/strlen</td><td>增、查、删、追加、返回长度</td></tr><tr><td>lncr/decr/incrby/decrby</td><td>加1，减1，加n，减n(数字才能加减，n路:incrby k1 n)</td></tr><tr><td>getrange/setrange</td><td>getrange: 获取指定区间范围内的值，从零到负一表示全部。<br>setrange: 设置指定区间范围内的值，格式是setrange key 开始位 值(例:setrange k1 0 xxx)</td></tr><tr><td>setex key 秒数 值</td><td>即 set with expire，设置带过期时间的 key，动态设置</td></tr><tr><td>setnx key value</td><td>即 set if not exist，只有在 key 不存在时设置 key 的值</td></tr><tr><td>mset/mget/msetnx</td><td>mset: 同时设置一个或多个 key-value 对。<br>mget: 获取所有(一个或多个)给定 key 的值。<br>msetnx: 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td></tr><tr><td>getset</td><td>即先 get 再 set，将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td></tr></tbody></table><h3 id="list-单值多-value"><a href="#list-单值多-value" class="headerlink" title="list (单值多 value)"></a>list (单值多 value)</h3><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>lpush/rpush/lrange</td><td>lpush: 从左侧按顺序添加(例: lpush list01 1 2 3 4 5)<br>rpush: 从右侧按顺序添加(例: rpush list02 1 2 3 4 5)<br>lrange: 按范围查询(lrange 列表名 0 -1 查询全部)</td></tr><tr><td>lpop/rpop</td><td>lpop: 左出；rpop: 右出(lpop/rpop 列表名)</td></tr><tr><td>lindex</td><td>通过索引获取列表中的元素 lindex key index</td></tr><tr><td>llen</td><td>返回列表 key 的长度</td></tr><tr><td>lerm key count value</td><td>删除 count 个等于 value 的 key，如果 count 为0则删除全部</td></tr><tr><td>ltrim key startindex endindex</td><td>截取指定索引区间的元素</td></tr><tr><td>rpoplpush 源列表 目的列表</td><td>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td>lset key index value</td><td>通过索引设置列表元素的值</td></tr><tr><td>linsert key before/after value1 value2</td><td>在 list 某个已有值的前后再添加具体值</td></tr></tbody></table><p><strong>性能分析</strong></p><p>它是一个字符串链表，left、right 都可以插入添加；<br>如果键不存在，创建新的链表；<br>如果键已存在，新增内容；<br>如果值全移除，对应的键也就消失了。<br>链表的操作无论是头和尾效率都极高，但假如是对中间元素进行操作，效率就很惨淡了。</p><h3 id="set-单值多-value"><a href="#set-单值多-value" class="headerlink" title="set (单值多 value)"></a>set (单值多 value)</h3><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>sadd/smembers/sismember</td><td>添加、返回集合中的所有的成员(smembers key)、判断成员元素是否是集合的成员(sismember key value)</td></tr><tr><td>scard key</td><td>返回集合中元素的数量</td></tr><tr><td>srem key value1…valueN</td><td>移除集合中的一个或多个成员元素，不存在的成员元素会被忽略。</td></tr><tr><td>srandmember key [count]</td><td>返回集合中的一个随机元素。如果 count 为正数，且小于集合基数，那么命令返回一个包含 count 个元素的数组，数组中的元素各不相同。如果 count 大于等于集合基数，那么返回整个集合。如果 count 为负数，那么命令返回一个数组，数组中的元素可能会重复出现多次，而数组的长度为 count 的绝对值。</td></tr><tr><td>spop key [count]</td><td>用于移除集合中的指定 key 的一个或多个随机元素，移除后会返回移除的元素。</td></tr><tr><td>smove key1 key2 在key1里某个值</td><td>作用是将 key1 里的某个值赋给 key2</td></tr><tr><td>sdiff FIRST_KEY OTHER_KEY1..OTHER_KEYN</td><td>返回给定集合之间的差集。差集的结果来自前面的 FIRST_KEY ,而不是后面的 OTHER_KEY1，也不是整个 FIRST_KEY OTHER_KEY1..OTHER_KEYN 的差集。</td></tr><tr><td>sunion KEY KEY1..KEYN</td><td>返回给定集合的并集。不存在的集合 key 被视为空集。</td></tr><tr><td>sinter KEY KEY1..KEYN</td><td>返回给定所有给定集合的交集。 不存在的集合 key 被视为空集。 当给定集合当中有一个空集时，结果也为空集(根据集合运算定律)。</td></tr></tbody></table><h3 id="hash-KV-模式不变，但-V-是一个键值对"><a href="#hash-KV-模式不变，但-V-是一个键值对" class="headerlink" title="hash (KV 模式不变，但 V 是一个键值对)"></a>hash (KV 模式不变，但 V 是一个键值对)</h3><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>hset/hget/hmset/hmget/hgetall/hdel</td><td>设值、获取、同时设值多个、获取所有给定字段的值、获取在哈希表中指定 key 的所有字段和值、删除一个或多个哈希表字段</td></tr><tr><td>hlen key</td><td>获取哈希表中字段的数量</td></tr><tr><td>hexists key field</td><td>查看哈希表 key 中，指定的字段是否存在</td></tr><tr><td>hkeys key/hvals key</td><td>获取所有哈希表中的字段、获取哈希表中所有值</td></tr><tr><td>hincrby key field increment/hincrbyfloatkey field increment</td><td>为哈希表 key 中的指定字段的整数值加上增量 increment 、为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</td></tr><tr><td>hsetnx key field value</td><td>只有在字段 field 不存在时，设置哈希表字段的值。</td></tr></tbody></table><h3 id="zset-sorted-set，在set基础上，加一个score值。之前set是k1-v1-v2-v3，现在zset是k1-score1-v1-score2-v2"><a href="#zset-sorted-set，在set基础上，加一个score值。之前set是k1-v1-v2-v3，现在zset是k1-score1-v1-score2-v2" class="headerlink" title="zset (sorted set，在set基础上，加一个score值。之前set是k1 v1 v2 v3，现在zset是k1 score1 v1 score2 v2)"></a>zset (sorted set，在set基础上，加一个score值。之前set是k1 v1 v2 v3，现在zset是k1 score1 v1 score2 v2)</h3><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>zadd/zrange</td><td>向有序集合添加一个或多个成员，或者更新已存在成员的分数、通过索引区间返回有序集合成指定区间内的成员</td></tr><tr><td>zrangebyscore key min max [WITHSCORES] [LIMIT]</td><td>返回有序集合中指定分数区间的成员列表。</td></tr><tr><td>zrem key member [member …]</td><td>移除有序集中的一个或多个成员，不存在的成员将被忽略。</td></tr><tr><td>zcard key/zcount key min max/zrank key member/zscore key member</td><td>获取有序集合的成员数、计算在有序集合中指定区间分数的成员数、返回有序集合中指定成员的索引、返回有序集中，成员的分数值</td></tr><tr><td>zrevrank key member</td><td>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td>zrevrange key start stop [WITHSCORES]</td><td>返回有序集中指定区间内的成员，通过索引，分数从高到底</td></tr><tr><td>zrevrangebyscore key max min [WITHSCORES]</td><td>返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr></tbody></table><h2 id="四、配置文件"><a href="#四、配置文件" class="headerlink" title="四、配置文件"></a>四、配置文件</h2><ol><li>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程<br>daemonize no</li><li>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定<br>pidfile /var/run/redis.pid</li><li>指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字<br>port 6379</li><li>绑定的主机地址<br>bind 127.0.0.1</li><li>当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能<br>timeout 300</li><li>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose<br>loglevel verbose</li><li>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null<br>logfile stdout</li><li>设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id<br>databases 16</dbid></li><li>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合<br>save <seconds> <changes><br>Redis默认配置文件中提供了三个条件：<br>save 900 1<br>save 300 10<br>save 60 10000<br>分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</changes></seconds></li><li>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大<br>rdbcompression yes</li><li>指定本地数据库文件名，默认值为dump.rdb<br>dbfilename dump.rdb</li><li>指定本地数据库存放目录<br>dir ./</li><li>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步<br>slaveof <masterip> <masterport></masterport></masterip></li><li>当master服务设置了密码保护时，slav服务连接master的密码<br>masterauth <master-password></master-password></li><li>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭<br>requirepass foobared</password></li><li>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息<br>maxclients 128</li><li>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区<br>maxmemory <bytes></bytes></li><li>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no<br>appendonly no</li><li>指定更新日志文件名，默认为appendonly.aof<br>appendfilename appendonly.aof</li><li>指定更新日志条件，共有3个可选值：<br>no：表示等操作系统进行数据缓存同步到磁盘（快）<br>always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）<br>everysec：表示每秒同步一次（折衷，默认值）<br>appendfsync everysec</li><li>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）<br>vm-enabled no</li><li>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享<br>vm-swap-file /tmp/redis.swap</li><li>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0<br>vm-max-memory 0</li><li>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值<br>vm-page-size 32</li><li>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。<br>vm-pages 134217728</li><li>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4<br>vm-max-threads 4</li><li>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启<br>glueoutputbuf yes</li><li>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法<br>hash-max-zipmap-entries 64<br>hash-max-zipmap-value 512</li><li>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）<br>activerehashing yes</li><li>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件<br>include /path/to/local.conf</li></ol><h2 id="五、持久化"><a href="#五、持久化" class="headerlink" title="五、持久化"></a>五、持久化</h2><p> Redis 是内存型数据库，为了保证数据在断电后不会丢失，需要将内存中的数据持久化到硬盘上。</p><h3 id="RDB-Redis-DataBase"><a href="#RDB-Redis-DataBase" class="headerlink" title="RDB (Redis DataBase)"></a>RDB (Redis DataBase)</h3><h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h4><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的 Snapshot 快照，它恢复时是将快照文件直接读到内存里。(rdb 保存的是 dump.rdb 文件)</p><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。</p><p>整个过程中，主进程是不进行任何 IO 操作的，这就确保了极高的性能。</p><p>如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比AOF 方式更加的高效。RDB 的缺点是最后一次持久化后的数据可能丢失。</p><h4 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h4><p>fork 的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程。</p><h4 id="如何触发-RDB-快照"><a href="#如何触发-RDB-快照" class="headerlink" title="如何触发 RDB 快照"></a>如何触发 RDB 快照</h4><ol><li><p>配置文件中默认的快照配置，1分钟改1w次或5分钟改10次或15分钟改1次(可以冷拷贝后重新使用cp dump.rdb dump_new.rdb)</p></li><li><p>命令 save 或者 bgsave</p><p>Save：save 时只管保存，其它不管，全部阻塞。</p><p>BGSAVE：Redis 会在后台异步进行快照操作，快照同时还可以响应客户端请求。可以通过 lastsave 命令获取最后一次成功执行快照的时间</p></li><li><p>执行 flushall 命令，也会产生 dump.rdb 文件，但里面是空的，无意义</p></li></ol><h4 id="如何恢复"><a href="#如何恢复" class="headerlink" title="如何恢复"></a>如何恢复</h4><p>将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可</p><p>CONFIG GET dir 获取目录</p><h4 id="优劣"><a href="#优劣" class="headerlink" title="优劣"></a>优劣</h4><p>优势：适合大规模的数据恢复，对数据完整性和一致性要求不高</p><p>劣势：在一定间隔时间做一次备份，所以如果 redis 意外 down 掉的话，就</p><p>会丢失最后一次快照后的所有修改；fork 的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</p><h4 id="如何停止"><a href="#如何停止" class="headerlink" title="如何停止"></a>如何停止</h4><p>动态停止所有 RDB 保存规则的方法：redis-cli config set save “”</p><h3 id="AOF-Append-Only-File"><a href="#AOF-Append-Only-File" class="headerlink" title="AOF (Append Only File)"></a>AOF (Append Only File)</h3><h4 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h4><p>以日志的形式来记录每个写操作，将 redis 执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，redis 启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。(AOF 保存的是 appendonly.aof 文件)</p><h4 id="AOF-启动-修复-恢复"><a href="#AOF-启动-修复-恢复" class="headerlink" title="AOF 启动/修复/恢复"></a>AOF 启动/修复/恢复</h4><h4 id="正常恢复"><a href="#正常恢复" class="headerlink" title="正常恢复"></a>正常恢复</h4><ol><li>启动：修改默认的 appendonly no，改为 yes</li><li>将有数据的 AOF 文件复制一份保存到对应目录( config get dir )</li><li>恢复：重启 redis 然后重新加载</li></ol><h4 id="异常恢复"><a href="#异常恢复" class="headerlink" title="异常恢复"></a>异常恢复</h4><ol><li>启动：修改默认的 appendonly no，改为 yes</li><li>备份被写坏的 AOF 文件</li><li>修复：redis-check-aof –fix 进行修复</li><li>恢复：重启 redis 然后重新加载</li></ol><h4 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h4><p><strong>是什么</strong></p><p>AOF 采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制，当 AOF 文件的大小超过所设定的阈值时，Redis 就会启动 AOF 文件的内容压缩，只保留可以恢复数据的最小指令集。可以使用命令 bgrewriteaof。</p><p><strong>重写原理</strong></p><p>AOF 文件持续增长而过大时，会 fork 出一条新进程来将文件重写(也是先写临时文件最后再 rename)，遍历新进程的内存中数据，每条记录有一条的 Set 语句。重写 AOF 文件的操作，并没有读取旧的 AOF 文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的 AOF 文件，这点和快照有点类似。</p><p><strong>触发机制</strong></p><p>redis 会记录上次重写时的 AOF 大小，默认配置是当 AOF 文件大小是上次 rewrite 后大小的一倍且文件大于 64M 时触发。</p><h4 id="优劣-1"><a href="#优劣-1" class="headerlink" title="优劣"></a>优劣</h4><p>优势：每修改同步：appendfsync always 同步持久化 每次发生数据变更会被立即记录到磁盘  性能较差但数据完整性比较好；每秒同步：appendfsync everysec    异步操作，每秒记录   如果一秒内宕机，有数据丢失；不同步：appendfsync no   从不同步。</p><p>劣势：相同数据集的数据而言 aof 文件要远大于 rdb 文件，恢复速度慢于 rdb；aof 运行效率要慢于 rdb，每秒同步策略效率较好，不同步效率和 rdb 相同。</p><h3 id="总结-用哪个"><a href="#总结-用哪个" class="headerlink" title="总结(用哪个)"></a>总结(用哪个)</h3><ol><li>RDB 持久化方式能够在指定的时间间隔能对你的数据进行快照存储</li><li>AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF 命令以 redis 协议追加保存每次写的操作到文件末尾。redis 还能对 AOF 文件进行后台重写，使得 AOF 文件的体积不至于过大。</li><li>只做缓存：如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化方式。</li><li>同时开启两种持久化方式<ul><li>在这种情况下，当 redis 重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整。</li><li>RDB 的数据不实时，同时使用两者时服务器重启也只会找 AOF 文件。那要不要只使用 AOF 呢？作者建议不要，因为 RDB 更适合用于备份数据库(AOF 在不断变化不好备份)，快速重启，而且不会有 AOF 可能潜在的 bug，留着作为一个万一的手段。</li></ul></li><li>性能建议<ul><li>因为 RDB 文件只用作后备用途，建议只在 Slave 上持久化 RDB 文件，而且只要15分钟备份一次就够了，只保留 save 900 1 这条规则。</li><li>如果 Enalbe AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只 load 自己的 AOF 文件就可以了。代价一是带来了持续的 IO，二是 AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少 AOF rewrite 的频率，AOF 重写的基础大小默认值64M 太小了，可以设到 5G 以上。默认超过原大小 100% 大小时重写可以改到适当的数值。</li><li>如果不 Enable AOF ，仅靠 Master-Slave Replication 实现高可用性也可以。能省掉一大笔 IO 也减少了 rewrite 时带来的系统波动。代价是如果 Master/Slave 同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个 Master/Slave 中的 RDB 文件，载入较新的那个。新浪微博就选用了这种架构。</li></ul></li></ol><h2 id="六、事务"><a href="#六、事务" class="headerlink" title="六、事务"></a>六、事务</h2><h3 id="是什么-2"><a href="#是什么-2" class="headerlink" title="是什么"></a>是什么</h3><p>可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，按顺序地串行化执行而不会被其它命令插入，不许加塞。</p><h3 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h3><p>一个队列中，一次性、顺序性、排他性的执行一系列命令。</p><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><ol><li>正常执行</li><li>放弃事务</li><li>全体连坐(一条有错，全军覆没)</li><li>冤头债主(exec 才发现的错误，不影响事务中其他语句的执行)</li><li>watch 监控<ul><li>场景：初始化信用卡可用余额和欠额<ul><li>无加塞篡改，先监控再开启 multi，保证两笔金额变动在同一个事务内。</li><li>有加塞篡改，监控了 key，如果 key 被修改了，后面一个事务的执行失效。</li><li>unwatch</li><li>一旦执行了 exec 之前加的监控锁都会被取消掉了</li></ul></li><li>小结<ul><li>Watch 指令，类似乐观锁，事务提交时，如果 Key 的值已被别的客户端改变，比如某个 list 已被别的客户端 push/pop 过了，整个事务队列都不会被执行。</li><li>通过 WATCH 命令在事务执行之前监控了多个 Keys，倘若在 WATCH 之后有任何 Key 的值发生了变化，EXEC 命令执行的事务都将被放弃，同时返回 Nullmulti-bulk 应答以通知调用者事务执行失败。</li></ul></li></ul></li></ol><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>DISCARD</td><td>取消事务，放弃执行事务块内的所有命令。</td></tr><tr><td>EXEC</td><td>执行所有事务块内的命令。</td></tr><tr><td>MULTI</td><td>标记一个事务块的开始。</td></tr><tr><td>UNWATCH</td><td>取消 WATCH 命令对所有 key 的监视。</td></tr><tr><td>WATCH key [key …]</td><td>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</td></tr></tbody></table><h3 id="三阶段"><a href="#三阶段" class="headerlink" title="三阶段"></a>三阶段</h3><p>开启：以 MULTI 开始一个事务。</p><p>入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面。</p><p>执行：由 EXEC 命令触发事务。</p><h3 id="三特性"><a href="#三特性" class="headerlink" title="三特性"></a>三特性</h3><p>单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>没有隔离级别的概念：队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题。</p><p>不保证原子性：redis 同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚。(部分支持事务：全体连坐和冤头债主)</p><h2 id="七、发布订阅"><a href="#七、发布订阅" class="headerlink" title="七、发布订阅"></a>七、发布订阅</h2><h3 id="是什么-3"><a href="#是什么-3" class="headerlink" title="是什么"></a>是什么</h3><p>进程间的一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p><p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p><p><img src="http://qnya.pomo16.club/211.png" alt></p><p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p><p><img src="http://qnya.pomo16.club/212.png" alt></p><p>实际中不会用 redis 做消息中间件</p><h2 id="八、复制"><a href="#八、复制" class="headerlink" title="八、复制"></a>八、复制</h2><h3 id="是什么-4"><a href="#是什么-4" class="headerlink" title="是什么"></a>是什么</h3><p>行话：也就是我们所说的主从复制，主机数据更新后根据配置和策略，自动同步到备机的 master/slaver 机制，Master以写为主，Slave以读为主。</p><h3 id="能干嘛-1"><a href="#能干嘛-1" class="headerlink" title="能干嘛"></a>能干嘛</h3><p>读写分离、容灾恢复</p><h3 id="怎么玩"><a href="#怎么玩" class="headerlink" title="怎么玩"></a>怎么玩</h3><ol><li><p>配从(库)不配主(库)</p></li><li><p>从库配置：slaveof 主库IP 主库端口</p><ul><li>每次与 master 断开之后，都需要重新连接，除非你配置进 redis.conf 文件</li><li>info replication</li></ul></li><li><p>修改配置文件细节操作</p><ul><li>拷贝多个 redis.conf 文件</li><li>开启 daemonize yes</li><li>pid 文件名字 (pidfile)</li><li>指定端口 (port)</li><li>log 文件名字 (logfile)</li><li>dump.rdb 名字 (dbfilename)</li></ul></li><li><p>常用技能</p><ul><li><p>一主二仆</p><ul><li><p>Init</p></li><li><p>一个 Master 两个 Slave</p></li><li><p>日志查看：主机日志、备机日志、info replication(查看状态)</p></li><li><p>一些问题</p><p>1 切入点问题？slave1、slave2 是从头开始复制还是从切入点开始复制?比如从 k4 进来，那之前的123是否也可以复制？（✔️）</p><p>2 从机是否可以写？set可否？（❌，读写分离呀，从机不可写。）</p><p>3 主机 shutdown 后情况如何？从机是上位还是原地待命？（从机原地待命。）</p><p>4 主机又回来了后，主机新增记录，从机还能否顺利复制？(可以，主机回来自动恢复)</p><p>5 其中一台从机 down 后情况如何？依照原有它能跟上大部队吗？(从机只要和 master 断开就要重连)</p></li></ul></li><li><p>薪火相传</p><ul><li>上一个 Slave 可以是下一个 Slave 的 Master，Slave 同样可以接收其他 Slaves 的连接和同步请求，那么该 Slave 作为了链条中下一个的 Master，可以有效减轻 Master 的写压力。</li><li>中途变更转向:会清除之前的数据，重新建立拷贝最新的。</li><li>slaveof 新主库IP 新主库端口</li></ul></li><li><p>反客为主</p><ul><li>SLAVEOF no one</li><li>使当前数据库停止与其他数据库的同步，转成主数据库</li></ul></li></ul></li></ol><h3 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h3><ol><li>slave 启动成功连接到 master 后会发送一个 sync 命令。</li><li>Master 接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master 将传送整个数据文件到 slave，以完成一次完全同步。</li><li>全量复制：而 slave 服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li><li>增量复制：Master 继续将新的所有收集到的修改命令依次传给 slave,完成同步。</li><li>但是只要是重新连接 master，一次完全同步（全量复制）将被自动执行。</li></ol><h3 id="哨兵模式-sentinel"><a href="#哨兵模式-sentinel" class="headerlink" title="哨兵模式 (sentinel)"></a>哨兵模式 (sentinel)</h3><p>反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。一组 sentinel 能同时监控多个 Master。</p><p><strong>使用步骤</strong></p><ol><li>调整结构，6379带着80、81</li><li>自定义的 /myredis 目录下新建 sentinel.conf 文件，名字绝不能错</li><li>配置哨兵，填写内容<ul><li>sentinel monitor 被监控数据库名字(自己起名字) 127.0.0.1 6379 1</li><li>上面最后一个数字1，表示主机挂掉后 salve 投票看让谁接替成为主机，得票数多少后成为主机</li></ul></li><li>启动哨兵<ul><li>redis-sentinel /myredis/sentinel.conf </li><li>上述目录依照各自的实际情况配置，可能目录不同</li></ul></li><li>正常主从演示，原有的master挂了，投票新选</li><li>重新主从继续开工，info replication查查看</li><li>问题：如果之前的 master 重启回来，会不会双 master 冲突？(❌，和反客为主不大一样，老 master 回来会变成新 master 的 slave)</li></ol><h3 id="复制的缺点"><a href="#复制的缺点" class="headerlink" title="复制的缺点"></a>复制的缺点</h3><p>复制延时：由于所有的写操作都是先在 Master 上操作，然后同步更新到 Slave 上，所以从 Master 同步到 Slave 机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave 机器数量的增加也会使这个问题更加严重。</p><h2 id="九、Jedis"><a href="#九、Jedis" class="headerlink" title="九、Jedis"></a>九、Jedis</h2><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><p>commons-pool-1.6.jar、jedis-2.1.0.jar</p><h3 id="连通性测试"><a href="#连通性测试" class="headerlink" title="连通性测试"></a>连通性测试</h3><p>返回 pong 则为连通</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// 查看服务是否运行，打出pong表示OK</span></span><br><span class="line">        System.out.println(<span class="string">"connection is OK==========&gt;: "</span> + jedis.ping());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="日常使用"><a href="#日常使用" class="headerlink" title="日常使用"></a>日常使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAPI</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">jedis.set(<span class="string">"k1"</span>,<span class="string">"v1"</span>);</span><br><span class="line">jedis.set(<span class="string">"k2"</span>,<span class="string">"v2"</span>);</span><br><span class="line">jedis.set(<span class="string">"k3"</span>,<span class="string">"v3"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(jedis.get(<span class="string">"k3"</span>));</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; sets = jedis.keys(<span class="string">"*"</span>);</span><br><span class="line">System.out.println(sets.size());</span><br><span class="line"></span><br><span class="line"><span class="comment">//后续请参考脑图，家庭作业，敲一遍......</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>加锁事务场景模拟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTX</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transMethod</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="keyword">int</span> balance;<span class="comment">// 可用余额100元（set balance 100）</span></span><br><span class="line">        <span class="keyword">int</span> debt;<span class="comment">// 欠额(set debt 0)</span></span><br><span class="line">        <span class="keyword">int</span> amtToSubtract = <span class="number">10</span>;<span class="comment">// 实刷额度10元</span></span><br><span class="line"></span><br><span class="line">        jedis.watch(<span class="string">"balance"</span>);</span><br><span class="line">        <span class="comment">// jedis.set("balance","5");</span></span><br><span class="line">        <span class="comment">// 此句不该出现，模拟其他程序已经修改了该条目</span></span><br><span class="line">        <span class="comment">// 模拟系统停顿7秒，期间若有改动，则该程序能够监控到变化</span></span><br><span class="line">        Thread.sleep(<span class="number">7000</span>);</span><br><span class="line">        balance = Integer.parseInt(jedis.get(<span class="string">"balance"</span>));</span><br><span class="line">        <span class="keyword">if</span> (balance &lt; amtToSubtract) &#123;</span><br><span class="line">            jedis.unwatch();</span><br><span class="line">            System.out.println(<span class="string">"modify"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"***********transaction"</span>);</span><br><span class="line">            Transaction transaction = jedis.multi();</span><br><span class="line">            transaction.decrBy(<span class="string">"balance"</span>, amtToSubtract);</span><br><span class="line">            transaction.incrBy(<span class="string">"debt"</span>, amtToSubtract);</span><br><span class="line">            transaction.exec();</span><br><span class="line">            balance = Integer.parseInt(jedis.get(<span class="string">"balance"</span>));</span><br><span class="line">            debt = Integer.parseInt(jedis.get(<span class="string">"debt"</span>));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"*******"</span> + balance);</span><br><span class="line">            System.out.println(<span class="string">"*******"</span> + debt);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通俗点讲，watch命令就是标记一个键，如果标记了一个键，</span></span><br><span class="line"><span class="comment">     * 在提交事务前如果该键被别人修改过，那事务就会失败，这种情况通常可以在程序中</span></span><br><span class="line"><span class="comment">     * 重新再尝试一次。</span></span><br><span class="line"><span class="comment">     * 首先标记了键balance，然后检查余额是否足够，不足就取消标记，并不做扣减；</span></span><br><span class="line"><span class="comment">     * 足够的话，就启动事务进行更新操作，</span></span><br><span class="line"><span class="comment">     * 如果在此期间键balance被其它人修改， 那在提交事务（执行exec）时就会报错，</span></span><br><span class="line"><span class="comment">     * 程序中通常可以捕获这类错误再重新执行一次，直到成功。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TestTX test = <span class="keyword">new</span> TestTX();</span><br><span class="line">        <span class="keyword">boolean</span> retValue = test.transMethod();</span><br><span class="line">        System.out.println(<span class="string">"main retValue-------: "</span> + retValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>6379,6380启动，先各自先独立，主写从读。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMS</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Jedis jedis_M = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>,<span class="number">6379</span>);</span><br><span class="line">Jedis jedis_S = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>,<span class="number">6380</span>);</span><br><span class="line"></span><br><span class="line">jedis_S.slaveof(<span class="string">"127.0.0.1"</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">jedis_M.set(<span class="string">"class"</span>,<span class="string">"1122V2"</span>);</span><br><span class="line"></span><br><span class="line">String result = jedis_S.get(<span class="string">"class"</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JedisPool"><a href="#JedisPool" class="headerlink" title="JedisPool"></a>JedisPool</h3><p>获取 Jedis 实例需要从 JedisPool 中获取。</p><p>用完 Jedis 实例需要返还给 JedisPool。</p><p>如果 Jedis 在使用过程中出错，则也需要还给 JedisPool。</p><p>连接池（懒汉式单例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolUtil</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> JedisPool jedisPool = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">JedisPoolUtil</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JedisPool <span class="title">getJedisPoolInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span> == jedisPool)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (JedisPoolUtil.class)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span> == jedisPool)</span><br><span class="line">&#123;</span><br><span class="line">JedisPoolConfig poolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">poolConfig.setMaxActive(<span class="number">1000</span>);</span><br><span class="line">poolConfig.setMaxIdle(<span class="number">32</span>);</span><br><span class="line">poolConfig.setMaxWait(<span class="number">100</span>*<span class="number">1000</span>);</span><br><span class="line">poolConfig.setTestOnBorrow(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">jedisPool = <span class="keyword">new</span> JedisPool(poolConfig,<span class="string">"127.0.0.1"</span>,<span class="number">6379</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> jedisPool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(JedisPool jedisPool,Jedis jedis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span> != jedis)</span><br><span class="line">&#123;</span><br><span class="line">jedisPool.returnResourceObject(jedis);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试连接池：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">JedisPool jedisPool = JedisPoolUtil.getJedisPoolInstance();</span><br><span class="line">JedisPool jedisPool2 = JedisPoolUtil.getJedisPoolInstance();</span><br><span class="line"></span><br><span class="line">System.out.println(jedisPool == jedisPool2);</span><br><span class="line"></span><br><span class="line">Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">jedis = jedisPool.getResource();</span><br><span class="line">jedis.set(<span class="string">"aa"</span>,<span class="string">"bb"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">JedisPoolUtil.release(jedisPool, jedis);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><p>JedisPool 的配置参数大部分是由 JedisPoolConfig 的对应项来赋值的。</p><p><strong>maxActive</strong>：控制一个 pool 可分配多少个 jedis 实例，通过 pool.getResource() 来获取；如果赋值为 -1，则表示不限制；如果 pool 已经分配了 maxActive 个 jedis 实例，则此时 pool 的状态为 exhausted。</p><p><strong>maxIdle</strong>：控制一个 pool 最多有多少个状态为 idle(空闲) 的 jedis 实例。</p><p>whenExhaustedAction：表示当 pool 中的 jedis 实例都被 allocated 完时，pool 要采取的操作，默认有三种：</p><ul><li>WHEN_EXHAUSTED_FAIL –&gt; 表示无jedis实例时，直接抛出 NoSuchElementException</li><li>WHEN_EXHAUSTED_BLOCK –&gt; 则表示阻塞住，或者达到 maxWait 时抛出JedisConnectionException</li><li>WHEN_EXHAUSTED_GROW –&gt; 则表示新建一个jedis实例，也就说设置的maxActive无用；</li></ul><p><strong>maxWait</strong>：表示当 borrow 一个 jedis 实例时，最大的等待时间，如果超过等待时间，则直接抛 JedisConnectionException。</p><p><strong>testOnBorrow</strong>：获得一个 jedis 实例的时候是否检查连接可用性（ping()）；如果为 true，则得到的 jedis 实例均是可用的。</p><p>testOnReturn：return  一个 jedis 实例给 pool 时，是否检查连接可用性（ping()）；</p><p>testWhileIdle：如果为 true，表示有一个 idle object evitor 线程对 idle object 进行扫描，如果 validate 失败，此 object 会被从 pool 中 drop 掉；这一项只有在 timeBetweenEvictionRunsMillis 大于0时才有意义。</p><p>timeBetweenEvictionRunsMillis：表示 idle object evitor 两次扫描之间要 sleep 的毫秒数。</p><p>numTestsPerEvictionRun：表示 idle object evitor 每次扫描的最多的对象数。</p><p>minEvictableIdleTimeMillis：表示一个对象至少停留在 idle 状态的最短时间，然后才能被 idle object evitor 扫描并驱逐；这一项只有在 timeBetweenEvictionRunsMillis 大于0时才有意义。</p><p>softMinEvictableIdleTimeMillis：在 minEvictableIdleTimeMillis 基础上，加入了至少 minIdle 个对象已经在 pool 里面了。如果为 -1，evicted 不会根据 idle time 驱逐任何对象。如果 minEvictableIdleTimeMillis&gt;0，则此项设置无意义，且只有在 timeBetweenEvictionRunsMillis 大于0时才有意义；</p><p>lifo：borrowObject 返回对象时，是采用 DEFAULT_LIFO（last in first out，即类似cache的最频繁使用队列），如果为 False，则表示 FIFO 队列；</p><hr><p>其中 JedisPoolConfig 对一些参数的默认设置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">testWhileIdle = <span class="keyword">true</span></span><br><span class="line">minEvictableIdleTimeMills = <span class="number">60000</span></span><br><span class="line">timeBetweenEvictionRunsMillis = <span class="number">30000</span></span><br><span class="line">numTestsPerEvictionRun = -<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP基础</title>
      <link href="/2019/04/22/JSP%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/04/22/JSP%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h2><p><strong>request</strong></p><p>该对象代表了客户端的请求信息，主要用于接受通过 HTTP 协议传送到服务器的数据。 request 对象的作用域为一次请求。</p><p><strong>response</strong></p><p>该对象是对客户端的响应，主要是将 JSP 容器处理过的对象传回到客户端。response 对象的作用域只在 JSP 页面内有效。</p><p><strong>session 会话</strong></p><p>该对象是客服端和服务器的一次会话。服务器为每个用户都生成一个 session 对象，用于保存该用户的信息，跟踪用户的操作状态。直到客户端断开连接或者，session 时间到期后断开。</p><p><strong>application 全局对象</strong></p><p>该对象是存在于整个应用中，开始于服务器启动，结束于服务器关闭。这个对象中可以保存信息在应用任何地方都可以用。</p><p><strong>out 输出对象</strong></p><p>该对象是 JspWriter 类的实例,是向客户端浏览器输出内容经常要用到的对象 。就只能作用在当前页面。用完过后要及时清除缓冲区的内容，腾出空间，还要记得关闭输出流。</p><p><strong>pageContext JSP页面容器</strong></p><p>该对象可以获取当前 jsp 页面任何范围的参数。比如 out、request、reponse、session、application 等对象。</p><p><strong>config 配置对象</strong></p><p>该对象的作用就是当一个 Servlet 初始化时，容器（Tomcat、JRun、Resin等）把某些信息；服务器的一些信息等通过 config 对象传递给这个 Servlet。 </p><p><strong>page 当前JSP页面对象</strong></p><p>该对象就是指向的当前 jsp 页面本身。</p><p><strong>exception 异常对象</strong></p><p>对象就是在页面运行过程中出了异常来显示异常信息的，但是必须在页面中设置 isErrorPage=”true” 才能使用。</p><h2 id="四大作用域"><a href="#四大作用域" class="headerlink" title="四大作用域"></a>四大作用域</h2><p><strong>四大作用域范围从小到大</strong></p><p>pageContext &lt; request &lt; session &lt; application</p><p><strong>生命周期</strong></p><p>pageContext：存在 page 中的变量，只作用于当前的 jsp 页面，当发生跳转、重定向、定时刷新时，将随之销毁。</p><p>request：存在 request 中的变量，作用于一次 HTTP 请求到服务器处理结束，返回响应的整个过程，该变量可以随着 forward 的方式跳转到多个 jsp 中，一但刷新页面，它们将重新计算。</p><p>session：存在 session 中的变量，作用于一次会话中，从打开浏览器到关闭浏览器过程中，将一直累加。（若想在再次打开浏览器时，变量仍然存在，则可以将 session 的 JSESSIONID 存到 cookie 中，在给 cookie 一个存活时间）</p><p>application：存在 application 中的变量，作用于整个应用中，即从应用启动到应用结束，如果不进行手工删除，它们将一直可以使用，而且这些变量所有用户均可使用。</p><p><strong>作用范围</strong></p><p>pageContext：用户请求的当前页面。</p><p>request：用户请求访问的当前组件，以及和当前 web 组件共享同一用户请求的 web 组件。</p><p>session：同一个 Http 会话中的 web 组件共享。</p><p>application：整个 web 应用的所有 web 组件共享，即只要是同一个服务器下的均可使用。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p><strong>out</strong></p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>println()</td><td>向客户端输出各种类型的数据</td></tr><tr><td>close()</td><td>关闭输出流</td></tr><tr><td>flush()</td><td>输出缓冲区数据</td></tr><tr><td>clearBuffer()</td><td>清除缓冲区数据，并且把数据输出到客户端</td></tr><tr><td>clear()</td><td>清除缓冲区数据，但是不把数据输出到客户端</td></tr></tbody></table><p><strong>request</strong></p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>getMethod()</td><td>返回客户端向服务器端传送数据的方法</td></tr><tr><td>getParameter(String paramName)</td><td>返回客户端传向服务器端传递的参数值</td></tr><tr><td>getParameterNames()</td><td>获得客户端传递给服务器端的所有参数的名字</td></tr><tr><td>getParameterValues(String name)</td><td>获得指定参数的所有值</td></tr><tr><td>getRequestURL()</td><td>获得发出请求字符串的客户端地址</td></tr><tr><td>getRemoteAddr()</td><td>获取客户端 IP 地址</td></tr><tr><td>getRemoteHost()</td><td>获取客户端机器名称</td></tr><tr><td>getServerName()</td><td>获取服务器名字</td></tr><tr><td>getSession()</td><td>获取session对象</td></tr><tr><td>getServerPort()</td><td>获取服务器端端口</td></tr></tbody></table><p><strong>response</strong></p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>getCharacterEncoding()</td><td>返回响应用的是何种字符编码</td></tr><tr><td>getOutputStream()</td><td>返回响应的一个二进制输出流</td></tr><tr><td>getWriter()</td><td>返回可以向客户端输出字符的一个对象</td></tr><tr><td>setContentLength(int len)</td><td>设置响应头长度</td></tr><tr><td>addCookie(Cookie cookie)</td><td>添加一个Cookie对象，用于在客户端保存特定的信息</td></tr><tr><td>sendRedirect(String url)</td><td>重新定向客户端的请求</td></tr><tr><td>sendError(int)</td><td>向客户端发送错误信息，int指服务器的错误码</td></tr><tr><td>addHeader(String name, String value)</td><td>添加HTTP头信息，该Header信息将发送到客户端</td></tr></tbody></table><h2 id="七大动作"><a href="#七大动作" class="headerlink" title="七大动作"></a>七大动作</h2><table><thead><tr><th>动作</th><th>作用</th></tr></thead><tbody><tr><td>jsp:include</td><td>在页面被请求的时候引入一个文件。</td></tr><tr><td>jsp:useBean</td><td>寻找或者实例化一个 JavaBean。</td></tr><tr><td>jsp:setProperty</td><td>设置 JavaBean 的属性。</td></tr><tr><td>jsp:getProperty</td><td>输出某个 JavaBean 的属性。</td></tr><tr><td>jsp:forward</td><td>把请求转到一个新的页面。</td></tr><tr><td>jsp:plugin</td><td>根据浏览器类型为 Java 插件生成 OBJECT 或 EMBED 标记。</td></tr><tr><td>jsp:element</td><td>定义动态 XML 元素</td></tr><tr><td>jsp:attribute</td><td>设置动态定义的 XML 元素属性。</td></tr><tr><td>jsp:body</td><td>设置动态定义的 XML 元素内容。</td></tr><tr><td>jsp:text</td><td>在 JSP 页面和文档中使用写入文本的模板</td></tr></tbody></table><h2 id="三大指令"><a href="#三大指令" class="headerlink" title="三大指令"></a>三大指令</h2><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>&lt;%@ page … %&gt;</td><td>定义网页依赖属性，比如脚本语言、error页面、缓存需求等等</td></tr><tr><td>&lt;%@ include … %&gt;</td><td>包含其他文件</td></tr><tr><td>&lt;%@ taglib … %&gt;</td><td>引入标签库的定义</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jsp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jsp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP</title>
      <link href="/2019/04/14/Spring-AOP/"/>
      <url>/2019/04/14/Spring-AOP/</url>
      
        <content type="html"><![CDATA[<p>本文转载自 <a href="https://my.oschina.net/liughDevelop/blog/1457097" target="_blank" rel="noopener">刘半仙</a> 大神，这篇文章写得太好了，对 AOP 的原理介绍由浅入深。</p><a id="more"></a><p>为什么会有面向切面编程（AOP）？我们知道 Java 是一个面向对象（OOP）的语言，但它有一些弊端，比如当我们需要为多个不具有继承关系的对象引入一个公共行为，例如日志、权限验证、事务等功能时，只能在在每个对象里引用公共行为。这样做不便于维护，而且有大量重复代码。AOP 的出现弥补了 OOP 的这点不足。</p><p>为了阐述清楚 Spring AOP，我们将从下方面进行讨论：</p><ol><li><a href="#代理模式">代理模式</a></li><li><a href="#静态代理原理及实践">静态代理原理及实践</a></li><li><a href="#动态代理原理及实践">动态代理原理及实践</a></li><li><a href="#Spring-AOP原理及实战">Spring AOP原理及实战</a></li></ol><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>这段话比较官方，但我更倾向于用自己的语言理解：比如 A 对象要做一件事情，在没有代理前，自己来做；在对 A 代理后，由 A 的代理类 B 来做。代理其实是在原实例前后加了一层处理，这也是 AOP 的初级轮廓。代理模式：为其他对象提供一种代理以控制对这个对象的访问。</p><h2 id="静态代理原理及实践"><a href="#静态代理原理及实践" class="headerlink" title="静态代理原理及实践"></a>静态代理原理及实践</h2><p>静态代理模式：静态代理说白了，就是在程序运行前就已经存在代理类的字节码文件、代理类和原始类的关系在运行前就已经确定。废话不多说，我们看一下代码。为了方便阅读，博主把单独的 class 文件合并到接口中，读者可以直接复制代码运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.staticProxy;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//目标对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">implements</span> <span class="title">IUserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"模拟：保存用户！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"模拟：查询用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 静态代理</span></span><br><span class="line"><span class="comment">  * 特点：</span></span><br><span class="line"><span class="comment">  * 2. 目标对象必须要实现接口</span></span><br><span class="line"><span class="comment">  * 2. 代理对象，要实现与目标对象一样的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title">IUserDao</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 代理对象，需要维护一个目标对象</span></span><br><span class="line">    <span class="keyword">private</span> IUserDao target = <span class="keyword">new</span> UserDao();</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"代理操作： 开启事务..."</span>);</span><br><span class="line">        target.save();   <span class="comment">// 执行目标对象的方法</span></span><br><span class="line">        System.out.println(<span class="string">"代理操作：提交事务..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        target.find();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="http://qnya.pomo16.club/202.png" alt></p><p>静态代理虽然保证了业务类只需关注逻辑本身，代理对象的一个接口只服务于一种类型的对象。如果要代理的方法很多，势必要为每一种方法都进行代理。再者，如果增加一个方法，除了实现类需要实现这个方法外，所有的代理类也要实现此方法。增加了代码的维护成本。那么要如何解决呢？答案是使用动态代理。</p><h2 id="动态代理原理及实践"><a href="#动态代理原理及实践" class="headerlink" title="动态代理原理及实践"></a>动态代理原理及实践</h2><p>动态代理模式：动态代理类的源码是在程序运行期间，通过 JVM 反射等机制动态生成。代理类和委托类的关系是运行时才确定的。实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.dynamicProxy;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//目标对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">implements</span> <span class="title">IUserDao</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"模拟： 保存用户！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态代理：</span></span><br><span class="line"><span class="comment"> * 代理工厂，给多个目标对象生成代理对象！</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 接收一个目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 返回对目标对象(target)代理后的对象(proxy)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object proxy = Proxy.newProxyInstance(</span><br><span class="line">            target.getClass().getClassLoader(),  <span class="comment">// 目标对象使用的类加载器</span></span><br><span class="line">            target.getClass().getInterfaces(),   <span class="comment">// 目标对象实现的所有接口</span></span><br><span class="line">            <span class="keyword">new</span> InvocationHandler() &#123;            <span class="comment">// 执行代理对象方法时候触发</span></span><br><span class="line"> </span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">                        <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"> </span><br><span class="line">                    <span class="comment">// 获取当前执行的方法的方法名</span></span><br><span class="line">                    String methodName = method.getName();</span><br><span class="line">                    <span class="comment">// 方法返回值</span></span><br><span class="line">                    Object result = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"find"</span>.equals(methodName)) &#123;</span><br><span class="line">                        <span class="comment">// 直接调用目标对象方法</span></span><br><span class="line">                        result = method.invoke(target, args);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"开启事务..."</span>);</span><br><span class="line">                        <span class="comment">// 执行目标对象方法</span></span><br><span class="line">                        result = method.invoke(target, args);</span><br><span class="line">                        System.out.println(<span class="string">"提交事务..."</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="http://qnya.pomo16.club/203.png" alt></p><p>在运行测试类中创建测试类对象代码中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IUserDao proxy = (IUserDao)<span class="keyword">new</span> ProxyFactory(target).getProxyInstance();</span><br></pre></td></tr></table></figure><p>其实是JDK动态生成了一个类去实现接口,隐藏了这个过程:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> $<span class="title">jdkProxy</span> <span class="keyword">implements</span> <span class="title">IUserDao</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>使用 jdk 生成的动态代理的前提是目标类必须有实现的接口</strong>。但这里又引入一个问题,如果某个类没有实现接口,就不能使用 JDK 动态代理,所以 Cglib 代理就是解决这个问题的。</p><p>Cglib 是以动态生成的子类继承目标的方式实现，在运行期动态的在内存中构建一个子类，如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//Cglib是以动态生成的子类继承目标的方式实现,程序执行时,隐藏了下面的过程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $<span class="title">Cglib_Proxy_class</span>  <span class="keyword">extends</span> <span class="title">UserDao</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>Cglib 使用的前提是目标类不能为 final 修饰</strong>。因为final修饰的类不能被继承。</p><p>现在，我们可以看看 AOP 的定义：面向切面编程，核心原理：<strong>使用动态代理模式在方法执行前后或出现异常时加入相关逻辑。</strong></p><p>​       通过定义和前面代码我们可以发现3点：</p><p>​         1.AOP 是基于动态代理模式。</p><p>​         2.AOP 是方法级别的。</p><p>​         3.AOP 可以分离业务代码和关注点代码（重复代码），在执行业务代码时，动态的注入关注点代码。切面就是关注点代码形成的类。</p><h2 id="Spring-AOP原理及实战"><a href="#Spring-AOP原理及实战" class="headerlink" title="Spring AOP原理及实战"></a>Spring AOP原理及实战</h2><p>前文提到 JDK 代理和 Cglib 代理两种动态代理，优秀的 Spring 框架把两种方式在底层都集成了进去,我们无需担心自己去实现动态生成代理。那么，Spring 是如何生成代理对象的？</p><ol><li><p>创建容器对象的时候，根据切入点表达式拦截的类，生成代理对象。</p></li><li><p>如果目标对象有实现接口，使用 jdk 代理。如果目标对象没有实现接口，则使用 Cglib 代理。然后从容器获取代理后的对象，在运行期植入”切面”类的方法。通过查看 Spring 源码，我们在 DefaultAopProxyFactory 类中，找到这样一段话。</p><p><img src="http://qnya.pomo16.club/204.png" alt></p></li></ol><p>简单的从字面意思看出,如果有接口,则使用 Jdk 代理,反之使用 Cglib，这刚好印证了前文所阐述的内容。Spring AOP 综合两种代理方式的使用前提有会如下结论：<strong>如果目标类没有实现接口，且 class 为 final 修饰的，则不能进行 Spring AOP 编程！</strong></p><p>知道了原理，现在我们将自己手动实现 Spring 的 AOP：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.spring_aop_anno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用于测试Cglib动态代理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//int i =1/0;用于测试异常通知</span></span><br><span class="line">System.out.println(<span class="string">"保存订单..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用于测试jdk动态代理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//int i =1/0;用于测试异常通知</span></span><br><span class="line">System.out.println(<span class="string">"保存用户..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//切面类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransactionAop</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"[前置通知]  开启事务.."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"[后置通知] 提交事务.."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturing</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"[返回后通知]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"[异常通知]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">arroud</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"[环绕前：]"</span>);</span><br><span class="line">pjp.proceed();       <span class="comment">// 执行目标方法</span></span><br><span class="line">System.out.println(<span class="string">"[环绕后：]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring 的 xml 配置文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- dao实例加入容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"test.spring_aop_anno.UserDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- dao实例加入容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"orderDao"</span> <span class="attr">class</span>=<span class="string">"test.spring_aop_anno.OrderDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 实例化切面类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionAop"</span> <span class="attr">class</span>=<span class="string">"test.spring_aop_anno.TransactionAop"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Aop相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 切入点表达式定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* test.spring_aop_anno.*Dao.*(..))"</span> <span class="attr">id</span>=<span class="string">"transactionPointcut"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 切面配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"transactionAop"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 【环绕通知】 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"arroud"</span> <span class="attr">pointcut-ref</span>=<span class="string">"transactionPointcut"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 【前置通知】 在目标方法之前执行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beginTransaction"</span> <span class="attr">pointcut-ref</span>=<span class="string">"transactionPointcut"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 【后置通知】 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"commit"</span> <span class="attr">pointcut-ref</span>=<span class="string">"transactionPointcut"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 【返回后通知】 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturing"</span> <span class="attr">pointcut-ref</span>=<span class="string">"transactionPointcut"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 异常通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowing"</span> <span class="attr">pointcut-ref</span>=<span class="string">"transactionPointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码的测试结果如下:</p><p><img src="http://qnya.pomo16.club/205.png" alt></p><p>到这里,我们已经全部介绍完Spring AOP，我们拿它做什么？</p><ol><li>Spring声明式事务管理配置</li><li>Controller层的参数校验</li><li>使用Spring AOP实现MySQL数据库读写分离案例分析</li><li>在执行方法前,判断是否具有权限</li><li>对部分函数的调用进行日志记录。监控部分重要函数，若抛出指定的异常，可以以短信或邮件方式通知相关人员</li><li>信息过滤，页面转发等等功能</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊HashMap</title>
      <link href="/2019/04/14/%E8%81%8A%E8%81%8AHashMap/"/>
      <url>/2019/04/14/%E8%81%8A%E8%81%8AHashMap/</url>
      
        <content type="html"><![CDATA[<h2 id="HashMap是什么？"><a href="#HashMap是什么？" class="headerlink" title="HashMap是什么？"></a>HashMap是什么？</h2><ul><li>HashMap 是一个散列桶（1.7是数组+链表，1.8是数组+链表+红黑树），它存储的内容是键值对 key-value 映射。</li><li>HashMap 采用了数组和链表的数据结构，能在查询和修改方便继承了数组的线性查找和链表的寻址修改。</li><li>HashMap 是非 synchronized，所以 HashMap 很快。</li><li>HashMap 可以接受 null 键和值，而 Hashtable 则不能（原因就是 equlas() 方法需要对象，因为 HashMap 是后出的 API 经过处理才可以）。如果键为null，那么调用hash()方法得到的都将是0，<strong>所以键为 null 的元素都始终位于哈希表 table[0] 中。</strong></li></ul><h2 id="HashMap在JDK1-7和1-8中的区别"><a href="#HashMap在JDK1-7和1-8中的区别" class="headerlink" title="HashMap在JDK1.7和1.8中的区别"></a>HashMap在JDK1.7和1.8中的区别</h2><ol><li><p>底层数据结构不一样，1.7是数组+链表，1.8则是数组+链表+红黑树结构（当链表长度大于8，转为红黑树）。</p></li><li><p>JDK1.7 用的是头插法，而JDK1.8及之后使用的都是尾插法，那么他们为什么要这样做呢？</p><p>因为 JDK1.7 是用单链表进行的纵向延伸，当采用头插法时会容易出现逆序且环形链表死循环问题。但是在 JDK1.8 之后是因为加入了红黑树使用尾插法，能够避免出现逆序且链表死循环的问题。</p></li><li><p>1.8 rehash 时保证原链表的顺序，而1.7中 rehash 时有可能改变链表的顺序（头插法导致）。</p></li><li><p>在扩容的时候：1.7在插入数据之前扩容，而1.8插入数据成功之后扩容。</p></li><li><p>1.7计算 hash 运算多，1.8计算 hash 运算少 。</p></li><li><p>1.7受 rehash 影响，1.8调整后是 (原位置) or (原位置+旧容量)。</p></li></ol><h2 id="HashMap工作原理"><a href="#HashMap工作原理" class="headerlink" title="HashMap工作原理"></a>HashMap工作原理</h2><p>HashMap 是基于 hashing 的原理，通过 put(key, value) 存储对象到 HashMap 中，使用 get(key) 从 HashMap 中获取对象。当我们给 put() 方法传递键和值时，我们先对键调用 hashCode() 方法，计算并返回的 hashCode 是用于找到 Map 数组的 bucket 位置来储存 Node 对象。这里关键点在于，HashMap 是在 bucket 中储存键对象和值对象，作为Map.Node 。</p><h4 id="具体-put-过程（JDK1-8）"><a href="#具体-put-过程（JDK1-8）" class="headerlink" title="具体 put 过程（JDK1.8）"></a>具体 put 过程（JDK1.8）</h4><ol><li>对 Key 求 Hash 值，然后再计算下标</li><li>如果没有碰撞，直接放入桶中（碰撞的意思是计算得到的 Hash 值相同，需要放到同一个 bucket 中）</li><li>如果碰撞了，以链表的方式链接到后面</li><li>如果链表长度超过阀值（TREEIFY THRESHOLD==8），就把链表转成红黑树，链表长度低于6，就把红黑树转回链表</li><li>如果节点已经存在就替换旧值</li><li>如果桶满了（容量16*加载因子0.75），就需要 resize（扩容2倍后重排）</li></ol><h4 id="具体-get-过程"><a href="#具体-get-过程" class="headerlink" title="具体 get 过程"></a>具体 get 过程</h4><p><strong>考虑特殊情况：</strong>如果两个键的 hashcode 相同，你如何获取值对象？</p><p>当我们调用 get() 方法，HashMap 会使用键对象的 hashcode 找到 bucket 位置，找到 bucket 位置之后，会调用 keys.equals() 方法去找到链表中正确的节点，最终找到要找的值对象。</p><h2 id="有什么方法可以减少碰撞？"><a href="#有什么方法可以减少碰撞？" class="headerlink" title="有什么方法可以减少碰撞？"></a>有什么方法可以减少碰撞？</h2><h4 id="扰动函数可以减少碰撞"><a href="#扰动函数可以减少碰撞" class="headerlink" title="扰动函数可以减少碰撞"></a>扰动函数可以减少碰撞</h4><p>原理是如果两个不相等的对象返回不同的 hashcode 的话，那么碰撞的几率就会小些。这就意味着链表结构减小，这样取值的话就不会频繁调用 equal 方法，从而提高 HashMap 的性能（扰动即 Hash 方法内部的算法实现，目的是让不同对象返回不同hashcode）。</p><h4 id="使用不可变的、声明作-final-对象，并且采用合适的-equals-和-hashCode-方法，将会减少碰撞的发生"><a href="#使用不可变的、声明作-final-对象，并且采用合适的-equals-和-hashCode-方法，将会减少碰撞的发生" class="headerlink" title="使用不可变的、声明作 final 对象，并且采用合适的 equals() 和 hashCode() 方法，将会减少碰撞的发生"></a>使用不可变的、声明作 final 对象，并且采用合适的 equals() 和 hashCode() 方法，将会减少碰撞的发生</h4><p>不可变性使得能够缓存不同键的 hashcode，这将提高整个获取对象的速度，使用 String、Integer 这样的 wrapper 类作为键是非常好的选择。</p><h4 id="为什么-String、Integer-这样的-wrapper-类适合作为键？"><a href="#为什么-String、Integer-这样的-wrapper-类适合作为键？" class="headerlink" title="为什么 String、Integer 这样的 wrapper 类适合作为键？"></a>为什么 String、Integer 这样的 wrapper 类适合作为键？</h4><p>因为 String 是 final，而且已经重写了 equals() 和 hashCode() 方法了。不可变性是必要的，因为为了要计算 hashCode()，就要防止键值改变，如果键值在放入时和获取时返回不同的 hashcode 的话，那么就不能从 HashMap 中找到你想要的对象。</p><h2 id="HashMap-中-hash-函数怎么是实现的"><a href="#HashMap-中-hash-函数怎么是实现的" class="headerlink" title="HashMap 中 hash 函数怎么是实现的?"></a>HashMap 中 hash 函数怎么是实现的?</h2><p>在 hashmap 中要找到某个元素，需要根据 key 的 hash 值来求得对应数组中的位置。如何计算这个位置就是 hash 算法。我们一般对哈希表的散列很自然地会想到用 hash 值对 length 取模（即除法散列法），Hashtable 中也是这样实现的，这种方法基本能保证元素在哈希表中散列的比较均匀，但取模会用到除法运算，效率很低，<strong>HashMap 中则通过 h&amp;(length-1) 的方法来代替取模，同样实现了均匀的散列，但效率要高很多，这也是 HashMap 对 Hashtable 的一个改进。</strong>这也是为什么哈希表的容量一定要是2的整数次幂，length 为2的整数次幂的话，h&amp;(length-1) 就相当于对 length 取模，这样便保证了散列的均匀，同时也提升了效率。</p><h2 id="拉链法导致的链表过深，为什么不用二叉查找树代替而选择红黑树？为什么不一直使用红黑树？"><a href="#拉链法导致的链表过深，为什么不用二叉查找树代替而选择红黑树？为什么不一直使用红黑树？" class="headerlink" title="拉链法导致的链表过深，为什么不用二叉查找树代替而选择红黑树？为什么不一直使用红黑树？"></a>拉链法导致的链表过深，为什么不用二叉查找树代替而选择红黑树？为什么不一直使用红黑树？</h2><p>引入红黑树就是为了查找数据快，解决链表查询深度的问题。我们知道红黑树属于平衡二叉树，为了保持“平衡”是需要付出代价的，但是该代价所损耗的资源要比遍历线性链表要少。所以当长度大于8的时候，会使用红黑树；如果链表长度很短的话，根本不需要引入红黑树，引入反而会慢。</p><p><strong>红黑树</strong></p><ol><li>每个节点非红即黑</li><li>根节点总是黑色的</li><li>如果节点是红色的，则它的子节点必须是黑色的（反之不一定）</li><li>每个叶子节点都是黑色的空节点（NIL节点）</li><li>从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）</li></ol><p><img src="http://qnya.pomo16.club/201.png" alt></p><h2 id="HashMap-与-HashTable-区别"><a href="#HashMap-与-HashTable-区别" class="headerlink" title="HashMap 与 HashTable 区别"></a>HashMap 与 HashTable 区别</h2><ul><li>默认容量不同，扩容不同(HashMap 默认16，扩容 2 倍；HashTable 默认11，扩容 2 倍 + 1)</li><li>线程安全性：HashTable 安全</li><li>效率不同：HashTable 要慢，因为加锁</li><li>HashMap 可以接受为 null 的键值 (key) 和值 (value)，而 Hashtable 则不行</li><li>HashMap 不能保证随着时间的推移 Map 中的元素次序是不变的</li><li>Hashtable 计算 hash 值，直接用 key 的 hashCode()，而 HashMap 重新计算了 key 的 hash 值(hash 函数)</li><li>迭代器：HashMap 的迭代器 (Iterator) 是 fail-fast 迭代器，而 Hashtable 的 enumerator 迭代器不是 fail-fast 的。所以当有其它线程改变了 HashMap 的结构（增加或者移除元素），将会抛出 ConcurrentModificationException，但迭代器本身的 remove() 方法移除元素则不会抛出 ConcurrentModificationException异常。但这并不是一个一定发生的行为，要看 JVM。这条同样也是 Enumeration 和 Iterator 的区别。</li></ul><h2 id="CocurrentHashMap"><a href="#CocurrentHashMap" class="headerlink" title="CocurrentHashMap"></a>CocurrentHashMap</h2><h4 id="JDK1-7"><a href="#JDK1-7" class="headerlink" title="JDK1.7"></a>JDK1.7</h4><ul><li>CocurrentHashMap 是由 Segment 数组和 HashEntry 数组和链表组成</li><li>Segment 是基于重入锁（ReentrantLock）：一个数据段竞争锁。每个 HashEntry 一个链表结构的元素，利用 Hash 算法得到索引确定归属的数据段，也就是对应到在修改时需要竞争获取的锁。ConcurrentHashMap 支持 CurrencyLevel（Segment 数组数量）的线程并发。每当一个线程占用锁访问一个 Segment 时，不会影响到其他的 Segment</li><li>核心数据如 value，以及链表都是 volatile 修饰的，保证了获取时的可见性</li><li>首先是通过 key 定位到 Segment，之后在对应的 Segment 中进行具体的 put 操作如下：<ul><li>将当前 Segment 中的 table 通过 key 的 hashcode 定位到 HashEntry。</li><li>遍历该 HashEntry，如果不为空则判断传入的  key 和当前遍历的 key 是否相等，相等则覆盖旧的 value</li><li>不为空则需要新建一个 HashEntry 并加入到 Segment 中，同时会先判断是否需要扩容</li><li>最后会解除在 1 中所获取当前 Segment 的锁。</li></ul></li><li>虽然 HashEntry 中的 value 是用 volatile 关键词修饰的，但是并不能保证并发的原子性，所以 put 操作时仍然需要加锁处理</li></ul><p>首先第一步的时候会尝试获取锁，如果获取失败肯定就有其他线程存在竞争，则利用 scanAndLockForPut() 自旋获取锁。</p><ul><li>尝试自旋获取锁</li><li>如果重试的次数达到了 MAX_SCAN_RETRIES 则改为阻塞锁获取，保证能获取成功。最后解除当前 Segment 的锁</li></ul><h4 id="JDK1-8"><a href="#JDK1-8" class="headerlink" title="JDK1.8"></a>JDK1.8</h4><p>CocurrentHashMap 抛弃了原有的 Segment 分段锁，采用了 CAS + synchronized 来保证并发安全性。其中的 val next 都用了 volatile 修饰，保证了可见性。</p><p><strong>最大特点是引入了 CAS</strong></p><p>借助 Unsafe 来实现 native code。CAS有3个操作数，内存值 V、旧的预期值 A、要修改的新值 B。当且仅当预期值 A 和内存值 V 相同时，将内存值V修改为 B，否则什么都不做。Unsafe 借助 CPU 指令 cmpxchg 来实现。</p><p><strong>CAS 使用实例</strong></p><p>对 sizeCtl 的控制都是用 CAS 来实现的：</p><ul><li>-1 代表 table 正在初始化</li><li>N 表示有 -N-1 个线程正在进行扩容操作</li><li>如果 table 未初始化，表示table需要初始化的大小</li><li>如果 table 初始化完成，表示table的容量，默认是table大小的0.75倍，用这个公式算 0.75（n – (n &gt;&gt;&gt; 2)）</li></ul><p><strong>CAS 会出现的问题：ABA</strong></p><p>解决：对变量增加一个版本号，每次修改，版本号加 1，比较的时候比较版本号。</p><p><strong>put 过程</strong></p><ul><li>根据 key 计算出 hashcode</li><li>判断是否需要进行初始化</li><li>通过 key 定位出的 Node，如果为空表示当前位置可以写入数据，利用 CAS 尝试写入，失败则自旋保证成功</li><li>如果当前位置的 hashcode == MOVED == -1,则需要进行扩容</li><li>如果都不满足，则利用 synchronized 锁写入数据</li><li>如果数量大于 TREEIFY_THRESHOLD 则要转换为红黑树</li></ul><p><strong>get 过程</strong></p><ul><li>根据计算出来的 hashcode 寻址，如果就在桶上那么直接返回值</li><li>如果是红黑树那就按照树的方式获取值</li><li>就不满足那就按照链表的方式遍历获取值</li></ul><p><strong>Addition</strong></p><p>ConcurrentHashMap 在 Java 8 中存在一个 bug 会进入死循环，原因是递归创建 ConcurrentHashMap 对象，但是在 JDK 1.9 已经修复了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentHashMapDemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer,Integer&gt; cache =<span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">15</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        ConcurrentHashMapDemo ch =    <span class="keyword">new</span> ConcurrentHashMapDemo();</span><br><span class="line">        System.out.println(ch.fibonaacci(<span class="number">80</span>));        </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fibonaacci</span><span class="params">(Integer i)</span></span>&#123;        </span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>||i ==<span class="number">1</span>) &#123;                </span><br><span class="line">            <span class="keyword">return</span> i;        </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> cache.computeIfAbsent(i,(key) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"fibonaacci : "</span>+key);</span><br><span class="line">            <span class="keyword">return</span> fibonaacci(key -<span class="number">1</span>)+fibonaacci(key - <span class="number">2</span>);        </span><br><span class="line">        &#125;);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TreeMap-和-HashMap-的比较"><a href="#TreeMap-和-HashMap-的比较" class="headerlink" title="TreeMap 和 HashMap 的比较"></a>TreeMap 和 HashMap 的比较</h2><ul><li>TreeMap 是根据 key 进行排序的，它的排序和定位需要依赖比较器或覆写 Comparable 接口，也因此不需要 key 覆写 hashCode 方法和 equals 方法，就可以排除掉重复的 key，而 HashMap 的 key 则需要通过覆写 hashCode 方法和 equals 方法来确保没有重复的 key。</li><li>TreeMap 的查询、插入、删除效率均没有 HashMap 高，一般只有要对 key 排序时才使用 TreeMap。</li><li>TreeMap 的 key 不能为 null，而 HashMap 的 key 可以为 null。</li></ul><h2 id="LinkedHashMap-和-HashMap-的比较"><a href="#LinkedHashMap-和-HashMap-的比较" class="headerlink" title="LinkedHashMap 和 HashMap 的比较"></a>LinkedHashMap 和 HashMap 的比较</h2><p>LinkedHashMap 是 HashMap 的一个子类，保存了记录的插入顺序，在用 Iterator 遍历 LinkedHashMap 时，先得到的记录肯定是先插入的.也可以在构造时用带参数，按照应用次数排序。在遍历的时候会比 HashMap 慢，不过有种情况例外，当 HashMap 容量很大，实际数据较少时，遍历起来可能会比 LinkedHashMap 慢，因为 LinkedHashMap 的遍历速度只和实际数据有关，和容量无关，而 HashMap 的遍历速度和他的容量有关。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用设计模式简单总结</title>
      <link href="/2019/04/08/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/"/>
      <url>/2019/04/08/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Singleton-单例模式">Singleton 单例模式</a></li><li><a href="#Simple-Factory-简单工厂模式">Simple Factory 简单工厂模式</a></li><li><a href="#Proxy-代理模式">Proxy 代理模式</a></li><li><a href="#Decorator-装饰模式">Decorator 装饰模式</a></li><li><a href="#Adapter-适配器模式">Adapter 适配器模式</a></li><li><a href="#Strategy-策略模式">Strategy 策略模式</a></li><li><a href="#Observer-观察者模式">Observer 观察者模式</a></li></ul><p>创建型模式（五种）：<strong>单例模式、工厂方法模式</strong>、抽象工厂模式、建造者模式、原型模式<br>结构型模式（七种）：<strong>适配器模式、装饰器模式、代理模式</strong>、外观模式、桥接模式、组合模式、享元模式<br>行为型模式（十一种）：<strong>策略模式</strong>、模板方法模式、<strong>观察者模式</strong>、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p><h2 id="Singleton-单例模式"><a href="#Singleton-单例模式" class="headerlink" title="Singleton 单例模式"></a>Singleton 单例模式</h2><p>一个类在 Java 虚拟机中只有一个对象，并提供一个全局访问点。</p><p>生活中例子：太阳、月亮。</p><p>项目里面怎么用：数据库连接对象，属性配置文件的读取对象。</p><h4 id="懒汉式-线程不安全"><a href="#懒汉式-线程不安全" class="headerlink" title="懒汉式-线程不安全"></a>懒汉式-线程不安全</h4><p>以下实现中，私有静态变量 uniqueInstance 被延迟实例化，这样做的好处是，如果没有用到该类，那么就不会实例化 uniqueInstance，从而节约资源。</p><p>这个实现在多线程环境下是不安全的，如果多个线程能够同时进入 <code>if (uniqueInstance == null)</code> ，并且此时 uniqueInstance 为 null，那么会有多个线程执行 <code>uniqueInstance = new Singleton();</code> 语句，这将导致实例化多次 uniqueInstance。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getUniqueInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="饿汉式-线程安全"><a href="#饿汉式-线程安全" class="headerlink" title="饿汉式-线程安全"></a>饿汉式-线程安全</h4><p>线程不安全问题主要是由于 uniqueInstance 被实例化多次，采取直接实例化 uniqueInstance 的方式就不会产生线程不安全问题。</p><p>但是直接实例化的方式也丢失了延迟实例化带来的节约资源的好处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式单例类.在类初始化时，已经自行实例化   </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EagerSingleton</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> EagerSingleton instance = <span class="keyword">new</span> EagerSingleton();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 构造方法私有化</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">EagerSingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 静态工厂方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EagerSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Simple-Factory-简单工厂模式"><a href="#Simple-Factory-简单工厂模式" class="headerlink" title="Simple Factory 简单工厂模式"></a>Simple Factory 简单工厂模式</h2><p>用一个方法来代替new关键字。</p><p>在创建一个对象时不向客户暴露内部细节，并提供一个创建对象的通用接口。</p><p>项目里面怎么用：对于经常生成的对象，或者父子类替换的对象。spring的核心就是工厂模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span> </span>&#123;  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">createUser</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;  </span><br><span class="line"> <span class="comment">//如果输入的是1，就创建它的子类，否则就创建父类  </span></span><br><span class="line">         <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;  </span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">new</span> Alices();  </span><br><span class="line">          &#125;  </span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> User();  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Proxy-代理模式"><a href="#Proxy-代理模式" class="headerlink" title="Proxy 代理模式"></a>Proxy 代理模式</h2><p>为其他对象提供一个代理，以控制对当前对象的访问。</p><p>项目里面怎么用：权限，或者大对象的访问权限。</p><p>框架里面使用：Spring里面的AOP实现。</p><p>实现：设置一个顶级接口，被代理类和代理类都实现该接口。代理类里实例化被代理类，并且控制外界对被代理类对象的访问。</p><h2 id="Decorator-装饰模式"><a href="#Decorator-装饰模式" class="headerlink" title="Decorator 装饰模式"></a>Decorator 装饰模式</h2><p>为对象动态添加功能。</p><p>应用场景：IO 流包装、 数据源包装、 简历包装</p><h2 id="Adapter-适配器模式"><a href="#Adapter-适配器模式" class="headerlink" title="Adapter 适配器模式"></a>Adapter 适配器模式</h2><p>把一个类接口转换成另一个用户需要的接口。</p><p>生活中的例子：转换插头</p><p>框架里面使用：Spring AOP 模块对 BeforeAdvice、 AfterAdvice、 ThrowsAdvice 三种通知类型的支持实际上是借助适配器模式来实现的</p><ul><li>java.util.Collections#list()</li></ul><h2 id="Strategy-策略模式"><a href="#Strategy-策略模式" class="headerlink" title="Strategy 策略模式"></a>Strategy 策略模式</h2><p>定义一系列算法并可以互相替换。</p><p>生活中的例子：图片的格式，压缩文件的格式。</p><p>项目里面怎么用：购物车里面的付款方式。</p><p>实现：设置一个顶级接口，各子类分别在实现接口方法时重写该方法。</p><h2 id="Observer-观察者模式"><a href="#Observer-观察者模式" class="headerlink" title="Observer 观察者模式"></a>Observer 观察者模式</h2><p>定义对象之间的一对多依赖，当一个对象状态改变时，它的所有依赖都会收到通知并且自动更新状态。</p><p>应用场景：监听器、日志收集、短信通知、邮件通知</p><ul><li>javax.servlet.http.HttpSessionBindingListener</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java虚拟机</title>
      <link href="/2019/04/06/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2019/04/06/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>整理自 <a href="https://github.com/CyC2018/CS-Notes" target="_blank" rel="noopener">CyC2018</a> 大神的笔记，以及周志明老师的《深入理解 Java 虚拟机》</p><a id="more"></a><ul><li><a href="#一、Java-内存区域与内存溢出异常">一、Java 内存区域与内存溢出异常</a><ul><li><a href="#运行时数据区域">运行时数据区域</a><ul><li><a href="#程序计数器">程序计数器</a></li><li><a href="#Java-虚拟机栈">Java 虚拟机栈</a></li><li><a href="#Java-堆">Java 堆</a></li><li><a href="#方法区">方法区</a></li><li><a href="#运行时常量池">运行时常量池</a></li><li><a href="#直接内存">直接内存</a></li></ul></li><li><a href="#HotSpot-虚拟机对象探秘">HotSpot 虚拟机对象探秘</a><ul><li><a href="#创建对象">创建对象</a></li><li><a href="#对象的内存布局">对象的内存布局</a></li><li><a href="#对象的访问定位">对象的访问定位</a></li></ul></li><li><a href="#OutOfMemoryError-内存溢出异常(OOM">OutOfMemoryError 内存溢出异常(OOM)</a>)<ul><li><a href="#Java-堆溢出">Java 堆溢出</a></li><li><a href="#虚拟机栈和本地方法栈溢出">虚拟机栈和本地方法栈溢出</a></li><li><a href="#方法区和运行时常量池溢出">方法区和运行时常量池溢出</a></li><li><a href="#本机内存直接溢出">本机内存直接溢出</a></li><li><a href="#PS：StackOverflowError异常">PS：StackOverflowError异常</a></li></ul></li></ul></li><li><a href="#二、垃圾收集器">二、垃圾收集器</a><ul><li><a href="#判断一个对象是否可被回收">判断一个对象是否可被回收</a><ul><li><a href="#1-引用计数算法">1. 引用计数算法</a></li><li><a href="#2-可达性分析算法">2. 可达性分析算法</a></li><li><a href="#3-方法区的回收">3. 方法区的回收</a></li><li><a href="#4-finalize">4. finalize()</a></li><li><a href="引用类型">引用类型</a></li></ul></li><li><a href="#垃圾收集算法">垃圾收集算法</a><ul><li><a href="#1-标记-清除算法-Mark-Sweep">1.标记 - 清除算法(Mark - Sweep)</a></li><li><a href="#2-标记-整理算法-Mark-Compact">2.标记 - 整理算法(Mark - Compact)</a></li><li><a href="#3-复制算法-Copying">3.复制算法(Copying)</a></li><li><a href="#4-分代收集算法-Generational-Collection">4.分代收集算法(Generational Collection)</a></li></ul></li><li><a href="#垃圾收集器">垃圾收集器</a><ul><li><a href="#1-Serial-收集器">1. Serial 收集器</a></li><li><a href="#2-ParNew-收集器">2. ParNew 收集器</a></li><li><a href="#3-Parallel-Scavenge-收集器">3. Parallel Scavenge 收集器</a></li><li><a href="#4-Serial-Old-收集器">4. Serial Old 收集器</a></li><li><a href="#5-Parallel-Old-收集器">5. Parallel Old 收集器</a></li><li><a href="#6-CMS-收集器">6. CMS 收集器</a></li><li><a href="#7-G1-收集器">7. G1 收集器</a></li></ul></li></ul></li><li><a href="#三、内存分配和回收策略">三、内存分配和回收策略</a><ul><li><a href="#Minor-GC-和-Full-GC">Minor GC 和 Full GC</a></li><li><a href="#内存分配策略">内存分配策略</a><ul><li><a href="#1-对象优先在-Eden-分配">1. 对象优先在 Eden 分配</a></li><li><a href="#2-大对象直接进入老年代">2. 大对象直接进入老年代</a></li><li><a href="#3-长期存活的对象进入老年代">3. 长期存活的对象进入老年代</a></li><li><a href="#4-动态对象年龄判定">4. 动态对象年龄判定</a></li><li><a href="#5-空间分配担保">5. 空间分配担保</a></li></ul></li><li><a href="#Full-GC-的触发条件">Full GC 的触发条件</a><ul><li><a href="#1-调用-System-gc">1. 调用 System.gc()</a></li><li><a href="#2-老年代空间不足">2. 老年代空间不足</a></li><li><a href="#3-空间分配担保失败">3. 空间分配担保失败</a></li><li><a href="#4-JDK-1.7-及以前的永久代空间不足">4. JDK 1.7 及以前的永久代空间不足</a></li><li><a href="#5-空间分配担保">5. 空间分配担保</a></li></ul></li></ul></li><li><a href="#四、类加载机制">四、类加载机制</a><ul><li><a href="#类的生命周期">类的生命周期</a></li><li><a href="#类加载过程">类加载过程</a><ul><li><a href="#1-加载">1. 加载</a></li><li><a href="#2-验证">2. 验证</a></li><li><a href="#3-准备">3. 准备</a></li><li><a href="#4-解析">4. 解析</a></li><li><a href="#5-初始化">5. 初始化</a></li></ul></li><li><a href="#类初始化时机">类初始化时机</a><ul><li><a href="#1-主动引用">1. 主动引用</a></li><li><a href="#2-被动引用">2. 被动引用</a></li></ul></li><li><a href="#类与类加载器">类与类加载器</a></li><li><a href="#类加载器分类">类加载器分类</a></li><li><a href="#双亲委派模型">双亲委派模型</a><ul><li><a href="#1-工作过程">1. 工作过程</a></li><li><a href="#2-好处">2. 好处</a></li><li><a href="#3-实现">3. 实现</a></li></ul></li><li><a href="#自定义类加载器实现">自定义类加载器实现</a></li></ul></li><li><a href="#五、Java-内存模型与线程">五、Java 内存模型与线程</a><ul><li><a href="#硬件与效率的一致性">硬件与效率的一致性</a></li><li><a href="#Java-内存模型">Java 内存模型</a><ul><li><a href="#主内存与工作内存">主内存与工作内存</a></li><li><a href="#内存间交互操作">内存间交互操作</a></li><li><a href="#内存模型三大特性">内存模型三大特性</a></li><li><a href="#先行发生原则">先行发生原则</a></li></ul></li><li><a href="#Java-与线程">Java 与线程</a><ul><li><a href="#线程的实现">线程的实现</a></li><li><a href="#Java-线程调度">Java 线程调度</a></li><li><a href="#状态转换">状态转换</a></li></ul></li></ul></li><li><a href="#六、线程安全">六、线程安全</a><ul><li><a href="#五类各种操作共享的数据">五类各种操作共享的数据</a><ul><li><a href="#不可变">不可变</a></li><li><a href="#绝对线程安全">绝对线程安全</a></li><li><a href="#相对线程安全">相对线程安全</a></li><li><a href="#线程兼容">线程兼容</a></li><li><a href="线程对立">线程对立</a></li></ul></li><li><a href="#线程安全的实现">线程安全的实现</a><ul><li><a href="#1-不可变">1. 不可变</a></li><li><a href="#2-互斥同步">2. 互斥同步</a></li><li><a href="#3-非阻塞同步">3. 非阻塞同步</a></li><li><a href="#4-无同步方案">4. 无同步方案</a></li></ul></li></ul></li><li><a href="#七、锁优化">七、锁优化</a><ul><li><a href="自旋锁">自旋锁</a></li><li><a href="#锁消除">锁消除</a></li><li><a href="#锁粗化">锁粗化</a></li><li><a href="#轻量级锁">轻量级锁</a></li><li><a href="#偏向锁">偏向锁</a></li></ul></li></ul><h1 id="一、Java-内存区域与内存溢出异常"><a href="#一、Java-内存区域与内存溢出异常" class="headerlink" title="一、Java 内存区域与内存溢出异常"></a>一、Java 内存区域与内存溢出异常</h1><h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><p><img src="http://qnya.pomo16.club/161.png" alt></p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>程序计数器 (Program Counter Register) 是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。<br>记录正在执行的虚拟机字节码指令的地址（如果正在执行的是本地方法则为空）。</p><h3 id="Java-虚拟机栈"><a href="#Java-虚拟机栈" class="headerlink" title="Java 虚拟机栈"></a>Java 虚拟机栈</h3><p>虚拟机栈描述的是 Java 方法执行的内存模型：每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。<br><img src="http://qnya.pomo16.club/162.png" alt><br>可以通过 -Xss 这个虚拟机参数来指定每个线程的 Java 虚拟机栈内存大小：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xss512M HackTheJava</span><br></pre></td></tr></table></figure><p>该区域可能抛出以下异常：</p><ul><li>当线程请求的栈深度超过最大值，会抛出 StackOverflowError 异常；</li><li>栈进行动态扩展时如果无法申请到足够内存，会抛出 OutOfMemoryError 异常。</li></ul><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈 (Native Method Stack) 与虚拟机栈作用类似，只不过虚拟机栈为虚拟机提供执行 Java 方法(也就是字节码)的服务，而本地方法栈为虚拟机使用到的 Native 方法提供服务。</p><p>本地方法一般是用其它语言（C、C++ 或汇编语言等）编写的，并且被编译为基于本机硬件和操作系统的程序，对待这些方法需要特别处理。下图中 JNI 为 Java Native Interface。</p><p><img src="http://qnya.pomo16.club/163.png" alt></p><p>该区域可能抛出以下异常： StackOverflowError 异常和 OutOfMemoryError 异常。</p><h3 id="Java-堆"><a href="#Java-堆" class="headerlink" title="Java 堆"></a>Java 堆</h3><p>Java 堆 (Java Heap) 是 Java 虚拟机所管理的内存中最大的一块，是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</p><p>Java 堆是垃圾收集器管理的主要区域，因此也被称为 “GC堆” (Garbage Collected Heap)。</p><p>现代的垃圾收集器基本都是采用分代收集算法，其主要的思想是针对不同类型的对象采取不同的垃圾回收算法。可以将堆分成两块：</p><ul><li>新生代（Young Generation）</li><li>老年代（Old Generation）</li></ul><p>堆不需要连续内存空间，并且可以动态增加其内存，增加失败会抛出 OutOfMemoryError 异常。</p><p>可以通过 -Xms 和 -Xmx 这两个虚拟机参数来指定一个程序的堆内存大小，第一个参数设置初始值，第二个参数设置最大值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xms1M -Xmx2M HackTheJava</span><br></pre></td></tr></table></figure><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区 (Method Area) 与 Java 堆一样，是被各个线程所共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p>和堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 OutOfMemoryError 异常。</p><p>对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较难实现。</p><p>HotSpot 虚拟机把它当成永久代来进行垃圾回收。但很难确定永久代的大小，因为它受到很多因素影响，并且每次 Full GC 之后永久代的大小都会改变，所以经常会抛出 OutOfMemoryError 异常。为了更容易管理方法区，从 JDK 1.8 开始，移除永久代，并把方法区移至元空间，它位于本地内存中，而不是虚拟机内存中。</p><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>运行时常量池 (Runtime Constant Pool) 是方法区的一部分。</p><p>Class 文件中的常量池（编译器生成的字面量和符号引用）会在类加载后被放入这个区域。</p><p>除了在编译期生成的常量，还允许动态生成，例如 String 类的 intern()。</p><p>受限于方法区，当常量池无法再申请到内存时会抛出  OutOfMemoryError 异常。</p><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>直接内存 (Direct Memory) 并非虚拟机运行时数据区的一部分，在 JDK 1.4 中新引入了 NIO 类，它可以使用 Native 函数库直接分配堆外内存，然后通过 Java 堆里的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在堆内存和堆外内存来回拷贝数据。</p><h2 id="HotSpot-虚拟机对象探秘"><a href="#HotSpot-虚拟机对象探秘" class="headerlink" title="HotSpot 虚拟机对象探秘"></a>HotSpot 虚拟机对象探秘</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><ol><li>虚拟机遇到一条 new 指令时，首先检查这个指令参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化，如果没有将先进行该类的加载。</li><li>为新生对象分配内存，对象所占内存的大小其实在类加载完成后就可以确定的。这里相当于把一块确定大小的内存从 Java 堆划分出来，分配方式大致可分为：指针碰撞 (Bump the Pointer) 和空闲列表 (Free List) 两种。</li><li>接下来虚拟机要对对象进行必要的设置，如该对象是哪个类的实例、如何才能找到该类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息，这些信息全部存在于对象头中（Object Header）。</li><li>执行 init 方法，即对象初始化。经过上面几步之后一个新的对象已经产生了，但所有字段还都为零，执行 init 方法是为了将对象按照程序员的意愿进行初始化，这样一个真正的可用对象才算完全生产出来。</li></ol><h3 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h3><p>在 HotSpot 虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（Header）、实例数据（Instance Data）和对齐信息（Padding）。</p><h4 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h4><p>对象头分为两个部分</p><ul><li>第一部分：Mark Word<ul><li>用于存储对象自身的运行时数据，如哈希码、GC 分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等。</li><li>Mark Word数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为 32bit 和 64bit。</li><li>GC分代年龄<br>HotSpot使用分代垃圾回收机制，被分为三个代：年轻代（Young Generation）、年老代（Old Generation）和永久代（Permanent Generation）。(注意：Java8 去除了持久代)</li><li>锁状态标志<br>Mark Word 的最后 2bit 是锁状态标志位，用来标记当前对象的状态。对象的所处的状态决定了 Mark Word 存储的内容，如下表所示:</li></ul></li></ul><table><thead><tr><th>存储内容</th><th>标志位</th><th>状态</th></tr></thead><tbody><tr><td>对象哈希码、对象分代年龄</td><td>01</td><td>未锁定</td></tr><tr><td>指向锁记录的指针</td><td>00</td><td>轻量级锁定</td></tr><tr><td>执行重量级锁定的指针</td><td>10</td><td>膨胀(重量级锁定)</td></tr><tr><td>空(不需要记录信息)</td><td>11</td><td>GC标记</td></tr><tr><td>偏向线程ID、偏向时间戳、对象分代年龄</td><td>01</td><td>可偏向</td></tr></tbody></table><ul><li>第二部分：类型指针<ul><li>对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</li></ul></li></ul><h4 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h4><p>实例数据是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。</p><h4 id="对齐补充"><a href="#对齐补充" class="headerlink" title="对齐补充"></a>对齐补充</h4><p>不必然存在，也没有特别的含义，仅仅起了占位符的作用。HotSpot VM 规定对象的大小必须是8字节的整数倍，当对象实例数据没有对齐时，需要对齐填充补全。</p><h3 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h3><p>目前主流的访问方式有使用句柄和直接指针两种。</p><p><strong>通过句柄访问对象</strong><br><img src="http://qnya.pomo16.club/164.png" alt></p><p><strong>通过直接指针访问对象</strong><br><img src="http://qnya.pomo16.club/165.png" alt></p><h2 id="OutOfMemoryError-内存溢出异常-OOM"><a href="#OutOfMemoryError-内存溢出异常-OOM" class="headerlink" title="OutOfMemoryError 内存溢出异常(OOM)"></a>OutOfMemoryError 内存溢出异常(OOM)</h2><h3 id="Java-堆溢出"><a href="#Java-堆溢出" class="headerlink" title="Java 堆溢出"></a>Java 堆溢出</h3><p>原因：Java堆用于储存对象实例，只要不断的创建对象，并且保证 GC Roots 到对象之间有可达路径来避免垃圾回收机制清除这些对象，那么在对象占用空间到最大堆的容量限制后就会产生 OOM。</p><p>溢出判断：异常栈信息 “java.lang.OutOfMemoryError” 后面会提示 “Java heap space” 。</p><p>处理方法：</p><ol><li>通过参数 -XX:+HeapDumpOnOutOfMemoryError，可以让虚拟机在出现内存溢出时 Dump 出当前的内存堆转储快照。 </li><li>用内存映像分析工具（如：Eclipse Memory Analyzer）对Dump出来的堆转储快照进行分析。找出原因是内存泄漏（Memory Leak）还是内存溢出（Memory Overflow）。</li><li>如为内存泄漏（Memory Leak），则通过工具查看对象到 GC Roots 的引用链，找出泄漏对象是通过怎样的路径与 GC Roots 相关联并导致垃圾收集器无法自动回收。掌握了泄漏对象的类型信息及 GC Roots 引用链的信息后，就可以比较准确的定位出泄漏代码的位置，进行修改。</li><li>如为内存溢出（Memory Overflow），则说明内存中的对象都是有用的对象，必须存活着。改进方法：<ul><li>根据机器物理内存调整虚拟机堆参数(-Xmx(堆最大值) 和 -Xms(最小值))，来扩大堆内存。                                                                         </li><li>检查代码中是否存在某些对象生命周期过长、持有状态时间过长等情况，减少程序运行期的内存消耗。</li></ul></li></ol><h3 id="虚拟机栈和本地方法栈溢出"><a href="#虚拟机栈和本地方法栈溢出" class="headerlink" title="虚拟机栈和本地方法栈溢出"></a>虚拟机栈和本地方法栈溢出</h3><p>原因：建立过多线程导致内存溢出 OOM。操作系统分配给每个进程的内存空间是有限的，每个线程分配到的栈容量越大，可以建立的线程数就越少，建立线程时容易把空间耗尽，出现 OOM。分配给虚拟机栈和本地方法栈的内存空间是从剩余空间中瓜分的。剩余空间 = 机器总内存 - Java最大容量堆(Xmx) - 最大方法区容量(MaxPermSize) - 程序计数器消耗(很小) - 虚拟机进程本身消耗。 </p><p>PS：虚拟机只提供了用户对 Java 堆和方法区这两块内存区域的管理方法（提供相应参数调整内存大小），其他的内存区域由操作系统管理。</p><p>溢出判断：异常栈信息 “java.lang.OutOfMemoryError” 后面跟着会提供具体原因，比如：unable to create new native thread。</p><p>处理方法：在不能减少线程数和更换64位虚拟机的情况下，只能通过减小 Java 堆的最大堆容量和方法区的容量来换取更多的线程可利用的空间-虚拟机栈。这种方式称之为“减少内存”。</p><h3 id="方法区和运行时常量池溢出"><a href="#方法区和运行时常量池溢出" class="headerlink" title="方法区和运行时常量池溢出"></a>方法区和运行时常量池溢出</h3><p>原因： </p><ul><li>运行时常量池溢出，比如使用 List 保持对常量池引用，避免 FullGC 回收常量池，导致常量池 OOM。</li><li>方法区用于存放 Class 的相关信息，运行时当大量的类需要加载，把方法区填满后，就会发生 OOM。</li></ul><p>溢出判断：抛 OutOfMemoryError 异常，后面提示 PermGen space。</p><p>方法区填满溢出场景： a、主流框架 Spring、Hibernate (经常动态生成大量 Class 的应用)在对类进行增强时，会使用 GCLib 这类字节码增强技术，增强的类越多，就需要越大的方法区来保证动态生成的 Class 可以加载入内存。PS：CGLib 对类增强：运行中以该类作为父类生成该类的动态代理子类，动态代理子类中可以添加方法达到增强类的效果。 b、运行在 JVM 上的动态语言(如 Groovy)、大量 JSP 或者动态产生 JSP 文件的应用(JSP 第一次运行时需要编译为 Java 类)、基于 OSGi 的应用(即使是同一类文件，被不同的加载器加载也会视为不同的类)。</p><p>处理方法：经常动态生成大量 Class 的应用中，应该特别注意类的回收，由于一个类是否要被垃圾回收器回收掉，判定条件比较苛刻，所以方法区溢出是一种常见的内存溢出异常。</p><h3 id="本机内存直接溢出"><a href="#本机内存直接溢出" class="headerlink" title="本机内存直接溢出"></a>本机内存直接溢出</h3><p>DirectMemory 容量可通过 -XX:MaxDirectMemorySize 指定，如果不指定，则默认与 Java 堆的最大值 (-Xmx) 一样。由 DirectMemory 导致的内存溢出不会在 Heap Dump 中看到明显异常。如果发现 OOM 之后 Dump 文件很小，而程序中又直接或间接使用了 NIO，则可以考虑一下这个溢出情况。</p><h3 id="PS：StackOverflowError异常"><a href="#PS：StackOverflowError异常" class="headerlink" title="PS：StackOverflowError异常"></a>PS：StackOverflowError异常</h3><p>原因：在单线程的情况下，当栈帧太大或者虚拟机栈容量太小，持续调用方法，向栈中放入栈帧导致线程所请求的栈深度大于虚拟机允许的最大栈深度时，虚拟机抛出 StackOverflowError。</p><p>解决方案：出现 StackOverflowError 异常时有错误堆栈可以阅读，直接查看抛出的异常信息，能够比较容易找到问题所在。 </p><p>PS：虚拟机的默认设置下，栈深度在大多数情况下达到1000-2000万完全没有问题，对于正常的方法调用（包括递归），这个深度是够用的。</p><h1 id="二、垃圾收集器"><a href="#二、垃圾收集器" class="headerlink" title="二、垃圾收集器"></a>二、垃圾收集器</h1><p>垃圾收集主要是针对堆和方法区进行。程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后就会消失，因此不需要对这三个区域进行垃圾回收。</p><h2 id="判断一个对象是否可被回收"><a href="#判断一个对象是否可被回收" class="headerlink" title="判断一个对象是否可被回收"></a>判断一个对象是否可被回收</h2><h3 id="1-引用计数算法"><a href="#1-引用计数算法" class="headerlink" title="1. 引用计数算法"></a>1. 引用计数算法</h3><p>为对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。</p><p>在两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。正是因为循环引用的存在，因此 Java 虚拟机不使用引用计数算法。</p><h3 id="2-可达性分析算法"><a href="#2-可达性分析算法" class="headerlink" title="2. 可达性分析算法"></a>2. 可达性分析算法</h3><p><img src="http://qnya.pomo16.club/166.png" alt></p><p>以 GC Roots 为起始点进行搜索，可达的对象都是存活的，不可达的对象可被回收。</p><p>Java 虚拟机使用该算法来判断对象是否可被回收，GC Roots 一般包含以下内容：</p><ul><li>虚拟机栈(栈帧中的本地变量表)中引用的对象</li><li>本地方法栈中 JNI (即一般说的 Native 方法)中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li></ul><h3 id="3-方法区的回收"><a href="#3-方法区的回收" class="headerlink" title="3. 方法区的回收"></a>3. 方法区的回收</h3><p>因为方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，所以在方法区上进行回收性价比不高。</p><p>主要是对常量池的回收和对类的卸载，回收废弃常量和无用的类。</p><p>为了避免内存溢出，在大量使用反射和动态代理的场景都需要虚拟机具备类卸载功能。</p><p>类的卸载条件很多，需要满足以下三个条件，并且满足了条件也不一定会被卸载：</p><ul><li>该类所有的实例都已经被回收，此时堆中不存在该类的任何实例。</li><li>加载该类的 ClassLoader 已经被回收。</li><li>该类对应的 Class 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。</li></ul><h3 id="4-finalize"><a href="#4-finalize" class="headerlink" title="4. finalize()"></a>4. finalize()</h3><p>类似 C++ 的析构函数，用于关闭外部资源。但是 try-finally 等方式可以做得更好，并且该方法运行代价很高，不确定性大，无法保证各个对象的调用顺序，因此最好不要使用。</p><p>当一个对象可被回收时，如果需要执行该对象的 finalize() 方法，那么就有可能在该方法中让对象重新被引用，从而实现自救。自救只能进行一次，如果回收的对象之前调用了 finalize() 方法自救，后面回收时不会再调用该方法。 </p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象是否可达，判定对象是否可被回收都与引用有关。</p><p>Java 提供了四种强度不同的引用类型。</p><h4 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h4><p>只要强引用还存在，被强引用关联的对象就不会被回收，使用 new 一个新对象的方式来创建强引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><h4 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h4><p>被软引用关联的对象只有在内存不够的情况下才会被回收。使用 SoftReference 类来创建软引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">SoftReference&lt;Object&gt; sf = <span class="keyword">new</span> SoftReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>;  <span class="comment">// 使对象只被软引用关联</span></span><br></pre></td></tr></table></figure><h4 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h4><p>被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾回收发生之前。使用 WeakReference 类来创建弱引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">WeakReference&lt;Object&gt; wf = <span class="keyword">new</span> WeakReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h4 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h4><p>又称为幽灵引用或者幻影引用，一个对象是否有虚引用的存在，不会对其生存时间造成影响，也无法通过虚引用得到一个对象。为一个对象设置虚引用的唯一目的是能在这个对象被回收时收到一个系统通知。</p><p>使用  PhantomReference 来创建虚引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">PhantomReference&lt;Object&gt; pf = <span class="keyword">new</span> PhantomReference&lt;Object&gt;(obj, <span class="keyword">null</span>);</span><br><span class="line">obj = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="1-标记-清除算法-Mark-Sweep"><a href="#1-标记-清除算法-Mark-Sweep" class="headerlink" title="1.标记 - 清除算法(Mark - Sweep)"></a>1.标记 - 清除算法(Mark - Sweep)</h3><p><img src="http://qnya.pomo16.club/167.png" alt></p><p>标记要回收的对象，然后清除。</p><p>不足：</p><ul><li>效率问题：标记和清除过程效率都不高；</li><li>空间问题：会产生大量不连续的内存碎片，导致无法给大对象分配内存。</li></ul><h3 id="2-标记-整理算法-Mark-Compact"><a href="#2-标记-整理算法-Mark-Compact" class="headerlink" title="2.标记 - 整理算法(Mark - Compact)"></a>2.标记 - 整理算法(Mark - Compact)</h3><p><img src="http://qnya.pomo16.club/168.png" alt></p><p>让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><p>优点：不会产生内存碎片</p><p>不足：需要移动大量对象，处理效率比较低。</p><h3 id="3-复制算法-Copying"><a href="#3-复制算法-Copying" class="headerlink" title="3.复制算法(Copying)"></a>3.复制算法(Copying)</h3><p><img src="http://qnya.pomo16.club/169.png" alt></p><p>将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。</p><p>主要不足是只使用了内存的一半。</p><p>现在的商业虚拟机都采用这种收集算法回收新生代，但是并不是划分为大小相等的两块，而是一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 和其中一块 Survivor。在回收时，将 Eden 和 Survivor 中还存活着的对象全部复制到另一块 Survivor 上，最后清理 Eden 和使用过的那一块 Survivor。</p><p>HotSpot 虚拟机的 Eden 和 Survivor 大小比例默认为 8:1，保证了内存的利用率达到 90%。如果每次回收有多于 10% 的对象存活，那么一块 Survivor 就不够用了，此时需要依赖于老年代进行空间分配担保，也就是借用老年代的空间存储放不下的对象。</p><h3 id="4-分代收集算法-Generational-Collection"><a href="#4-分代收集算法-Generational-Collection" class="headerlink" title="4.分代收集算法(Generational Collection)"></a>4.分代收集算法(Generational Collection)</h3><p>现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。</p><p>一般将堆分为新生代和老年代。</p><ul><li>新生代使用：复制算法</li><li>老年代使用：标记 - 清除 或者 标记 - 整理 算法</li></ul><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p><img src="http://qnya.pomo16.club/170.png" alt></p><p>以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。</p><ul><li>单线程与多线程：单线程指的是垃圾收集器只使用一个线程，而多线程使用多个线程；</li><li>串行与并行：串行指的是垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集的时候需要停顿用户程序；并行指的是垃圾收集器和用户程序同时执行。除了 CMS 和 G1 之外，其它垃圾收集器都是以串行的方式执行。</li></ul><h3 id="1-Serial-收集器"><a href="#1-Serial-收集器" class="headerlink" title="1. Serial 收集器"></a>1. Serial 收集器</h3><p><img src="http://qnya.pomo16.club/171.png" alt></p><p>Serial 翻译为串行，也就是说它以串行的方式执行。</p><p>它是单线程的收集器，只会使用一个线程进行垃圾收集工作。</p><p>它的优点是简单高效，在单个 CPU 环境下，由于没有线程交互的开销，因此拥有最高的单线程收集效率。</p><p>它是 Client 场景下的默认新生代收集器，因为在该场景下内存一般来说不会很大。它收集一两百兆垃圾的停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿时间是可以接受的。</p><h3 id="2-ParNew-收集器"><a href="#2-ParNew-收集器" class="headerlink" title="2. ParNew 收集器"></a>2. ParNew 收集器</h3><p><img src="http://qnya.pomo16.club/172.png" alt></p><p>它是 Serial 收集器的多线程版本。</p><p>它是 Server 场景下默认的新生代收集器，除了性能原因外，主要是因为除了 Serial 收集器，只有它能与 CMS 收集器配合使用。</p><h3 id="3-Parallel-Scavenge-收集器"><a href="#3-Parallel-Scavenge-收集器" class="headerlink" title="3. Parallel Scavenge 收集器"></a>3. Parallel Scavenge 收集器</h3><p>与 ParNew 一样是多线程收集器。</p><p>其它收集器目标是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，因此它被称为“吞吐量优先”收集器。这里的吞吐量指 CPU 用于运行用户程序的时间占总时间的比值，即吞吐量 = 运行用户代码时间 / (运行用户代码时间 + 垃圾回收时间)。</p><p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，适合在后台运算而不需要太多交互的任务。</p><p>缩短停顿时间是以牺牲吞吐量和新生代空间来换取的：新生代空间变小，垃圾回收变得频繁，导致吞吐量下降。</p><p>可以通过一个开关参数打开 GC 自适应的调节策略（GC Ergonomics），就不需要手工指定新生代的大小（-Xmn）、Eden 和 Survivor 区的比例、晋升老年代对象年龄等细节参数了。虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。</p><h3 id="4-Serial-Old-收集器"><a href="#4-Serial-Old-收集器" class="headerlink" title="4. Serial Old 收集器"></a>4. Serial Old 收集器</h3><p><img src="http://qnya.pomo16.club/173.png" alt></p><p>是 Serial 收集器的老年代版本，使用单线程和”标记 - 整理”算法，也是给 Client 场景下的虚拟机使用。如果用在 Server 场景下，它有两大用途：</p><ul><li>在 JDK 1.5 以及之前版本（Parallel Old 诞生以前）中与 Parallel Scavenge 收集器搭配使用。</li><li>作为 CMS 收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用。</li></ul><h3 id="5-Parallel-Old-收集器"><a href="#5-Parallel-Old-收集器" class="headerlink" title="5. Parallel Old 收集器"></a>5. Parallel Old 收集器</h3><p><img src="http://qnya.pomo16.club/174.png" alt></p><p>是 Parallel Scavenge 收集器的老年代版本，使用多线程和”标记 - 整理”算法。</p><p>在注重吞吐量以及 CPU 资源敏感的场合，都可以优先考虑 Parallel Scavenge 加 Parallel Old 收集器。</p><h3 id="6-CMS-收集器"><a href="#6-CMS-收集器" class="headerlink" title="6. CMS 收集器"></a>6. CMS 收集器</h3><p><img src="http://qnya.pomo16.club/175.png" alt></p><p>CMS（Concurrent Mark Sweep）是一种以获取最短回收停顿时间为目标的收集器，Mark Sweep 指的是标记 - 清除算法。</p><p>分为以下四个流程：</p><ul><li>初始标记：仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿。</li><li>并发标记：进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。</li><li>重新标记：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。</li><li>并发清除：不需要停顿。</li></ul><p>在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。</p><p>具有以下缺点：</p><ul><li>吞吐量低：低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。</li><li>无法处理浮动垃圾，可能出现 Concurrent Mode Failure。浮动垃圾是指并发清除阶段由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次 GC 时才能进行回收。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着 CMS 收集不能像其它收集器那样等待老年代快满的时候再回收。如果预留的内存不够存放浮动垃圾，就会出现 Concurrent Mode Failure，这时虚拟机将临时启用 Serial Old 来替代 CMS。</li><li>标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。</li></ul><h3 id="7-G1-收集器"><a href="#7-G1-收集器" class="headerlink" title="7. G1 收集器"></a>7. G1 收集器</h3><p>G1（Garbage-First），它是一款面向服务端应用的垃圾收集器，在多 CPU 和大内存的场景下有很好的性能。HotSpot 开发团队赋予它的使命是未来可以替换掉 CMS 收集器。</p><p>堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代，而 G1 可以直接对新生代和老年代一起回收。<br><img src="http://qnya.pomo16.club/176.png" alt><br>G1 把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。<br><img src="http://qnya.pomo16.club/177.png" alt><br>通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间（这两个值是通过过去回收的经验获得），并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。</p><p>每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的 Region。通过使用 Remembered Set，在做可达性分析的时候就可以避免全堆扫描。</p><p><img src="http://qnya.pomo16.club/178.png" alt></p><p>如果不计算维护 Remembered Set 的操作，G1 收集器的运作大致可划分为以下几个步骤：</p><ul><li>初始标记</li><li>并发标记</li><li>最终标记：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。</li><li>筛选回收：首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。</li></ul><p>具备如下特点：</p><ul><li>并行与并发：G1 能充分利用多 CPU、多核环境下的硬件优势，使用多个 CPU 或 CPU 核心来缩短停顿时间，部分其他收集器原本需要停顿 Java 线程执行的 GC 动作，G1 收集器仍然可以通过并发地方式让 Java 程序继续执行。 </li><li>分代收集：分代概念在 G1 中得以保留。</li><li>空间整合：整体来看是基于“标记 - 整理”算法实现的收集器，从局部（两个 Region 之间）上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。</li><li>可预测的停顿：能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。</li></ul><h1 id="三、内存分配和回收策略"><a href="#三、内存分配和回收策略" class="headerlink" title="三、内存分配和回收策略"></a>三、内存分配和回收策略</h1><h2 id="Minor-GC-和-Full-GC"><a href="#Minor-GC-和-Full-GC" class="headerlink" title="Minor GC 和 Full GC"></a>Minor GC 和 Full GC</h2><ul><li>Minor GC：回收新生代，因为新生代对象存活时间很短，因此 Minor GC 会频繁执行，执行的速度一般也会比较快。</li><li>Full GC：回收老年代和新生代，老年代对象其存活时间长，因此 Full GC 很少执行，执行速度会比 Minor GC 慢很多。</li></ul><h2 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h2><h3 id="1-对象优先在-Eden-分配"><a href="#1-对象优先在-Eden-分配" class="headerlink" title="1. 对象优先在 Eden 分配"></a>1. 对象优先在 Eden 分配</h3><p>大多数情况下，对象在新生代 Eden 上分配，当 Eden 空间不够时，发起 Minor GC。</p><h3 id="2-大对象直接进入老年代"><a href="#2-大对象直接进入老年代" class="headerlink" title="2. 大对象直接进入老年代"></a>2. 大对象直接进入老年代</h3><p>大对象是指需要连续内存空间的对象，最典型的大对象是那种很长的字符串以及数组。</p><p>经常出现大对象会提前触发垃圾收集以获取足够的连续空间分配给大对象。</p><p>-XX:PretenureSizeThreshold，大于此值的对象直接在老年代分配，避免在 Eden 和 Survivor 之间的大量内存复制。</p><h3 id="3-长期存活的对象进入老年代"><a href="#3-长期存活的对象进入老年代" class="headerlink" title="3. 长期存活的对象进入老年代"></a>3. 长期存活的对象进入老年代</h3><p>为对象定义年龄计数器，对象在 Eden 出生并经过一次 Minor GC 后依然存活，并且能被 Survivor 容纳的话，将移动到 Survivor 中，年龄就增加 1 岁，增加到一定年龄(默认15岁)则移动到老年代中。</p><p>-XX:MaxTenuringThreshold 用来定义年龄的阈值。</p><h3 id="4-动态对象年龄判定"><a href="#4-动态对象年龄判定" class="headerlink" title="4. 动态对象年龄判定"></a>4. 动态对象年龄判定</h3><p>虚拟机并不是永远要求对象的年龄必须达到 MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无需等到 MaxTenuringThreshold 中要求的年龄。</p><h3 id="5-空间分配担保"><a href="#5-空间分配担保" class="headerlink" title="5. 空间分配担保"></a>5. 空间分配担保</h3><p>在发生 Minor GC 之前，虚拟机先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果条件成立的话，那么 Minor GC 可以确认是安全的。</p><p>如果不成立的话虚拟机会查看 HandlePromotionFailure 的值是否允许担保失败，如果允许那么就会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC；如果小于，或者 HandlePromotionFailure 的值不允许冒险，那么就要进行一次 Full GC。</p><h2 id="Full-GC-的触发条件"><a href="#Full-GC-的触发条件" class="headerlink" title="Full GC 的触发条件"></a>Full GC 的触发条件</h2><p>对于 Minor GC，其触发条件非常简单，当 Eden 空间满时，就将触发一次 Minor GC。而 Full GC 则相对复杂，有以下条件：</p><h3 id="1-调用-System-gc"><a href="#1-调用-System-gc" class="headerlink" title="1. 调用 System.gc()"></a>1. 调用 System.gc()</h3><p>只是建议虚拟机执行 Full GC，但是虚拟机不一定真正去执行。不建议使用这种方式，而是让虚拟机管理内存。</p><h3 id="2-老年代空间不足"><a href="#2-老年代空间不足" class="headerlink" title="2. 老年代空间不足"></a>2. 老年代空间不足</h3><p>老年代空间不足的常见场景为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等。</p><p>为了避免以上原因引起的 Full GC，应当尽量不要创建过大的对象以及数组。除此之外，可以通过 -Xmn 虚拟机参数调大新生代的大小，让对象尽量在新生代被回收掉，不进入老年代。还可以通过 -XX:MaxTenuringThreshold 调大对象进入老年代的年龄，让对象在新生代多存活一段时间。</p><h3 id="3-空间分配担保失败"><a href="#3-空间分配担保失败" class="headerlink" title="3. 空间分配担保失败"></a>3. 空间分配担保失败</h3><p>使用复制算法的 Minor GC 需要老年代的内存空间作担保，如果担保失败会执行一次 Full GC。具体内容请参考上面的第 5 小节。</p><h3 id="4-JDK-1-7-及以前的永久代空间不足"><a href="#4-JDK-1-7-及以前的永久代空间不足" class="headerlink" title="4. JDK 1.7 及以前的永久代空间不足"></a>4. JDK 1.7 及以前的永久代空间不足</h3><p>在 JDK 1.7 及以前，HotSpot 虚拟机中的方法区是用永久代实现的，永久代中存放的为一些 Class 的信息、常量、静态变量等数据。</p><p>当系统中要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，在未配置为采用 CMS GC 的情况下也会执行 Full GC。如果经过 Full GC 仍然回收不了，那么虚拟机会抛出 java.lang.OutOfMemoryError。</p><p>为避免以上原因引起的 Full GC，可采用的方法为增大永久代空间或转为使用 CMS GC。</p><h3 id="5-Concurrent-Mode-Failure"><a href="#5-Concurrent-Mode-Failure" class="headerlink" title="5. Concurrent Mode Failure"></a>5. Concurrent Mode Failure</h3><p>执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足（可能是 GC 过程中浮动垃圾过多导致暂时性的空间不足），便会报 Concurrent Mode Failure 错误，并触发 Full GC。</p><h1 id="四、类加载机制"><a href="#四、类加载机制" class="headerlink" title="四、类加载机制"></a>四、类加载机制</h1><p>类是在运行期间第一次使用时动态加载的，而不是一次性加载所有类。因为如果一次性加载，那么会占用很多的内存。</p><h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><p><img src="http://qnya.pomo16.club/179.png" alt></p><p>包括以下 7 个阶段：</p><ul><li><strong>加载 (Loading)</strong></li><li><strong>验证 (Verification)</strong></li><li><strong>准备 (Preparation)</strong></li><li><strong>解析 (Resolution)</strong></li><li><strong>初始化 (Initialization)</strong></li><li>使用 (Using)</li><li>卸载 (Unloading)</li></ul><p>其中，验证、准备、解析3个部分统称为连接 (Linking)</p><h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><p>包含了加载、验证、准备、解析和初始化这 5 个阶段。</p><h3 id="1-加载"><a href="#1-加载" class="headerlink" title="1. 加载"></a>1. 加载</h3><p>加载是类加载的一个阶段，注意不要混淆。</p><p>加载过程完成以下三件事：</p><ul><li>通过类的完全限定名称获取定义该类的二进制字节流。</li><li>将该字节流表示的静态存储结构转换为方法区的运行时存储结构。</li><li>在内存中生成一个代表该类的 Class 对象，作为方法区中该类各种数据的访问入口。</li></ul><p>其中二进制字节流可以从以下方式中获取：</p><ul><li>从 ZIP 包读取，成为 JAR、EAR、WAR 格式的基础。</li><li>从网络中获取，最典型的应用是 Applet。</li><li>运行时计算生成，例如动态代理技术，在 java.lang.reflect.Proxy 使用 ProxyGenerator.generateProxyClass 的代理类的二进制字节流。</li><li>由其他文件生成，例如由 JSP 文件生成对应的 Class 类。</li></ul><h3 id="2-验证"><a href="#2-验证" class="headerlink" title="2. 验证"></a>2. 验证</h3><p>确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p><h3 id="3-准备"><a href="#3-准备" class="headerlink" title="3. 准备"></a>3. 准备</h3><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。</p><p>类变量是被 static 修饰的变量，不包括实例变量。实例变量不会在这阶段分配内存，它会在对象实例化时随着对象一起被分配在堆中。应该注意到，实例化不是类加载的一个过程，类加载发生在所有实例化操作之前，并且类加载只进行一次，实例化可以进行多次。</p><p>初始值一般为 0 值，例如下面的类变量 value 被初始化为 0 而不是 123。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><p>如果类变量是常量，那么它将初始化为表达式所定义的值而不是 0。例如下面的常量 value 被初始化为 123 而不是 0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><h3 id="4-解析"><a href="#4-解析" class="headerlink" title="4. 解析"></a>4. 解析</h3><p>将常量池的符号引用替换为直接引用的过程。</p><p>其中解析过程在某些情况下可以在初始化阶段之后再开始，这是为了支持 Java 的动态绑定。</p><h3 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5. 初始化"></a>5. 初始化</h3><p>初始化阶段才真正开始执行类中定义的 Java 程序代码。初始化阶段是虚拟机执行类构造器 <code>&lt;clinit&gt;()</code> 方法的过程。在准备阶段，类变量已经赋过一次系统要求的初始值，而在初始化阶段，根据程序员通过程序制定的主观计划去初始化类变量和其它资源。</p><p><code>&lt;clinit&gt;()</code> 是由编译器自动收集类中所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定。特别注意的是，静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。例如以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        i = <span class="number">0</span>;                <span class="comment">// 给变量赋值可以正常编译通过</span></span><br><span class="line">        System.out.print(i);  <span class="comment">// 这句编译器会提示“非法向前引用”</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于父类的 <code>&lt;clinit&gt;()</code> 方法先执行，也就意味着父类中定义的静态语句块的执行要优先于子类。例如以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> A = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        A = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> B = A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     System.out.println(Sub.B);  <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口中不可以使用静态语句块，但仍然有类变量初始化的赋值操作，因此接口与类一样都会生成 <code>&lt;clinit&gt;()</code> 方法。但接口与类不同的是，执行接口的 <code>&lt;clinit&gt;()</code> 方法不需要先执行父接口的 <code>&lt;clinit&gt;()</code> 方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的 <code>&lt;clinit&gt;()</code> 方法。</p><p>虚拟机会保证一个类的 <code>&lt;clinit&gt;()</code> 方法在多线程环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的 <code>&lt;clinit&gt;()</code> 方法，其它线程都会阻塞等待，直到活动线程执行 <code>&lt;clinit&gt;()</code> 方法完毕。如果在一个类的 <code>&lt;clinit&gt;()</code> 方法中有耗时的操作，就可能造成多个线程阻塞，在实际过程中此种阻塞很隐蔽。</p><h2 id="类初始化时机"><a href="#类初始化时机" class="headerlink" title="类初始化时机"></a>类初始化时机</h2><h3 id="1-主动引用"><a href="#1-主动引用" class="headerlink" title="1. 主动引用"></a>1. 主动引用</h3><p>虚拟机规范中并没有强制约束何时进行加载，但是规范严格规定了有且只有下列五种情况必须对类进行初始化（加载、验证、准备都会随之发生）：</p><ul><li>遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类没有进行过初始化，则必须先触发其初始化。最常见的生成这 4 条指令的场景是：使用 new 关键字实例化对象的时候；读取或设置一个类的静态字段（被 final 修饰、已在编译期把结果放入常量池的静态字段除外）的时候；以及调用一个类的静态方法的时候。</li><li>使用 java.lang.reflect 包的方法对类进行反射调用的时候，如果类没有进行初始化，则需要先触发其初始化。</li><li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</li><li>当虚拟机启动时，用户需要指定一个要执行的主类（包含 main() 方法的那个类），虚拟机会先初始化这个主类；</li><li>当使用 JDK 1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getStatic, REF_putStatic, REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化；</li></ul><h3 id="2-被动引用"><a href="#2-被动引用" class="headerlink" title="2. 被动引用"></a>2. 被动引用</h3><p>以上 5 种场景中的行为称为对一个类进行主动引用。除此之外，所有引用类的方式都不会触发初始化，称为被动引用。被动引用的常见例子包括：</p><ul><li>通过子类引用父类的静态字段，不会导致子类初始化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(SubClass.value);  <span class="comment">// value 字段在 SuperClass 中定义</span></span><br></pre></td></tr></table></figure><ul><li>通过数组定义来引用类，不会触发此类的初始化。该过程会对数组类进行初始化，数组类是一个由虚拟机自动生成的、直接继承自 Object 的子类，其中包含了数组的属性和方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SuperClass[] sca = <span class="keyword">new</span> SuperClass[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><ul><li>常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(ConstClass.HELLOWORLD);</span><br></pre></td></tr></table></figure><h2 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h2><p>两个类相等，需要类本身相等，并且使用同一个类加载器进行加载。这是因为每一个类加载器都拥有一个独立的类名称空间。</p><p>这里的相等，包括类的 Class 对象的 equals() 方法、isAssignableFrom() 方法、isInstance() 方法的返回结果为 true，也包括使用 instanceof 关键字做对象所属关系判定结果为 true。</p><h2 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h2><p>从 Java 虚拟机的角度来讲，只存在以下两种不同的类加载器：</p><ul><li>启动类加载器（Bootstrap ClassLoader），使用 C++ 实现，是虚拟机自身的一部分；</li><li>所有其它类的加载器，使用 Java 实现，独立于虚拟机，继承自抽象类 java.lang.ClassLoader。</li></ul><p>从 Java 开发人员的角度看，类加载器可以划分得更细致一些：</p><ul><li><p>启动类加载器 (Bootstrap ClassLoader) 此类加载器负责将存放在 &lt;JRE_HOME&gt;\lib 目录中的，或者被 -Xbootclasspath 参数所指定的路径中的，并且是虚拟机识别的（仅按照文件名识别，如 rt.jar，名字不符合的类库即使放在 lib 目录中也不会被加载）类库加载到虚拟机内存中。启动类加载器无法被 Java 程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给启动类加载器，直接使用 null 代替即可。</p></li><li><p>扩展类加载器 (Extension ClassLoader) 这个类加载器是由 ExtClassLoader (sun.misc.Launcher$ExtClassLoader) 实现的。它负责将 &lt;JAVA_HOME&gt;/lib/ext 或者被 java.ext.dir 系统变量所指定路径中的所有类库加载到内存中，开发者可以直接使用扩展类加载器。</p></li><li><p>应用程序类加载器 (Application ClassLoader) 这个类加载器是由  AppClassLoader（sun.misc.Launcher$AppClassLoader）实现的。由于这个类加载器是 ClassLoader 中的 getSystemClassLoader() 方法的返回值，因此一般称为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p></li></ul><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><p>应用程序是由三种类加载器互相配合从而实现类加载，除此之外还可以加入自己定义的类加载器。</p><p>下图展示了类加载器之间的层次关系，称为双亲委派模型（Parents Delegation Model）。该模型要求除了顶层的启动类加载器外，其它的类加载器都要有自己的父类加载器。这里的父子关系一般通过组合关系（Composition）来实现，而不是继承关系（Inheritance）。</p><p><img src="http://qnya.pomo16.club/180.png" alt></p><h3 id="1-工作过程"><a href="#1-工作过程" class="headerlink" title="1. 工作过程"></a>1. 工作过程</h3><p>一个类加载器首先将类加载请求转发到父类加载器，只有当父类加载器无法完成时才尝试自己加载。</p><h3 id="2-好处"><a href="#2-好处" class="headerlink" title="2. 好处"></a>2. 好处</h3><p>使得 Java 类随着它的类加载器一起具有一种带有优先级的层次关系，从而使得基础类得到统一。</p><p>例如 java.lang.Object 存放在 rt.jar 中，如果编写另外一个 java.lang.Object 并放到 ClassPath 中，程序可以编译通过。由于双亲委派模型的存在，所以在 rt.jar 中的 Object 比在 ClassPath 中的 Object 优先级更高，这是因为 rt.jar 中的 Object 使用的是启动类加载器，而 ClassPath 中的 Object 使用的是应用程序类加载器。rt.jar 中的 Object 优先级更高，那么程序中所有的 Object 都是这个 Object。</p><h3 id="3-实现"><a href="#3-实现" class="headerlink" title="3. 实现"></a>3. 实现</h3><p>以下是抽象类 java.lang.ClassLoader 的代码片段，其中的 loadClass() 方法运行过程如下：先检查类是否已经加载过，如果没有则让父类加载器去加载。当父类加载器加载失败时抛出 ClassNotFoundException，此时尝试自己去加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">// The parent class loader for delegation</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                    <span class="comment">// to find the class.</span></span><br><span class="line">                    c = findClass(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义类加载器实现"><a href="#自定义类加载器实现" class="headerlink" title="自定义类加载器实现"></a>自定义类加载器实现</h2><p>以下代码中的 FileSystemClassLoader 是自定义类加载器，继承自 java.lang.ClassLoader，用于加载文件系统上的类。它首先根据类的全名在文件系统上查找类的字节代码文件（.class 文件），然后读取该文件内容，最后通过 defineClass() 方法来把这些字节代码转换成 java.lang.Class 类的实例。</p><p>java.lang.ClassLoader 的 loadClass() 实现了双亲委派模型的逻辑，自定义类加载器一般不去重写它，但是需要重写 findClass() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String rootDir;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystemClassLoader</span><span class="params">(String rootDir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rootDir = rootDir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] classData = getClassData(name);</span><br><span class="line">        <span class="keyword">if</span> (classData == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, classData, <span class="number">0</span>, classData.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getClassData(String className) &#123;</span><br><span class="line">        String path = classNameToPath(className);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream ins = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> bufferSize = <span class="number">4096</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferSize];</span><br><span class="line">            <span class="keyword">int</span> bytesNumRead;</span><br><span class="line">            <span class="keyword">while</span> ((bytesNumRead = ins.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, bytesNumRead);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">classNameToPath</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rootDir + File.separatorChar</span><br><span class="line">                + className.replace(<span class="string">'.'</span>, File.separatorChar) + <span class="string">".class"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、Java-内存模型与线程"><a href="#五、Java-内存模型与线程" class="headerlink" title="五、Java 内存模型与线程"></a>五、Java 内存模型与线程</h1><h2 id="硬件与效率的一致性"><a href="#硬件与效率的一致性" class="headerlink" title="硬件与效率的一致性"></a>硬件与效率的一致性</h2><p>由于处理器上的寄存器的读写的速度比内存快几个数量级，所以现代计算机系统都不得不加入一层读写速度尽可能接近处理器运算速度的高速缓存 (Cache) 来作为内存。</p><p>加入高速缓存带来了一个新的问题：缓存一致性。如果多个缓存共享同一块主内存区域，那么多个缓存的数据可能会不一致，需要一些协议来解决这个问题。</p><p><img src="http://qnya.pomo16.club/181.png" alt></p><h2 id="Java-内存模型"><a href="#Java-内存模型" class="headerlink" title="Java 内存模型"></a>Java 内存模型</h2><p>Java 内存模型试图屏蔽各种硬件和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从外存中取出变量这样的底层细节。</p><h3 id="主内存与工作内存"><a href="#主内存与工作内存" class="headerlink" title="主内存与工作内存"></a>主内存与工作内存</h3><p>所有的变量都存储在主内存中，每个线程还有自己的工作内存，工作内存存储在高速缓存或者寄存器中，保存了该线程使用的变量的主内存副本拷贝。</p><p>线程只能直接操作工作内存中的变量，不同线程之间的变量值传递需要通过主内存来完成。</p><p><img src="http://qnya.pomo16.club/182.png" alt></p><h3 id="内存间交互操作"><a href="#内存间交互操作" class="headerlink" title="内存间交互操作"></a>内存间交互操作</h3><p>Java 内存模型定义了 8 个操作来完成主内存和工作内存的交互操作。</p><p><img src="http://qnya.pomo16.club/183.png" alt></p><ul><li>lock(锁定)：作用于主内存的变量，把一个变量标识为一条线程独占的状态</li><li>unlock(解锁)：作用于主内存的变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</li><li>read(读取)：作用于主内存的变量，把一个变量的值从主内存传输到线程的工作内存中，以便随后的 load 动作使用</li><li>load(载入)：作用于工作内存的变量，在 read 之后执行，把 read 从主内存中得到的变量值放入工作内存的变量副本中</li><li>use(使用)：作用于工作内存的变量，把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作</li><li>assign(赋值)：作用于工作内存的变量，把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作</li><li>store(存储)：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便后面的 write 操作使用</li><li>write(写入)：作用于主内存的变量，在 store 之后执行，把 store 从工作内存中得到的变量的值放入主内存的变量中</li></ul><h3 id="内存模型三大特性"><a href="#内存模型三大特性" class="headerlink" title="内存模型三大特性"></a>内存模型三大特性</h3><h4 id="1-原子性"><a href="#1-原子性" class="headerlink" title="1. 原子性"></a>1. 原子性</h4><p>Java 内存模型保证了 read、load、use、assign、store、write、lock 和 unlock 操作具有原子性，例如对一个 int 类型的变量执行 assign 赋值操作，这个操作就是原子性的。但是 Java 内存模型允许虚拟机将没有被 volatile 修饰的 64 位数据（long，double）的读写操作划分为两次 32 位的操作来进行，即 load、store、read 和 write 操作可以不具备原子性。</p><p>有一个错误认识就是，int 等原子性的类型在多线程环境中不会出现线程安全问题。前面的线程不安全示例代码中，cnt 属于 int 类型变量，1000 个线程对它进行自增操作之后，得到的值为 997 而不是 1000。</p><p>为了方便讨论，将内存间的交互操作简化为 3 个：load、assign、store。</p><p>下图演示了两个线程同时对 cnt 进行操作，load、assign、store 这一系列操作整体上看不具备原子性，那么在 T1 修改 cnt 并且还没有将修改后的值写入主内存，T2 依然可以读入旧值。可以看出，这两个线程虽然执行了两次自增运算，但是主内存中 cnt 的值最后为 1 而不是 2。因此对 int 类型读写操作满足原子性只是说明 load、assign、store 这些单个操作具备原子性。</p><p><img src="http://qnya.pomo16.club/184.png" alt></p><p>AtomicInteger 能保证多个线程修改的原子性。</p><p><img src="http://qnya.pomo16.club/185.png" alt></p><p>使用 AtomicInteger 重写之前线程不安全的代码之后得到以下线程安全实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger cnt = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cnt.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cnt.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> threadSize = <span class="number">1000</span>;</span><br><span class="line">    AtomicExample example = <span class="keyword">new</span> AtomicExample(); <span class="comment">// 只修改这条语句</span></span><br><span class="line">    <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            example.add();</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">    System.out.println(example.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1000</span></span><br></pre></td></tr></table></figure><p>除了使用原子类之外，也可以使用 synchronized 互斥锁来保证操作的原子性。它对应的内存间交互操作为：lock 和 unlock，在虚拟机实现上对应的字节码指令为 monitorenter 和 monitorexit。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicSynchronizedExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> threadSize = <span class="number">1000</span>;</span><br><span class="line">    AtomicSynchronizedExample example = <span class="keyword">new</span> AtomicSynchronizedExample();</span><br><span class="line">    <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadSize);</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadSize; i++) &#123;</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            example.add();</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">    System.out.println(example.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1000</span></span><br></pre></td></tr></table></figure><h4 id="2-可见性"><a href="#2-可见性" class="headerlink" title="2. 可见性"></a>2. 可见性</h4><p>可见性指当一个线程修改了共享变量的值，其它线程能够立即得知这个修改。Java 内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值来实现可见性的。</p><p>主要有三种实现可见性的方式：</p><ul><li>volatile</li><li>synchronized，对一个变量执行 unlock 操作之前，必须把变量值同步回主内存。</li><li>final，被 final 关键字修饰的字段在构造器中一旦初始化完成，并且没有发生 this 逃逸（其它线程通过 this 引用访问到初始化了一半的对象），那么其它线程就能看见 final 字段的值。</li></ul><p>对前面的线程不安全示例中的 cnt 变量使用 volatile 修饰，不能解决线程不安全问题，因为 volatile 并不能保证操作的原子性。</p><h4 id="3-有序性"><a href="#3-有序性" class="headerlink" title="3. 有序性"></a>3. 有序性</h4><p>有序性是指：在本线程内观察，所有操作都是有序的。在一个线程观察另一个线程，所有操作都是无序的，无序是因为发生了指令重排序。在 Java 内存模型中，允许编译器和处理器对指令进行重排序，重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p><p>volatile 关键字通过添加内存屏障的方式来禁止指令重排，即重排序时不能把后面的指令放到内存屏障之前。</p><p>也可以通过 synchronized 来保证有序性，它保证每个时刻只有一个线程执行同步代码，相当于是让线程顺序执行同步代码。</p><h3 id="先行发生原则"><a href="#先行发生原则" class="headerlink" title="先行发生原则"></a>先行发生原则</h3><p>上面提到了可以用 volatile 和 synchronized 来保证有序性。除此之外，JVM 还规定了先行发生原则，让一个操作无需控制就能先于另一个操作完成。</p><h4 id="1-单一线程原则"><a href="#1-单一线程原则" class="headerlink" title="1. 单一线程原则"></a>1. 单一线程原则</h4><blockquote><p>Single Thread rule</p></blockquote><p>在一个线程内，在程序前面的操作先行发生于后面的操作。</p><p><img src="http://qnya.pomo16.club/186.png" alt></p><h4 id="2-管程锁定规则"><a href="#2-管程锁定规则" class="headerlink" title="2. 管程锁定规则"></a>2. 管程锁定规则</h4><blockquote><p>Monitor Lock Rule</p></blockquote><p>一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。</p><p><img src="http://qnya.pomo16.club/187.png" alt></p><h4 id="3-volatile-变量规则"><a href="#3-volatile-变量规则" class="headerlink" title="3. volatile 变量规则"></a>3. volatile 变量规则</h4><blockquote><p>Volatile Variable Rule</p></blockquote><p>对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作。</p><p><img src="http://qnya.pomo16.club/188.png" alt></p><h4 id="4-线程启动规则"><a href="#4-线程启动规则" class="headerlink" title="4. 线程启动规则"></a>4. 线程启动规则</h4><blockquote><p>Thread Start Rule</p></blockquote><p>Thread 对象的 start() 方法调用先行发生于此线程的每一个动作。</p><p><img src="http://qnya.pomo16.club/189.png" alt></p><h4 id="5-线程加入规则"><a href="#5-线程加入规则" class="headerlink" title="5. 线程加入规则"></a>5. 线程加入规则</h4><blockquote><p>Thread Join Rule</p></blockquote><p>Thread 对象的结束先行发生于 join() 方法返回。</p><p><img src="http://qnya.pomo16.club/190.png" alt></p><h4 id="6-线程中断规则"><a href="#6-线程中断规则" class="headerlink" title="6. 线程中断规则"></a>6. 线程中断规则</h4><blockquote><p>Thread Interruption Rule</p></blockquote><p>对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过 interrupted() 方法检测到是否有中断发生。</p><h4 id="7-对象终结规则"><a href="#7-对象终结规则" class="headerlink" title="7. 对象终结规则"></a>7. 对象终结规则</h4><blockquote><p>Finalizer Rule</p></blockquote><p>一个对象的初始化完成（构造函数执行结束）先行发生于它的 finalize() 方法的开始。</p><h4 id="8-传递性"><a href="#8-传递性" class="headerlink" title="8. 传递性"></a>8. 传递性</h4><blockquote><p>Transitivity</p></blockquote><p>如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 先行发生于操作 C。</p><h2 id="Java-与线程"><a href="#Java-与线程" class="headerlink" title="Java 与线程"></a>Java 与线程</h2><p>线程是比进程更轻量级的调度执行单位，线程的引入，可以把一个进程的资源分配和执行调度分开，各个线程既可以共享进程资源(内存地址，文件 IO 等)，又可以独立调度（线程是 CPU 调度的基本单位）。</p><p>Thread类的所有关键方法都声明了native的，意味着这个方法没有使用或无法使用平台无关的手段来实现，也有可能是为了执行效率。</p><p>实现线程主要有三种方式：使用内核线程实现，使用用户线程实现和使用用户线程加轻量级进程混合实现。</p><h3 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h3><h4 id="1-使用内核线程实现"><a href="#1-使用内核线程实现" class="headerlink" title="1. 使用内核线程实现"></a>1. 使用内核线程实现</h4><p>内核线程（KLT，Kernel-Level Thread），直接由操作系统内核（Kernel，即内核）支持的线程。</p><p>程序一般不会去直接使用内核线程，而是去使用内核线程的一种高级接口——轻量级进程（LWP），即通常意义上的线程。</p><p><img src="http://qnya.pomo16.club/191.png" alt></p><h4 id="2-使用用户线程实现"><a href="#2-使用用户线程实现" class="headerlink" title="2. 使用用户线程实现"></a>2. 使用用户线程实现</h4><p>广义上，内核线程以外，就是用户线程。轻量级也算用户线程，但轻量级进程的实现始终是建立在内核上的，许多操作都要进行系统调度，效率会受到限制。 </p><p>狭义上，用户线程指完全建立在用户空间的线程库上。这种线程不需要切换内核态，效率非常高且低消耗，也可以支持规模更大的线程数量，部分高性能数据库中的多线程就是由用户线程实现的。这种进程与用户线程之间1：N的关系称为一对多的线程模型。</p><p><img src="http://qnya.pomo16.club/192.png" alt></p><p>用户线程优势在于不需要系统内核支援，劣势也在于没有系统内核的支援，所有的线程操作都是需要用户程序自己处理。阻塞处理等问题的解决十分困难，甚至不可能完成。所以使用用户线程会非常复杂。</p><h4 id="3-用户线程加轻量级进程混合实现"><a href="#3-用户线程加轻量级进程混合实现" class="headerlink" title="3. 用户线程加轻量级进程混合实现"></a>3. 用户线程加轻量级进程混合实现</h4><p>内核线程与用户线程混合使用。可以使用内核提供的线程调度功能及处理器映射，并且用户线程的系统调用要通过轻量级线程来完成，大大降低整个进程被完全阻塞的风险。用户线程与轻量级进程比例是N:M。</p><p><img src="http://qnya.pomo16.club/193.png" alt></p><h4 id="4-Java线程的实现"><a href="#4-Java线程的实现" class="headerlink" title="4. Java线程的实现"></a>4. Java线程的实现</h4><p>JDK1.2 之前，绿色线程——用户线程。JDK1.2——基于操作系统原生线程模型来实现。</p><p>Sun JDK,它的Windows版本和 Linux 版本都使用一对一的线程模型实现，一条Java线程就映射到一条轻量级进程之中。</p><p>Solaris 同时支持一对一和多对多。</p><h3 id="Java-线程调度"><a href="#Java-线程调度" class="headerlink" title="Java 线程调度"></a>Java 线程调度</h3><p>线程调度是指系统为线程分配处理器使用权的过程，主要调度方式分两种，分别是协同式线程调度和抢占式线程调度。</p><h4 id="协同式线程调度"><a href="#协同式线程调度" class="headerlink" title="协同式线程调度"></a>协同式线程调度</h4><p>线程执行时间由线程本身来控制，线程把自己的工作执行完之后，要主动通知系统切换到另外一个线程上。</p><p>优点：实现简单，且切换操作对线程自己是可知的，没啥线程同步问题。</p><p>缺点：线程执行时间不可控制，如果一个线程有问题，可能一直阻塞在那里。 </p><h4 id="抢占式调度"><a href="#抢占式调度" class="headerlink" title="抢占式调度"></a>抢占式调度</h4><p>每个线程将由系统来分配执行时间，线程的切换不由线程本身来决定（Java 中，Thread.yield() 可以让出执行时间，但无法获取执行时间）。线程执行时间系统可控，也不会有一个线程导致整个进程阻塞。 </p><h4 id="Java线程调度就是抢占式调度"><a href="#Java线程调度就是抢占式调度" class="headerlink" title="Java线程调度就是抢占式调度"></a>Java线程调度就是抢占式调度</h4><p>希望系统能给某些线程多分配一些时间，给一些线程少分配一些时间，可以通过设置线程优先级来完成。Java语言一共10个级别的线程优先级（Thread.MIN_PRIORITY至Thread.MAX_PRIORITY），在两线程同时处于ready状态时，优先级越高的线程越容易被系统选择执行。<strong>但优先级并不是很靠谱，因为Java线程是通过映射到系统的原生线程上来实现的，所以线程调度最终还是取决于操作系统</strong>。</p><h3 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h3><p><img src="http://qnya.pomo16.club/194.png" alt></p><h1 id="六、线程安全"><a href="#六、线程安全" class="headerlink" title="六、线程安全"></a>六、线程安全</h1><p>当多个线程访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要考虑进行额外的同步，或者在调用方进行任何其他的写作操作，调用这个对象的行为都可以获得正确的结果，那这个对象时线程安全的。</p><h2 id="五类各种操作共享的数据"><a href="#五类各种操作共享的数据" class="headerlink" title="五类各种操作共享的数据"></a>五类各种操作共享的数据</h2><h3 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a>不可变</h3><p>一定是线程安全的，如用 final 关键字修饰的变量，String 对象，枚举类型，部分 Number 子类，如 Double,  Long 等数值包装类，BigInteger, BigDecimal 等大数据类型</p><h3 id="绝对线程安全"><a href="#绝对线程安全" class="headerlink" title="绝对线程安全"></a>绝对线程安全</h3><p>对于 Java API 中标注自己是线程安全的类，大多不是绝对的线程安全，如 Vector，虽然他的 add()，get()，remove() 方法都是被 synchronized 修饰的，但是在多线程的环境中，如果不在方法中做额外的操作，仍然是不安全的。</p><h3 id="相对线程安全"><a href="#相对线程安全" class="headerlink" title="相对线程安全"></a>相对线程安全</h3><p>通常意义上的线程安全，它需要保证对这个对象单独的操作是线程安全的，我们在调用的时候不需要做额外的保障措施，但对于一些特定顺序连续调用，可能需要在调用端使用额外的同步手段来保证调用的顺序性。如 Vector， HashTable。</p><h3 id="线程兼容"><a href="#线程兼容" class="headerlink" title="线程兼容"></a>线程兼容</h3><p>指对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全滴使用，如 HashMap，ArrayList。</p><h3 id="线程对立"><a href="#线程对立" class="headerlink" title="线程对立"></a>线程对立</h3><p>指无论调用段是否采用了同步措施，都无法在多线程环境中并发使用的代码，如 resume(), suspend()，如果两个线程同时持有一个线程对象，一个尝试恢复线程，一个尝试中断线程，如果并发进行的话，无论调用时是否进行了同步，目标线程都是存在死锁风险。</p><h2 id="线程安全的实现"><a href="#线程安全的实现" class="headerlink" title="线程安全的实现"></a>线程安全的实现</h2><h3 id="1-不可变"><a href="#1-不可变" class="headerlink" title="1. 不可变"></a>1. 不可变</h3><p>不可变（Immutable）的对象一定是线程安全的，不需要再采取任何的线程安全保障措施。只要一个不可变的对象被正确地构建出来，永远也不会看到它在多个线程之中处于不一致的状态。多线程环境下，应当尽量使对象成为不可变，来满足线程安全。</p><p>不可变的类型：</p><ul><li>final 关键字修饰的基本数据类型</li><li>String</li><li>枚举类型</li><li>Number 部分子类，如 Long 和 Double 等数值包装类型，BigInteger 和 BigDecimal 等大数据类型。但同为 Number 的原子类 AtomicInteger 和 AtomicLong 则是可变的。</li></ul><p>对于集合类型，可以使用 Collections.unmodifiableXXX() 方法来获取一个不可变的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImmutableExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;String, Integer&gt; unmodifiableMap = Collections.unmodifiableMap(map);</span><br><span class="line">        unmodifiableMap.put(<span class="string">"a"</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.UnsupportedOperationException</span><br><span class="line">    at java.util.Collections$UnmodifiableMap.put(Collections.java:<span class="number">1457</span>)</span><br><span class="line">    at ImmutableExample.main(ImmutableExample.java:<span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>Collections.unmodifiableXXX() 先对原始的集合进行拷贝，需要对集合进行修改的方法都直接抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-互斥同步"><a href="#2-互斥同步" class="headerlink" title="2. 互斥同步"></a>2. 互斥同步</h3><p>在多线程访问的时候，保证同一时间只有一条线程使用。而互斥是实现同步的一种手段，临界区(Critical Section)，互斥量(Mutex)，信号量(Semaphore)都是主要的互斥实现方式。</p><p><strong>Java中实现互斥同步的两种方法</strong></p><ol><li><p>使用 synchronized 实现同步，编译之后会形成 monitorenter 和 monitorexit 这两个字节码指令，这两个字节码都需要一个 reference 类型的参数来指明要锁定和解锁的对象。如果 Java 程序中的 synchronized 明确制定了对象参数，那就是这个对象的 reference；如果没有明确指定，那就根据 synchronized 修饰的是实例方法还是类方法，去取对应的对象实例或 Class 对象来作为锁对象。还有个锁的计数器，来记录拥有锁的次数，跟 AQS 里面的 state 一样。</p></li><li><p>还可以使用 java.util.concurrent(J.U.C) 包中的重入锁（ReentrantLock）来实现同步，在基本用法上，与 synchronized 很相似，他们都具备一样的线程重入特性，只是代码写法上有点区别，一个表现为 API 层面的互斥锁（lock() 和 unlock() 方法配合 try/finally 语句块来完成），另一个表现为原生语法层面的互斥锁。不过，相比 synchronized,ReentrantLock 增加了一些高级功能，主要有以下3项：等待可中断、可实现公平锁，以及锁可以绑定多个条件。</p><ul><li>等待可中断是指当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情，可中断特性对处理执行时间非常长的同步块很有帮助。</li><li>公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁；而非公平锁则不保证这一点，在锁被释放时，任何一个等待锁的线程都有机会获得锁。synchronized 中的锁是非公平的， ReentrantLock 默认情况下也是非公平的，但可以通过带布尔值的构造函数要求使用公平锁。</li><li>锁绑定多个条件是指一个 ReentrantLock 对象可以同时绑定多个 Condition 对象，而在 synchronized 中，锁对象的 wait() 和 notify() 或 notifyAll() 方法可以实现一个隐含的条件，如果要和多于一个的条件关联的时候，就不得不额外地添加一个锁，而 ReentrantLock 则无须这样做，只需要多次调用 newCondition() 方法即可。</li></ul></li></ol><p><strong>缺点</strong></p><p>互斥同步最主要的问题就是线程阻塞和唤醒所带来的性能问题，因此这种同步也称为阻塞同步。</p><p>互斥同步属于一种悲观的并发策略，总是认为只要不去做正确的同步措施，那就肯定会出现问题。无论共享数据是否真的会出现竞争，它都要进行加锁（这里讨论的是概念模型，实际上虚拟机会优化掉很大一部分不必要的加锁）、用户态核心态转换、维护锁计数器和检查是否有被阻塞的线程需要唤醒等操作。</p><p>###3. 非阻塞同步</p><p>基于冲突检测的乐观并发策略，通俗地说，就是先进行操作，如果没有其他线程争用共享数据，那操作就成功了；如果共享数据有争用，产生了冲突，那就再采取其他的补偿措施（最常见的补偿措施就是不断地重试，直到成功为止），这种乐观的并发策略的许多实现都不需要把线程挂起，因此这种操作称为非阻塞同步（Non-Blocking Synchronization）。</p><p>乐观并发策略需要“硬件指令集”，这类指令常用的有：</p><ul><li>测试并设置（Test-and-Set）</li><li>获取并增加（Fetch-and-Increment）</li><li>交换（Swap）</li><li><p>比较并交换（Compare-and-Swap，下文称CAS）</p></li><li><p>加载链接/条件存储（Load-Linked/Store-Conditional，下文称LL/SC）</p></li></ul><h4 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h4><p>随着硬件指令集的发展，我们可以使用基于冲突检测的乐观并发策略：先进行操作，如果没有其它线程争用共享数据，那操作就成功了，否则采取补偿措施（不断地重试，直到成功为止）。这种乐观的并发策略的许多实现都不需要将线程阻塞，因此这种同步操作称为非阻塞同步。</p><p>乐观锁需要操作和冲突检测这两个步骤具备原子性，这里就不能再使用互斥同步来保证了，只能靠硬件来完成。硬件支持的原子性操作最典型的是：比较并交换（Compare-and-Swap，CAS）。CAS 指令需要有 3 个操作数，分别是内存地址 V、旧的预期值 A 和新值 B。当执行操作时，只有当 V 的值等于 A，才将 V 的值更新为 B。</p><h4 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h4><p>J.U.C 包里面的整数原子类 AtomicInteger 的方法调用了 Unsafe 类的 CAS 操作。</p><p>以下代码使用了 AtomicInteger 执行了自增的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> AtomicInteger cnt = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cnt.incrementAndGet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下代码是 incrementAndGet() 的源码，它调用了 Unsafe 的 getAndAddInt() 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下代码是 getAndAddInt() 源码，var1 指示对象内存地址，var2 指示该字段相对对象内存地址的偏移，var4 指示操作需要加的数值，这里为 1。通过 getIntVolatile(var1, var2) 得到旧的预期值，通过调用 compareAndSwapInt() 来进行 CAS 比较，如果该字段内存地址中的值等于 var5，那么就更新内存地址为 var1+var2 的变量为 var5+var4。</p><p>可以看到 getAndAddInt() 在一个循环中进行，发生冲突的做法是不断的进行重试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ABA"><a href="#ABA" class="headerlink" title="ABA"></a>ABA</h4><p>如果一个变量初次读取的时候是 A 值，它的值被改成了 B，后来又被改回为 A，那 CAS 操作就会误认为它从来没有被改变过。</p><p>J.U.C 包提供了一个带有标记的原子引用类 AtomicStampedReference 来解决这个问题，它可以通过控制变量值的版本来保证 CAS 的正确性。大部分情况下 ABA 问题不会影响程序并发的正确性，如果需要解决 ABA 问题，改用传统的互斥同步可能会比原子类更高效。</p><h3 id="4-无同步方案"><a href="#4-无同步方案" class="headerlink" title="4. 无同步方案"></a>4. 无同步方案</h3><p>要保证线程安全，并不是一定就要进行同步。如果一个方法本来就不涉及共享数据，那它自然就无须任何同步措施去保证正确性。</p><h4 id="栈封闭"><a href="#栈封闭" class="headerlink" title="栈封闭"></a>栈封闭</h4><p>多个线程访问同一个方法的局部变量时，不会出现线程安全问题，因为局部变量存储在虚拟机栈中，属于线程私有的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackClosedExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add100</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    StackClosedExample example = <span class="keyword">new</span> StackClosedExample();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; example.add100());</span><br><span class="line">    executorService.execute(() -&gt; example.add100());</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><h4 id="线程本地存储（Thread-Local-Storage）"><a href="#线程本地存储（Thread-Local-Storage）" class="headerlink" title="线程本地存储（Thread Local Storage）"></a>线程本地存储（Thread Local Storage）</h4><p>如果一段代码中所需要的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一个线程中执行。如果能保证，我们就可以把共享数据的可见范围限制在同一个线程之内，这样，无须同步也能保证线程之间不出现数据争用的问题。</p><p>符合这种特点的应用并不少见，大部分使用消费队列的架构模式（如“生产者-消费者”模式）都会将产品的消费过程尽量在一个线程中消费完。其中最重要的一个应用实例就是经典 Web 交互模型中的“一个请求对应一个服务器线程”（Thread-per-Request）的处理方式，这种处理方式的广泛应用使得很多 Web 服务端应用都可以使用线程本地存储来解决线程安全问题。</p><p>可以使用 java.lang.ThreadLocal 类来实现线程本地存储功能。</p><p>对于以下代码，thread1 中设置 threadLocal 为 1，而 thread2 设置 threadLocal 为 2。过了一段时间之后，thread1 读取 threadLocal 依然是 1，不受 thread2 的影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadLocal threadLocal = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            threadLocal.set(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(threadLocal.get());</span><br><span class="line">            threadLocal.remove();</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            threadLocal.set(<span class="number">2</span>);</span><br><span class="line">            threadLocal.remove();</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>为了理解 ThreadLocal，先看以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalExample1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadLocal threadLocal1 = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">        ThreadLocal threadLocal2 = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            threadLocal1.set(<span class="number">1</span>);</span><br><span class="line">            threadLocal2.set(<span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            threadLocal1.set(<span class="number">2</span>);</span><br><span class="line">            threadLocal2.set(<span class="number">2</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它所对应的底层结构图为：</p><p><img src="http://qnya.pomo16.club/195.png" alt></p><p>每个 Thread 都有一个 ThreadLocal.ThreadLocalMap 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ThreadLocal values pertaining to this thread. This map is maintained</span></span><br><span class="line"><span class="comment"> * by the ThreadLocal class. */</span></span><br><span class="line">ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>当调用一个 ThreadLocal 的 set(T value) 方法时，先得到当前线程的 ThreadLocalMap 对象，然后将 ThreadLocal-&gt;value 键值对插入到该 Map 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get() 方法类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ThreadLocal 从理论上讲并不是用来解决多线程并发问题的，因为根本不存在多线程竞争。</p><p>在一些场景 (尤其是使用线程池) 下，由于 ThreadLocal.ThreadLocalMap 的底层数据结构导致 ThreadLocal 有内存泄漏的情况，应该尽可能在每次使用 ThreadLocal 后手动调用 remove()，以避免出现 ThreadLocal 经典的内存泄漏甚至是造成自身业务混乱的风险。</p><h4 id="可重入代码（Reentrant-Code）"><a href="#可重入代码（Reentrant-Code）" class="headerlink" title="可重入代码（Reentrant Code）"></a>可重入代码（Reentrant Code）</h4><p>这种代码也叫做纯代码（Pure Code），可以在代码执行的任何时刻中断它，转而去执行另外一段代码（包括递归调用它本身），而在控制权返回后，原来的程序不会出现任何错误。</p><p>可重入代码有一些共同的特征，例如不依赖存储在堆上的数据和公用的系统资源、用到的状态量都由参数中传入、不调用非可重入的方法等。</p><h1 id="七、锁优化"><a href="#七、锁优化" class="headerlink" title="七、锁优化"></a>七、锁优化</h1><p>这里的锁优化主要是指 JVM 对 synchronized 的优化。</p><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>互斥同步进入阻塞状态的开销都很大，应该尽量避免。在许多应用中，共享数据的锁定状态只会持续很短的一段时间。自旋锁的思想是让一个线程在请求一个共享数据的锁时执行忙循环（自旋）一段时间，如果在这段时间内能获得锁，就可以避免进入阻塞状态。</p><p>自旋锁虽然能避免进入阻塞状态从而减少开销，但是它需要进行忙循环操作占用 CPU 时间，它只适用于共享数据的锁定状态很短的场景。</p><p>在 JDK 1.6 中引入了自适应的自旋锁。自适应意味着自旋的次数不再固定了，而是由前一次在同一个锁上的自旋次数及锁的拥有者的状态来决定。</p><h2 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h2><p>锁消除是指对于被检测出不可能存在竞争的共享数据的锁进行消除。</p><p>锁消除主要是通过逃逸分析来支持，如果堆上的共享数据不可能逃逸出去被其它线程访问到，那么就可以把它们当成私有数据对待，也就可以将它们的锁进行消除。</p><p>对于一些看起来没有加锁的代码，其实隐式的加了很多锁。例如下面的字符串拼接代码就隐式加了锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">concatString</span><span class="params">(String s1, String s2, String s3)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1 + s2 + s3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>String 是一个不可变的类，编译器会对 String 的拼接自动优化。在 JDK 1.5 之前，会转化为 StringBuffer 对象的连续 append() 操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">concatString</span><span class="params">(String s1, String s2, String s3)</span> </span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    sb.append(s1);</span><br><span class="line">    sb.append(s2);</span><br><span class="line">    sb.append(s3);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个 append() 方法中都有一个同步块。虚拟机观察变量 sb，很快就会发现它的动态作用域被限制在 concatString() 方法内部。也就是说，sb 的所有引用永远不会逃逸到 concatString() 方法之外，其他线程无法访问到它，因此可以进行消除。</p><h2 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h2><p>如果一系列的连续操作都对同一个对象反复加锁和解锁，频繁的加锁操作就会导致性能损耗。</p><p>上一节的示例代码中连续的 append() 方法就属于这类情况。如果虚拟机探测到由这样的一串零碎的操作都对同一个对象加锁，将会把加锁的范围扩展（粗化）到整个操作序列的外部。对于上一节的示例代码就是扩展到第一个 append() 操作之前直至最后一个 append() 操作之后，这样只需要加锁一次就可以了。</p><h2 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h2><p>JDK 1.6 引入了偏向锁和轻量级锁，从而让锁拥有了四个状态：无锁状态（unlocked）、偏向锁状态（biasble）、轻量级锁状态（lightweight locked）和重量级锁状态（inflated）。</p><p>以下是 HotSpot 虚拟机对象头的内存布局，这些数据被称为 Mark Word。其中 tag bits 对应了五个状态，这些状态在右侧的 state 表格中给出。除了 marked for gc 状态，其它四个状态已经在前面介绍过了。</p><p><img src="http://qnya.pomo16.club/196.png" alt></p><p>下图左侧是一个线程的虚拟机栈，其中有一部分称为 Lock Record 的区域，这是在轻量级锁运行过程创建的，用于存放锁对象的 Mark Word。而右侧就是一个锁对象，包含了 Mark Word 和其它信息。</p><p><img src="http://qnya.pomo16.club/197.png" alt></p><p>轻量级锁是相对于传统的重量级锁而言，它使用 CAS 操作来避免重量级锁使用互斥量的开销。对于绝大部分的锁，在整个同步周期内都是不存在竞争的，因此也就不需要都使用互斥量进行同步，可以先采用 CAS 操作进行同步，如果 CAS 失败了再改用互斥量进行同步。</p><p>当尝试获取一个锁对象时，如果锁对象标记为 0 01，说明锁对象的锁未锁定（unlocked）状态。此时虚拟机在当前线程的虚拟机栈中创建 Lock Record，然后使用 CAS 操作将对象的 Mark Word 更新为 Lock Record 指针。如果 CAS 操作成功了，那么线程就获取了该对象上的锁，并且对象的 Mark Word 的锁标记变为 00，表示该对象处于轻量级锁状态。</p><p><img src="http://qnya.pomo16.club/198.png" alt></p><p>如果 CAS 操作失败了，虚拟机首先会检查对象的 Mark Word 是否指向当前线程的虚拟机栈，如果是的话说明当前线程已经拥有了这个锁对象，那就可以直接进入同步块继续执行，否则说明这个锁对象已经被其他线程线程抢占了。如果有两条以上的线程争用同一个锁，那轻量级锁就不再有效，要膨胀为重量级锁。</p><h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h2><p>偏向锁的思想是偏向于让第一个获取锁对象的线程，这个线程在之后获取该锁就不再需要进行同步操作，甚至连 CAS 操作也不再需要。</p><p>当锁对象第一次被线程获得的时候，进入偏向状态，标记为 1 01。同时使用 CAS 操作将线程 ID 记录到 Mark Word 中，如果 CAS 操作成功，这个线程以后每次进入这个锁相关的同步块就不需要再进行任何同步操作。</p><p>当有另外一个线程去尝试获取这个锁对象时，偏向状态就宣告结束，此时撤销偏向（Revoke Bias）后恢复到未锁定状态或者轻量级锁状态。</p><p><img src="http://qnya.pomo16.club/199.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2019/04/06/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2019/04/06/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li><p>待排序的元素需要实现 Java 的 Comparable 接口，该接口有 compareTo() 方法，可以用它来判断两个元素的大小关系。</p></li><li><p>研究排序算法的成本模型时，统计的是比较和交换的次数。</p></li><li><p>使用辅助函数 less() 和 swap() 来进行比较和交换的操作，使得代码的可读性和可移植性更好。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] nums)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(T v, T w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(T[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        T t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>从左到右不断交换相邻逆序的元素，在一轮的循环之后，可以让未排序的最大元素上浮到右侧。</p><p>在一轮循环中，如果没有发生交换，就说明数组已经是有序的，此时可以直接退出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bubble</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">Sort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = nums.length;</span><br><span class="line">        <span class="keyword">boolean</span> hasSorted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt; <span class="number">0</span> &amp;&amp; !hasSorted; i--) &#123;</span><br><span class="line">            hasSorted = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (less(nums[j + <span class="number">1</span>], nums[j])) &#123;</span><br><span class="line">                    hasSorted = <span class="keyword">false</span>;</span><br><span class="line">                    swap(nums, j, j + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>每次都将当前元素插入到左侧已经排序的数组中，使得插入之后左侧数组依然有序。</p><p>对于数组 {3, 5, 2, 4, 1}，它具有以下逆序：(3, 2), (3, 1), (5, 2), (5, 4), (5, 1), (2, 1), (4, 1)，插入排序每次只能交换相邻元素，令逆序数量减少 1，因此插入排序需要交换的次数为逆序数量。</p><p>插入排序的复杂度取决于数组的初始顺序，如果数组已经部分有序了，逆序较少，那么插入排序会很快。</p><ul><li>平均情况下插入排序需要 ~N<sup>2</sup>/4 比较以及 ~N<sup>2</sup>/4 次交换；</li><li>最坏的情况下需要 ~N<sup>2</sup>/2 比较以及 ~N<sup>2</sup>/2 次交换，最坏的情况是数组是倒序的；</li><li>最好的情况下需要 N-1 次比较和 0 次交换，最好的情况就是数组已经有序了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Insertion</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">Sort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; less(nums[j], nums[j - <span class="number">1</span>]); j--) &#123;</span><br><span class="line">                swap(nums, j, j - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择出数组中的最小元素，将它与数组的第一个元素交换位置。再从剩下的元素中选择出最小的元素，将它与数组的第二个元素交换位置。不断进行这样的操作，直到将整个数组排序。</p><p>选择排序需要 ~N<sup>2</sup>/2 次比较和 ~N 次交换，它的运行时间与输入无关，这个特点使得它对一个已经排序的数组也需要这么多的比较和交换操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Selection</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">Sort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> min = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (less(nums[j], nums[min])) &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(nums, i, min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><ul><li><p>对于大规模的数组，插入排序很慢，因为它只能交换相邻的元素，每次只能将逆序数量减少 1。</p></li><li><p>希尔排序的出现就是为了解决插入排序的这种局限性，它通过交换不相邻的元素，每次可以将逆序数量减少大于 1。</p></li><li><p>希尔排序使用插入排序对间隔 h 的序列进行排序。通过不断减小 h，最后令 h=1，就可以使得整个数组是有序的。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shell</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">Sort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] nums)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> N = nums.length;</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (h &lt; N / <span class="number">3</span>) &#123;</span><br><span class="line">            h = <span class="number">3</span> * h + <span class="number">1</span>; <span class="comment">// 1, 4, 13, 40, ...</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; N; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; less(nums[j], nums[j - h]); j -= h) &#123;</span><br><span class="line">                    swap(nums, j, j - h);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            h = h / <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>希尔排序的运行时间达不到平方级别，使用递增序列 1, 4, 13, 40, … 的希尔排序所需要的比较次数不会超过 N 的若干倍乘于递增序列的长度。后面介绍的高级排序算法只会比希尔排序快两倍左右。</p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序的思想是将数组分成两部分，分别进行排序，然后归并起来。</p><h3 id="归并方法"><a href="#归并方法" class="headerlink" title="归并方法"></a>归并方法</h3><p>归并方法将数组中两个已经排序的部分归并成一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">Sort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(T[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right, T[] temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = left; <span class="comment">//左序列指针</span></span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>; <span class="comment">//右序列指针</span></span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;<span class="comment">//临时数组指针</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(less(arr[i], arr[j]))&#123;</span><br><span class="line">                temp[t++] = arr[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                temp[t++] = arr[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= mid)&#123;<span class="comment">//将左边剩余元素填充进temp中</span></span><br><span class="line">            temp[t++] = arr[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= right)&#123;<span class="comment">//将右序列剩余元素填充进temp中</span></span><br><span class="line">            temp[t++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//将temp中的元素全部拷贝到原数组中</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            arr[left++] = temp[t++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自顶向下归并排序"><a href="#自顶向下归并排序" class="headerlink" title="自顶向下归并排序"></a>自顶向下归并排序</h3><p>将一个大数组分成两个小数组去求解。</p><p>因为每次都将问题对半分成两个子问题，这种对半分的算法复杂度一般为 O(NlogN)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Up2DownMergeSort</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">MergeSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] nums)</span> </span>&#123;</span><br><span class="line">        T[] temp = (T[]) <span class="keyword">new</span> Comparable[nums.length];<span class="comment">//在排序前，先建好一个长度等于原数组长度的临时数组，避免递归中频繁开辟空间</span></span><br><span class="line">        sort(nums, <span class="number">0</span>, nums.length-<span class="number">1</span>, temp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right, T[] temp)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            sort(nums, left, mid, temp);<span class="comment">//左边归并排序，使得左子序列有序</span></span><br><span class="line">            sort(nums, mid + <span class="number">1</span>, right, temp);<span class="comment">//右边归并排序，使得右子序列有序</span></span><br><span class="line">            merge(nums, left, mid, right, temp);<span class="comment">//将两个有序子数组合并操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ul><li>归并排序将数组分为两个子数组分别排序，并将有序的子数组归并使得整个数组排序；</li><li>快速排序通过一个切分元素将数组分为两个子数组，左子数组小于等于切分元素，右子数组大于等于切分元素，将这两个子数组排序也就将整个数组排序了。</li><li>取 a[l] 作为切分元素，然后从数组的左端向右扫描直到找到第一个大于等于它的元素，再从数组的右端向左扫描找到第一个小于它的元素，交换这两个元素。不断进行这个过程，就可以保证左指针 i 的左侧元素都不大于切分元素，右指针 j 的右侧元素都不小于切分元素。当两个指针相遇时，将切分元素 a[l] 和 a[j] 交换位置。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">Sort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] nums)</span> </span>&#123;</span><br><span class="line">        sort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] nums, <span class="keyword">int</span> l, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (h &lt;= l)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> j = partition(nums, l, h);</span><br><span class="line">        sort(nums, l, j - <span class="number">1</span>);</span><br><span class="line">        sort(nums, j + <span class="number">1</span>, h);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(T[] nums, <span class="keyword">int</span> l, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = l, j = h + <span class="number">1</span>;</span><br><span class="line">        T v = nums[l];</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (less(nums[++i], v) &amp;&amp; i != h) ;</span><br><span class="line">            <span class="keyword">while</span> (less(v, nums[--j]) &amp;&amp; j != l) ;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= j)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            swap(nums, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums, l, j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>性能分析</p><ul><li><p>快速排序是原地排序，不需要辅助数组，但是递归调用需要辅助栈。</p></li><li><p>快速排序最好的情况下是每次都正好将数组对半分，这样递归调用次数才是最少的。这种情况下比较次数为 C<sub>N</sub>=2C<sub>N/2</sub>+N，复杂度为 O(NlogN)。</p></li><li><p>最坏的情况下，第一次从最小的元素切分，第二次从第二小的元素切分，如此这般。因此最坏的情况下需要比较 N<sup>2</sup>/2。为了防止数组最开始就是有序的，在进行快速排序时需要随机打乱数组。</p></li></ul></li><li><p>算法改进</p><ul><li><p>切换到插入排序</p><p>因为快速排序在小数组中也会递归调用自己，对于小数组，插入排序比快速排序的性能更好，因此在小数组中可以切换到插入排序。</p></li><li><p>三数取中</p><p>最好的情况下是每次都能取数组的中位数作为切分元素，但是计算中位数的代价很高。一种折中方法是取 3 个元素，并将大小居中的元素作为切分元素。</p></li><li><p>三向切分</p><p>对于有大量重复元素的数组，可以将数组切分为三部分，分别对应小于、等于和大于切分元素。</p><p>三向切分快速排序对于有大量重复元素的随机数组可以在线性时间内完成排序。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeWayQuickSort</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">QuickSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] nums, <span class="keyword">int</span> l, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (h &lt;= l) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> lt = l, i = l + <span class="number">1</span>, gt = h;</span><br><span class="line">        T v = nums[l];</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= gt) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = nums[i].compareTo(v);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                swap(nums, lt++, i++);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                swap(nums, i, gt--);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(nums, l, lt - <span class="number">1</span>);</span><br><span class="line">        sort(nums, gt + <span class="number">1</span>, h);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>堆中某个节点的值总是大于等于其子节点的值，并且堆是一颗完全二叉树。</p><p>堆可以用数组来表示，这是因为堆是完全二叉树，而完全二叉树很容易就存储在数组中。位置 k 的节点的父节点位置为 k/2，而它的两个子节点的位置分别为 2k 和 2k+1。这里不使用数组索引为 0 的位置，是为了更清晰地描述节点的位置关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heap</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T[] heap;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Heap</span><span class="params">(<span class="keyword">int</span> maxN)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.heap = (T[]) <span class="keyword">new</span> Comparable[maxN + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> heap[i].compareTo(heap[j]) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        T t = heap[i];</span><br><span class="line">        heap[i] = heap[j];</span><br><span class="line">        heap[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上浮和下沉"><a href="#上浮和下沉" class="headerlink" title="上浮和下沉"></a>上浮和下沉</h3><p>在堆中，当一个节点比父节点大，那么需要交换这个两个节点。交换后还可能比它新的父节点大，因此需要不断地进行比较和交换操作，把这种操作称为上浮。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; less(k / <span class="number">2</span>, k)) &#123;</span><br><span class="line">        swap(k / <span class="number">2</span>, k);</span><br><span class="line">        k = k / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似地，当一个节点比子节点来得小，也需要不断地向下进行比较和交换操作，把这种操作称为下沉。一个节点如果有两个子节点，应当与两个子节点中最大那个节点进行交换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= N) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">2</span> * k;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; N &amp;&amp; less(j, j + <span class="number">1</span>))</span><br><span class="line">            j++;</span><br><span class="line">        <span class="keyword">if</span> (!less(k, j))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        swap(k, j);</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><p>将新元素放到数组末尾，然后上浮到合适的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Comparable v)</span> </span>&#123;</span><br><span class="line">    heap[++N] = v;</span><br><span class="line">    swim(N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除最大元素"><a href="#删除最大元素" class="headerlink" title="删除最大元素"></a>删除最大元素</h3><p>从数组顶端删除最大的元素，并将数组的最后一个元素放到顶端，并让这个元素下沉到合适的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">delMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T max = heap[<span class="number">1</span>];</span><br><span class="line">    swap(<span class="number">1</span>, N--);</span><br><span class="line">    heap[N + <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">    sink(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序-1"><a href="#堆排序-1" class="headerlink" title="堆排序"></a>堆排序</h3><p>把最大元素和当前堆中数组的最后一个元素交换位置，并且不删除它，那么就可以得到一个从尾到头的递减序列，从正向来看就是一个递增序列，这就是堆排序。</p><ul><li><p>构建堆</p><p>无序数组建立堆最直接的方法是从左到右遍历数组进行上浮操作。一个更高效的方法是从右至左进行下沉操作，如果一个节点的两个节点都已经是堆有序，那么进行下沉操作可以使得这个节点为根节点的堆有序。叶子节点不需要进行下沉操作，可以忽略叶子节点的元素，因此只需要遍历一半的元素即可。</p></li><li><p>交换堆顶元素与最后一个元素</p><p>交换之后需要进行下沉操作维持堆的有序状态。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">Sort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组第 0 个位置不能有元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = N / <span class="number">2</span>; k &gt;= <span class="number">1</span>; k--)</span><br><span class="line">            sink(nums, k, N);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (N &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            swap(nums, <span class="number">1</span>, N--);</span><br><span class="line">            sink(nums, <span class="number">1</span>, N);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(T[] nums, <span class="keyword">int</span> k, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= N) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span> * k;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; N &amp;&amp; less(nums, j, j + <span class="number">1</span>))</span><br><span class="line">                j++;</span><br><span class="line">            <span class="keyword">if</span> (!less(nums, k, j))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            swap(nums, k, j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(T[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums[i].compareTo(nums[j]) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>一个堆的高度为 logN，因此在堆中插入元素和删除最大元素的复杂度都为 logN。</p><p>对于堆排序，由于要对 N 个节点进行下沉操作，因此复杂度为 NlogN。</p><p>堆排序是一种原地排序，没有利用额外的空间。</p><p>现代操作系统很少使用堆排序，因为它无法利用局部性原理进行缓存，也就是数组元素很少和相邻的元素进行比较和交换。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h3 id="排序算法的比较"><a href="#排序算法的比较" class="headerlink" title="排序算法的比较"></a>排序算法的比较</h3><table><thead><tr><th>算法</th><th>稳定性</th><th>时间复杂度</th><th>空间复杂度</th><th>备注</th></tr></thead><tbody><tr><td>选择排序</td><td>×</td><td>N<sup>2</sup></td><td>1</td><td></td></tr><tr><td>冒泡排序</td><td>√</td><td>N<sup>2</sup></td><td>1</td><td></td></tr><tr><td>插入排序</td><td>√</td><td>N ~ N<sup>2</sup></td><td>1</td><td>时间复杂度和初始顺序有关</td></tr><tr><td>希尔排序</td><td>×</td><td>N 的若干倍乘于递增序列的长度</td><td>1</td><td>改进版插入排序</td></tr><tr><td>快速排序</td><td>×</td><td>NlogN</td><td>logN</td><td></td></tr><tr><td>三向切分快速排序</td><td>×</td><td>N ~ NlogN</td><td>logN</td><td>适用于有大量重复主键</td></tr><tr><td>归并排序</td><td>√</td><td>NlogN</td><td>N</td><td></td></tr><tr><td>堆排序</td><td>×</td><td>NlogN</td><td>1</td><td>无法利用局部性原理</td></tr></tbody></table><p>快速排序是最快的通用排序算法，它的内循环的指令很少，而且它还能利用缓存，因为它总是顺序地访问数据。它的运行时间近似为 ~cNlogN，这里的 c 比其它线性对数级别的排序算法都要小。</p><p>使用三向切分快速排序，实际应用中可能出现的某些分布的输入能够达到线性级别，而其它排序算法仍然需要线性对数时间。</p><h3 id="Java-的排序算法实现"><a href="#Java-的排序算法实现" class="headerlink" title="Java 的排序算法实现"></a>Java 的排序算法实现</h3><p>Java 主要排序方法为 java.util.Arrays.sort()，对于原始数据类型使用三向切分的快速排序，对于引用类型使用归并排序。</p><p><img src="http://qnya.pomo16.club/200.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客迁移</title>
      <link href="/2019/04/05/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
      <url>/2019/04/05/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<p>把 hexo 博客从 win10 迁移到 Mac 上打理。</p><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li><p>安装  <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a></p></li><li><p>在 Homebrew 上安装 nodejs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure></li><li><p>使用 npm 搭建 hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>这时候在 localhost:4000 就能看到 hexo 的欢迎界面了。</p><p>注意：这里 npm 下载因为源的问题可能会很慢，可使用以下方法解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li></ul><h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><ul><li><p>在 blog 目录下初始化 git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>安装 git 依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>设置配置 user.name 和 user.email</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name "xxx"  //(""的账号是Github里面自己的账号) </span><br><span class="line">git config user.email "xxx@xxx.com" //(""的邮箱是你自己注册的邮箱)</span><br></pre></td></tr></table></figure></li><li><p>设置 ssh key 到 GitHub</p><ul><li>复制 .ssh 中的 id_rsa.pub 中的内容到 github 的 SSH keys 中</li></ul></li><li><p>测试 ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果是第一次测试的话终端会丢一个 warn 来问候你一下，敲 yes 然后回车就行了。如果收到 Hi xxx!(xxx是你的用户名)，证明 ssh 连接成功。</p></li><li><p>把博客文件复制到新的博客文件中覆盖</p><ul><li><p>复制之前可以用 <code>hexo clean</code> 来清一下文件</p></li><li><p>复制不必全部复制覆盖，只需如下文件即可：</p><ul><li>_config.yml</li><li>package.json</li><li>scaffolds/</li><li>source/</li><li>themes/</li></ul></li></ul></li><li><p>安装自定义主题所需要的依赖，到主题官网查看即可</p></li><li><p>执行 <code>hexo d -g</code> 查看效果，大功告成。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合常用方法</title>
      <link href="/2019/04/03/Java%E9%9B%86%E5%90%88%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2019/04/03/Java%E9%9B%86%E5%90%88%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Collection-常用方法"><a href="#Collection-常用方法" class="headerlink" title="Collection 常用方法"></a>Collection 常用方法</h2><table><thead><tr><th>方法</th><th>详解</th></tr></thead><tbody><tr><td>boolean add(E e)</td><td>添加元素到 Collection 集合中</td></tr><tr><td>boolean addAll(Collection&lt;? extends E&gt; c)</td><td>将指定 c 中的所有元素都添加到此 Collection 集合中</td></tr><tr><td>void clear()</td><td>移除此 Collection 集合中的所有元素</td></tr><tr><td>boolean contains(Object o)</td><td>检查 Collection 集合中是否包含 o 对象，如果包含则返回 true，否则返回 false</td></tr><tr><td>boolean containsAll(Collection&lt;?&gt; c)</td><td>检查 Collection 集合中是否包含c的全部对象，全部包含则返回 true，否则返回 false</td></tr><tr><td>boolean equals(Object o)</td><td>比较此 Collection 集合与指定对象是否相等，是比较的是里面元素是否相等，而不是比较地址是否相等</td></tr><tr><td>int hashCode()</td><td>返回此 Collection 集合的哈希码值</td></tr><tr><td>boolean isEmpty()</td><td>检查 Collection 集合是否包含有元素，如果没有包含元素，则返回 true，否则返回 false</td></tr><tr><td><code>Iterator&lt;E&gt; iterator()</code></td><td>返回在此 Collection 集合的元素上进行迭代的迭代器</td></tr><tr><td>boolean remove(Object o)</td><td>从 Collection 集合中删除指定的元素，如果集合中有这个元素，并且删除成功，那么就返回 true，否则返回 false</td></tr><tr><td>boolean removeAll(Collection&lt;?&gt; c)</td><td>从集合中删除c集合中所有的元素</td></tr><tr><td>boolean retainAll(Collection&lt;?&gt; c)</td><td>集合中仅保留c集合中的所有元素</td></tr><tr><td>int size()</td><td>返回集合中元素个数</td></tr><tr><td>Object[] toArray()</td><td>返回包含此 Collection 集合中所有元素的数组</td></tr></tbody></table><h2 id="List-集合常用方法"><a href="#List-集合常用方法" class="headerlink" title="List 集合常用方法"></a>List 集合常用方法</h2><p>继承 Collection 常用方法</p><table><thead><tr><th>方法</th><th>详解</th></tr></thead><tbody><tr><td>void add(int index, E element)</td><td>在指定位置插入元素，后面的元素都往后移一个元素</td></tr><tr><td>boolean addAll(int index, Collection&lt;? extends E&gt; c)</td><td>在指定的位置中插入 c 集合全部的元素，如果集合发生改变，则返回 true，否则返回 false</td></tr><tr><td>E get(int index)</td><td>返回 list 集合中指定索引位置的元素</td></tr><tr><td>int indexOf(Object o)</td><td>返回 list 集合中第一次出现 o 对象的索引位置，如果 list 集合中没有 o 对象，那么就返回 -1</td></tr><tr><td><code>ListIterator&lt;E&gt; listIterator()</code></td><td>返回此列表元素的列表迭代器（按适当顺序）</td></tr><tr><td><code>ListIterator&lt;E&gt; listIterator(int index)</code></td><td>从指定位置开始，返回此列表元素的列表迭代器（按适当顺序）</td></tr><tr><td>E remove(int index)</td><td>删除指定索引的对象</td></tr><tr><td>E set(int index, E element)</td><td>在索引为 index 位置的元素更改为 element 元素</td></tr><tr><td><code>List&lt;E&gt; subList(int fromIndex, int toIndex)</code></td><td>返回从索引 fromIndex 到 toIndex 的元素集合，包左不包右</td></tr></tbody></table><h2 id="Set-集合使用方法"><a href="#Set-集合使用方法" class="headerlink" title="Set 集合使用方法"></a>Set 集合使用方法</h2><p>继承 Collection 常用方法</p><h2 id="Map-集合常用方法"><a href="#Map-集合常用方法" class="headerlink" title="Map 集合常用方法"></a>Map 集合常用方法</h2><table><thead><tr><th>方法</th><th>详解</th></tr></thead><tbody><tr><td>V put(K key, V value)</td><td>向 map 集合中添加 Key 为 key，Value 为 value 的元素，当添加成功时返回 null，否则返回 value</td></tr><tr><td>void putAll(Map&lt;? extends K,? extends V&gt; m)</td><td>向 map 集合中添加指定集合的所有元素</td></tr><tr><td>void clear()</td><td>把 map 集合中所有的键值删除</td></tr><tr><td>boolean containsKey(Object key)</td><td>检出 map 集合中有没有包含 Key 为 key 的元素，如果有则返回 true，否则返回 false</td></tr><tr><td>boolean containsValue(Object value)</td><td>检出 map 集合中有没有包含 Value 为 value 的元素，如果有则返回 true，否则返回 false</td></tr><tr><td>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</td><td>返回 map 到一个 Set 集合中，以 map 集合中的 Key=Value 的形式返回到 set 中</td></tr><tr><td>boolean equals(Object o)</td><td>判断两个 Set 集合的元素是否相同</td></tr><tr><td>V get(Object key)</td><td>根据 map 集合中元素的 Key 来获取相应元素的 Value</td></tr><tr><td>int hashCode()</td><td>返回 map 集合的哈希码值</td></tr><tr><td>boolean isEmpty()</td><td>检出 map 集合中是否有元素，如果没有则返回 true，如果有元素则返回 false</td></tr><tr><td><code>Set&lt;K&gt; keySet()</code></td><td>返回 map 集合中所有 Key</td></tr><tr><td>V remove(Object key)</td><td>删除 Key 为 key 值的元素</td></tr><tr><td>int size()</td><td>返回 map 集合中元素个数</td></tr><tr><td><code>Collection&lt;V&gt; values()</code></td><td>返回 map 集合中所有的 Value 到一个 Collection 集合</td></tr></tbody></table><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>其余的方法都是实现Map集合的</p><table><thead><tr><th>方法</th><th>详解</th></tr></thead><tbody><tr><td>public Object clone()</td><td>返回 hashMap 集合的副本</td></tr></tbody></table><h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><p>其他的方法都是实现 Map 集合的方法</p><table><thead><tr><th>方法</th><th>详解</th></tr></thead><tbody><tr><td>public Object clone()</td><td>返回 Hashtable 的副本</td></tr><tr><td><code>public Enumeration&lt;V&gt; elements()</code></td><td>返回此哈希表中的值的枚举</td></tr></tbody></table><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><p>其他的方法都是实现 Map 集合的方法</p><table><thead><tr><th>方法</th><th>详解</th></tr></thead><tbody><tr><td>public Map.Entry&lt;K,V&gt; <strong>ceilingEntry</strong>(K key)</td><td>返回指定的 Key 大于或等于的最小值的元素，如果没有，则返回 null</td></tr><tr><td>public K <strong>ceilingKey</strong>(K key)</td><td>返回指定的 Key 大于或等于的最小值的 Key，如果没有，则返回 null</td></tr><tr><td>public Object <strong>clone</strong>()</td><td>返回集合的副本</td></tr><tr><td>public Comparator&lt;? super K&gt; <strong>comparator</strong>()</td><td>如果使用默认的比较器，就返回 null，如果使用其他的比较器，则返回比较器的哈希码值</td></tr><tr><td><code>public NavigableSet&lt;K&gt; descendingKeySet()</code></td><td>返回集合的全部 Key，并且是逆序的</td></tr><tr><td>public NavigableMap&lt;K,V&gt; <strong>descendingMap</strong>()</td><td>把集合逆序返回</td></tr><tr><td>public Map.Entry&lt;K,V&gt; <strong>firstEntry</strong>()</td><td>返回集合中最小 Key 的元素</td></tr><tr><td>public K <strong>firstKey</strong>()</td><td>返回集合中最小 Key 的 key</td></tr><tr><td>public Map.Entry&lt;K,V&gt; <strong>floorEntry</strong>(K key)</td><td>与 ceilingEntry() 方法相反，是返回小于等于 key 的最大 Key 的元素</td></tr><tr><td>public K <strong>floorKey</strong>(K key)</td><td>返回小于等于 key 的最大 Key 的 key</td></tr><tr><td>public SortedMap&lt;K,V&gt; <strong>headMap</strong>(K toKey)</td><td>返回 Key 小于 toKey 的所有元素</td></tr><tr><td>public NavigableMap&lt;K,V&gt; <strong>headMap</strong>(K toKey, boolean inclusive)</td><td>当 inclusive 为 true 时，就是返回 Key 小于等于 toKey 的所有元素</td></tr><tr><td>public Map.Entry&lt;K,V&gt; <strong>higherEntry</strong>(K key)</td><td>返回 Key 大于 key 的所有元素</td></tr><tr><td>public K <strong>higherKey</strong>(K key)</td><td>返回 Key 大于 key 的所有 Key</td></tr><tr><td>public Map.Entry&lt;K,V&gt; <strong>lastEntry</strong>()</td><td>返回 Key 最大的元素</td></tr><tr><td>public K <strong>lastKey</strong>()</td><td>返回 Key 最大的 Key</td></tr><tr><td>public Map.Entry&lt;K,V&gt; <strong>lowerEntry</strong>(K key)</td><td>返回小于 key 的最大元素</td></tr><tr><td>public K <strong>lowerKey</strong>(K key)</td><td>返回小于 key 最大的 Key</td></tr><tr><td>public Map.Entry&lt;K,V&gt; <strong>pollFirstEntry</strong>()</td><td>删除 key 最小的元素</td></tr><tr><td>public Map.Entry&lt;K,V&gt; <strong>pollLastEntry</strong>()</td><td>删除最大 Key 的元素</td></tr><tr><td>public NavigableMap&lt;K,V&gt; <strong>subMap</strong>(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)</td><td>截取集合中 Key 从 fromKey 到 toKey 的元素，否是截取他们本身，取决于 true 或者 false</td></tr><tr><td>public SortedMap&lt;K,V&gt; <strong>subMap</strong>(K fromKey, K toKey)</td><td>截取集合中 Key 从 fromKey 到 toKey 的元素，包括 fromKey，不包括 toKey</td></tr><tr><td>public SortedMap&lt;K,V&gt; <strong>tailMap</strong>(K fromKey)</td><td>截取 Key 大于等于 fromKey 的所有元素</td></tr><tr><td>public NavigableMap&lt;K,V&gt; <strong>tailMap</strong>(K fromKey, boolean inclusive)</td><td>当 inclusive 为 true 时，截取 Key 大于等于 fromKey 的所有元素，否则截取 Key 大于 fromKey 的所有元素</td></tr></tbody></table><h2 id="Vector-常用方法"><a href="#Vector-常用方法" class="headerlink" title="Vector 常用方法"></a>Vector 常用方法</h2><p>Vector 类是实现 List 接口，所以继承的方法就不在这里讲了</p><table><thead><tr><th>方法</th><th>详解</th></tr></thead><tbody><tr><td>public void <strong>add</strong>(int index, E element)</td><td>从 index 索引的位置添加 element 元素，后面的元素都往后移一位</td></tr><tr><td>public boolean <strong>addAll</strong>(int index, Collection&lt;? extends E&gt; c)</td><td>从 index 索引位置开始添加 c 集合里所有的元素，后面的元素都往后移 c.size() 位</td></tr><tr><td>public void <strong>addElement</strong>(E obj)</td><td>在集合后面添加一个元素，无论该元素是什么类型的，都会把他的 toString() 的返回值添加进去</td></tr><tr><td>public int <strong>capacity</strong>()</td><td>返回此向量的当前容量，不是元素个数</td></tr><tr><td>public void <strong>copyInto</strong>(Object[] anArray)</td><td>把集合中的元素复制到 anArray 数组中去</td></tr><tr><td>public E <strong>elementAt</strong>(int index)</td><td>返回索引位置的元素</td></tr><tr><td><code>public Enumeration&lt;E&gt; elements()</code></td><td>返回集合的枚举</td></tr><tr><td>public void <strong>ensureCapacity</strong>(int minCapacity)</td><td>增加集合的容量，如果增大的容量小于10，那么无效，也就是增大容量要是10倍数</td></tr><tr><td>public void <strong>insertElementAt</strong>(E obj, int index)</td><td>在指定索引位置中插入 obj 元素</td></tr><tr><td>public void <strong>removeAllElements</strong>()</td><td>删除集合的所有元素，并且设置容量为0，和 clear() 方法一样， clear 底层也是用 removeAllElements() 方法的</td></tr><tr><td>public void <strong>setSize</strong>(int newSize)</td><td>设置集合的容量大小为 newSize，如果 newSize 大于集合元素个数，那么会在后面添加 null，如果 newSize 小于集合元素个数，那么直保留 newSize 个元素</td></tr><tr><td>public void <strong>trimToSize</strong>()</td><td>整理集合的容量大小，如果集合元素个数等于容量大小，那么没有变化，如果集合个数小于容量大小，那么容量会设置为元素个数大小</td></tr></tbody></table><h2 id="Arrays-工具类常用方法"><a href="#Arrays-工具类常用方法" class="headerlink" title="Arrays 工具类常用方法"></a>Arrays 工具类常用方法</h2><ul><li><p><strong>Arrays.asList(T… data)</strong> </p><p>返回一个受指定数组支持的固定大小的列表。</p></li><li><p><strong>Arrays.binarySearch()</strong></p><p>注意：在调用该方法之前，必须先调用 sort() 方法进行排序，如果数组没有排序，<br>那么结果是不确定的，此外如果数组中包含多个指定元素，则无法保证将找到哪个元素</p><ul><li><p><strong>Arrays.binarySearch(Object[] array, Object key)</strong></p><p>使用二分法查找数组内指定元素的索引值</p></li><li><p><strong>Arrays.binarySearch(Object[] array, int fromIndex, int toIndex, Object obj)</strong></p><p>使用二分法查找数组内指定范围内的指定元素的索引值</p></li></ul></li><li><p><strong>Arrays.copyOf(T[] original, int newLength)</strong></p><p>拷贝数组，其内部调用了 System.arraycopy() 方法，从下标0开始，如果超过原数组长度，会用null进行填充</p></li><li><p><strong>Arrays.copyOfRange(T[] original, int from, int to)</strong></p><p>拷贝数组，指定起始位置和结束位置，如果超过原数组长度，会用null进行填充</p></li><li><p><strong>Arrays.equals(Object[] array1, Object[] array2)</strong></p><p>判断两个数组是否相等，实际上比较的是两个数组的哈希值，即 Arrays.hashCode(data1) == Arrays.hashCode(data2)</p></li><li><p><strong>Arrays.deepEquals(Object[] array1, Object[] array2)</strong></p><p>判断两个多维数组是否相等，实际上比较的是两个数组的哈希值，即 Arrays.hashCode(data1) == Arrays.hashCode(data2)</p></li><li><p><strong>Arrays.fill()</strong></p><ul><li><p><strong>Arrays.fill(Object[] array, Object obj)</strong></p><p>用指定元素填充整个数组（会替换掉数组中原来的元素）</p></li><li><p><strong>Arrays.fill(Object[] array, int fromIndex, int toIndex, Object obj)</strong></p><p>用指定元素填充数组，从起始位置到结束位置，取头不取尾（会替换掉数组中原来的元素）</p></li></ul></li><li><p><strong>Arrays.sort()</strong></p><ul><li><p><strong>Arrays.sort(Object[] array)</strong></p><p>对数组元素进行排序（串行排序）</p></li><li><p><strong>Arrays.sort(T[] array, Comparator&lt;? super T&gt; comparator)</strong></p><p>使用自定义比较器，对数组元素进行排序（串行排序）</p></li><li><p><strong>Arrays.sort(Object[] array, int fromIndex, int toIndex)</strong></p><p>对数组元素的指定范围进行排序（串行排序）</p></li><li><p><strong>Arrays.sort(T[] array, int fromIndex, int toIndex, Comparator&lt;? super T&gt; c)</strong></p><p>使用自定义比较器，对数组元素的指定范围进行排序（串行排序）</p></li></ul></li><li><p><strong>Arrays.parallelSort()</strong> </p><ul><li><p><strong>Arrays.parallelSort(T[] array)</strong></p><p>对数组元素进行排序（并行排序），当数据规模较大时，会有更好的性能</p></li></ul></li><li><p><strong>Arrays.hashCode(Object[] array)</strong></p><p>返回数组的哈希值</p></li><li><p><strong>Arrays.deepHashCode(Object[] array)</strong></p><p>返回多维数组的哈希值</p></li><li><p><strong>Arrays.toString(Object[] array)</strong></p><p>返回数组元素的字符串形式</p></li><li><p><strong>Arrays.deepToString(Object[] array)</strong></p><p>返回多维数组元素的字符串形式</p></li><li><p><strong>Arrays.setAll(T[] array, IntFunction)</strong></p><p>把 array 里的每个元素执行 IntFunction 表达式(一个 lambda 表达式)</p></li><li><p><strong>Arrays.parallelSetAll(T[] array, IntFunction)</strong></p><p>并行地把 array 里的每个元素执行 IntFunction 表达式(一个 lambda 表达式)</p></li><li><p><strong>Arrays.spliterator(T[] array)</strong></p><p>返回数组的分片迭代器，用于并行遍历数组</p></li><li><p><strong>Arrays.stream(T[] array)</strong></p><p>返回数组的流 Stream，然后我们就可以使用 Stream 相关的许多方法了</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java网络通信</title>
      <link href="/2019/04/02/Java%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/04/02/Java%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-Socket-和网络模型"><a href="#Java-Socket-和网络模型" class="headerlink" title="Java Socket 和网络模型"></a>Java Socket 和网络模型</h2><p> Java Socket 是 JVM 通过操作系统操控 CPU、网卡与外界通信的一个组件，包括 BIO、NIO、AIO 等网络 IO 组件的底层也是 Socket。在了解 Java Socket 之前最好先了解一下网络模型的相关概念：</p><h3 id="OSI-七层模型"><a href="#OSI-七层模型" class="headerlink" title="OSI 七层模型"></a>OSI 七层模型</h3><ul><li>应用层:主机中的各个进程，提供端口号供访问</li><li>表示层:将主机中的进程传递的数据通过不同的OS编译/转换/加密处理后交给硬件(网卡)</li><li>会话层:标识相互通讯的主机间正在进行的回话，负责建立、管理、终止会话</li><li>传输层:数据脱离网卡后即进入传输层，记录了即将访问的端口号(TCP/UDP)，将数据分段</li><li>网络层:通过网线寻找目标主机(TCP/IP)</li><li>链路层:将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。</li><li>物理层:建立、维护、断开物理连接。</li></ul><h3 id="TCP-IP-四层模型"><a href="#TCP-IP-四层模型" class="headerlink" title="TCP/IP 四层模型"></a>TCP/IP 四层模型</h3><ul><li><p>主机到网络层</p><ul><li>实际上 TCP/IP 参考模型没有真正描述这一层的实现，只是要求能够提供给其上层-网络互连层一个访问接口，以便在其上传递 IP 分组。由于这一层次未被定义，所以其具体的实现方法将随着网络类型的不同而不同。</li></ul></li><li><p>网络互连层</p><ul><li><p>网络互连层是整个 TCP/IP 协议栈的核心。它的功能是把分组发往目标网络或主机。同时，为了尽快地发送分组，可能需要沿不同的路径同时进行分组传递。因此，分组到达的顺序和发送的顺序可能不同，这就需要上层必须对分组进行排序。</p></li><li><p>网络互连层定义了分组格式和协议，即 IP 协议（Internet Protocol）。</p></li><li>网络互连层除了需要完成路由的功能外，也可以完成将不同类型的网络（异构网）互连的任务。除此之外，网络互连层还需要完成拥塞控制的功能。</li></ul></li><li><p>传输层</p><ul><li>在 TCP/IP 模型中，传输层的功能是使源端主机和目标端主机上的对等实体可以进行会话。在传输层定义了两种服务质量不同的协议。即：传输控制协议 TCP（transmission control protocol）和用户数据报协议 UDP（user datagram protocol）。</li><li>TCP 协议是一个面向连接的、可靠的协议。它将一台主机发出的字节流无差错地发往互联网上的其他主机。在发送端，它负责把上层传送下来的字节流分成报文段并传递给下层。在接收端，它负责把收到的报文进行重组后递交给上层。</li><li>TCP 协议还要处理端到端的流量控制，以避免缓慢接收的接收方没有足够的缓冲区接收发送方发送的大量数据。</li><li>UDP协议是一个不可靠的、无连接协议，主要适用于不需要对报文进行排序和流量控制的场合。</li></ul></li><li><p>应用层</p><ul><li>TCP/IP 模型将 OSI 参考模型中的会话层和表示层的功能合并到应用层实现。</li><li>应用层面向不同的网络应用引入了不同的应用层协议。其中，有基于 TCP 协议的，如文件传输协议（File Transfer Protocol，FTP）、虚拟终端协议（TELNET）、超文本链接协议（Hyper Text Transfer Protocol，HTTP），也有基于 UDP 协议的。</li></ul></li></ul><h3 id="OSI-和-TCP-IP-的区别"><a href="#OSI-和-TCP-IP-的区别" class="headerlink" title="OSI 和 TCP/IP 的区别"></a>OSI 和 TCP/IP 的区别</h3><p>OSI和TCP/IP都是概念，TCP/IP是OSI的合并，简化</p><p><img src="http://qnya.pomo16.club/154.png" alt></p><h2 id="Java-网络-IO-模型"><a href="#Java-网络-IO-模型" class="headerlink" title="Java 网络 IO 模型"></a>Java 网络 IO 模型</h2><ul><li><p>一个输入操作通常包括两个阶段：</p><ul><li>等待数据准备好</li><li>从内核向进程复制数据</li></ul></li><li><p>对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待数据到达时，它被复制到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。</p></li><li>Unix 有五种 I/O 模型：<ul><li><a href="#阻塞式-I-O">阻塞式 I/O</a></li><li><a href="#非阻塞式-I-O">非阻塞式 I/O</a></li><li><a href="#I-O-复用">I/O 复用（select 和 poll）</a></li><li><a href="#信号驱动-I-O">信号驱动式 I/O（SIGIO）</a></li><li><a href="#异步-I-O">异步 I/O（AIO）</a></li></ul></li></ul><h3 id="阻塞式-I-O"><a href="#阻塞式-I-O" class="headerlink" title="阻塞式 I/O"></a>阻塞式 I/O</h3><ul><li><p>应用进程被阻塞，直到数据从内核缓冲区复制到应用进程缓冲区中才返回。</p></li><li><p>应该注意到，在阻塞的过程中，其它应用进程还可以执行，因此阻塞不意味着整个操作系统都被阻塞。因为其它应用进程还可以执行，所以不消耗 CPU 时间，这种模型的 CPU 利用率效率会比较高。</p></li><li><p>下图中，recvfrom() 用于接收 Socket 传来的数据，并复制到应用进程的缓冲区 buf 中。这里把 recvfrom() 当成系统调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ssize_t <span class="title">recvfrom</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">void</span> *buf, size_t len, <span class="keyword">int</span> flags, struct sockaddr *src_addr, socklen_t *addrlen)</span></span>;</span><br></pre></td></tr></table></figure><p><img src="http://qnya.pomo16.club/155.png" alt></p></li></ul><h3 id="非阻塞式-I-O"><a href="#非阻塞式-I-O" class="headerlink" title="非阻塞式 I/O"></a>非阻塞式 I/O</h3><ul><li>应用进程执行系统调用之后，内核返回一个错误码。应用进程可以继续执行，但是需要不断的执行系统调用来获知 I/O 是否完成，这种方式称为轮询（polling）。</li><li>由于 CPU 要处理更多的系统调用，因此这种模型的 CPU 利用率比较低。</li><li><img src="http://qnya.pomo16.club/156.png" alt></li></ul><h3 id="I-O-复用"><a href="#I-O-复用" class="headerlink" title="I/O 复用"></a>I/O 复用</h3><ul><li>使用 select 或者 poll 等待数据，并且可以等待多个套接字中的任何一个变为可读。这一过程会被阻塞，当某一个套接字可读时返回，之后再使用 recvfrom 把数据从内核复制到进程中。</li><li>它可以让单个进程具有处理多个 I/O 事件的能力。又被称为 Event Driven I/O，即事件驱动 I/O。</li><li><p>如果一个 Web 服务器没有 I/O 复用，那么每一个 Socket 连接都需要创建一个线程去处理。如果同时有几万个连接，那么就需要创建相同数量的线程。相比于多进程和多线程技术，I/O 复用不需要进程线程创建和切换的开销，系统开销更小。</p></li><li><p><img src="http://qnya.pomo16.club/157.png" alt></p></li></ul><h3 id="信号驱动-I-O"><a href="#信号驱动-I-O" class="headerlink" title="信号驱动 I/O"></a>信号驱动 I/O</h3><ul><li><p>应用进程使用 sigaction 系统调用，内核立即返回，应用进程可以继续执行，也就是说等待数据阶段应用进程是非阻塞的。内核在数据到达时向应用进程发送 SIGIO 信号，应用进程收到之后在信号处理程序中调用 recvfrom 将数据从内核复制到应用进程中。</p></li><li><p>相比于非阻塞式 I/O 的轮询方式，信号驱动 I/O 的 CPU 利用率更高。</p></li><li><img src="http://qnya.pomo16.club/158.png" alt></li></ul><h3 id="异步-I-O"><a href="#异步-I-O" class="headerlink" title="异步 I/O"></a>异步 I/O</h3><ul><li>应用进程执行 aio_read 系统调用会立即返回，应用进程可以继续执行，不会被阻塞，内核会在所有操作完成之后向应用进程发送信号。</li><li>异步 I/O 与信号驱动 I/O 的区别在于，异步 I/O 的信号是通知应用进程 I/O 完成，而信号驱动 I/O 的信号是通知应用进程可以开始 I/O。</li><li><img src="http://qnya.pomo16.club/159.png" alt></li></ul><h3 id="五大-I-O-模型比较"><a href="#五大-I-O-模型比较" class="headerlink" title="五大 I/O 模型比较"></a>五大 I/O 模型比较</h3><ul><li>同步 I/O：将数据从内核缓冲区复制到应用进程缓冲区的阶段，应用进程会阻塞。</li><li>异步 I/O：不会阻塞。</li><li>阻塞式 I/O、非阻塞式 I/O、I/O 复用和信号驱动 I/O 都是同步 I/O，它们的主要区别在第一个阶段。</li><li>非阻塞式 I/O 、信号驱动 I/O 和异步 I/O 在第一阶段不会阻塞。</li></ul><p><img src="http://qnya.pomo16.club/160.png" alt></p><h2 id="I-O-复用-1"><a href="#I-O-复用-1" class="headerlink" title="I/O 复用"></a>I/O 复用</h2><p>select/poll/epoll 都是 I/O 多路复用的具体实现，select 出现的最早，之后是 poll，再是 epoll。</p><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>有三种类型的描述符类型：readset、writeset、exceptset，分别对应读、写、异常条件的描述符集合。</li><li><p>fd_set 使用数组实现，数组大小使用 FD_SETSIZE 定义。</p></li><li><p>timeout 为超时参数，调用 select 会一直阻塞直到有描述符的事件到达或者等待的时间超过 timeout。</p></li><li><p>成功调用返回结果大于 0，出错返回结果为 -1，超时返回结果为 0。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">fd_set fd_in, fd_out;</span><br><span class="line">struct timeval tv;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reset the sets</span></span><br><span class="line">FD_ZERO( &amp;fd_in );</span><br><span class="line">FD_ZERO( &amp;fd_out );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Monitor sock1 for input events</span></span><br><span class="line">FD_SET( sock1, &amp;fd_in );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Monitor sock2 for output events</span></span><br><span class="line">FD_SET( sock2, &amp;fd_out );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find out which socket has the largest numeric value as select requires it</span></span><br><span class="line"><span class="keyword">int</span> largest_sock = sock1 &gt; sock2 ? sock1 : sock2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait up to 10 seconds</span></span><br><span class="line">tv.tv_sec = <span class="number">10</span>;</span><br><span class="line">tv.tv_usec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Call the select</span></span><br><span class="line"><span class="keyword">int</span> ret = select( largest_sock + <span class="number">1</span>, &amp;fd_in, &amp;fd_out, NULL, &amp;tv );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if select actually succeed</span></span><br><span class="line"><span class="keyword">if</span> ( ret == -<span class="number">1</span> )</span><br><span class="line">    <span class="comment">// report error and abort</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( ret == <span class="number">0</span> )</span><br><span class="line">    <span class="comment">// timeout; no event detected</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( FD_ISSET( sock1, &amp;fd_in ) )</span><br><span class="line">        <span class="comment">// input event on sock1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( FD_ISSET( sock2, &amp;fd_out ) )</span><br><span class="line">        <span class="comment">// output event on sock2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd *fds, unsigned <span class="keyword">int</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>pollfd 使用链表实现。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The structure for two events</span></span><br><span class="line">struct pollfd fds[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Monitor sock1 for input</span></span><br><span class="line">fds[<span class="number">0</span>].fd = sock1;</span><br><span class="line">fds[<span class="number">0</span>].events = POLLIN;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Monitor sock2 for output</span></span><br><span class="line">fds[<span class="number">1</span>].fd = sock2;</span><br><span class="line">fds[<span class="number">1</span>].events = POLLOUT;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait 10 seconds</span></span><br><span class="line"><span class="keyword">int</span> ret = poll( &amp;fds, <span class="number">2</span>, <span class="number">10000</span> );</span><br><span class="line"><span class="comment">// Check if poll actually succeed</span></span><br><span class="line"><span class="keyword">if</span> ( ret == -<span class="number">1</span> )</span><br><span class="line">    <span class="comment">// report error and abort</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( ret == <span class="number">0</span> )</span><br><span class="line">    <span class="comment">// timeout; no event detected</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// If we detect the event, zero it out so we can reuse the structure</span></span><br><span class="line">    <span class="keyword">if</span> ( fds[<span class="number">0</span>].revents &amp; POLLIN )</span><br><span class="line">        fds[<span class="number">0</span>].revents = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// input event on sock1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( fds[<span class="number">1</span>].revents &amp; POLLOUT )</span><br><span class="line">        fds[<span class="number">1</span>].revents = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// output event on sock2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="select-和-poll-比较"><a href="#select-和-poll-比较" class="headerlink" title="select 和 poll 比较"></a>select 和 poll 比较</h3><ul><li><p>功能</p><ul><li>select 和 poll 的功能基本相同，不过在一些实现细节上有所不同。<ul><li>select 会修改描述符，而 poll 不会；</li><li>select 的描述符类型使用数组实现，FD_SETSIZE 大小默认为 1024，因此默认只能监听 1024 个描述符。如果要监听更多描述符的话，需要修改 FD_SETSIZE 之后重新编译；而 poll 的描述符类型使用链表实现，没有描述符数量的限制；</li><li>poll 提供了更多的事件类型，并且对描述符的重复利用上比 select 高。</li><li>如果一个线程对某个描述符调用了 select 或者 poll，另一个线程关闭了该描述符，会导致调用结果不确定。</li></ul></li></ul></li><li><p>速度</p><ul><li>select 和 poll 速度都比较慢。<ul><li>select 和 poll 每次调用都需要将全部描述符从应用进程缓冲区复制到内核缓冲区。</li><li>select 和 poll 的返回结果中没有声明哪些描述符已经准备好，所以如果返回值大于 0 时，应用进程都需要使用轮询的方式来找到 I/O 完成的描述符。</li></ul></li></ul></li><li><p>可移植性</p><ul><li>几乎所有的系统都支持 select，但是只有比较新的系统支持 poll。</li></ul></li></ul><h3 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event *event)</span>；</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event * events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>epoll_ctl() 用于向内核注册新的描述符或者是改变某个文件描述符的状态。已注册的描述符在内核中会被维护在一棵红黑树上，通过回调函数内核会将 I/O 准备好的描述符加入到一个链表中管理，进程调用 epoll_wait() 便可以得到事件完成的描述符。</li><li>从上面的描述可以看出，epoll 只需要将描述符从进程缓冲区向内核缓冲区拷贝一次，并且进程不需要通过轮询来获得事件完成的描述符。</li><li>epoll 仅适用于 Linux OS。</li><li>epoll 比 select 和 poll 更加灵活而且没有描述符数量限制。</li><li>epoll 对多线程编程更有友好，一个线程调用了 epoll_wait() 另一个线程关闭了同一个描述符也不会产生像 select 和 poll 的不确定情况。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create the epoll descriptor. Only one is needed per app, and is used to monitor all sockets.</span></span><br><span class="line"><span class="comment">// The function argument is ignored (it was not before, but now it is), so put your favorite number here</span></span><br><span class="line"><span class="keyword">int</span> pollingfd = epoll_create( <span class="number">0xCAFE</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( pollingfd &lt; <span class="number">0</span> )</span><br><span class="line"> <span class="comment">// report error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize the epoll structure in case more members are added in future</span></span><br><span class="line">struct epoll_event ev = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Associate the connection class instance with the event. You can associate anything</span></span><br><span class="line"><span class="comment">// you want, epoll does not use this information. We store a connection class pointer, pConnection1</span></span><br><span class="line">ev.data.ptr = pConnection1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Monitor for input, and do not automatically rearm the descriptor after the event</span></span><br><span class="line">ev.events = EPOLLIN | EPOLLONESHOT;</span><br><span class="line"><span class="comment">// Add the descriptor into the monitoring list. We can do it even if another thread is</span></span><br><span class="line"><span class="comment">// waiting in epoll_wait - the descriptor will be properly added</span></span><br><span class="line"><span class="keyword">if</span> ( epoll_ctl( epollfd, EPOLL_CTL_ADD, pConnection1-&gt;getSocket(), &amp;ev ) != <span class="number">0</span> )</span><br><span class="line">    <span class="comment">// report error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for up to 20 events (assuming we have added maybe 200 sockets before that it may happen)</span></span><br><span class="line">struct epoll_event pevents[ <span class="number">20</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for 10 seconds, and retrieve less than 20 epoll_event and store them into epoll_event array</span></span><br><span class="line"><span class="keyword">int</span> ready = epoll_wait( pollingfd, pevents, <span class="number">20</span>, <span class="number">10000</span> );</span><br><span class="line"><span class="comment">// Check if epoll actually succeed</span></span><br><span class="line"><span class="keyword">if</span> ( ret == -<span class="number">1</span> )</span><br><span class="line">    <span class="comment">// report error and abort</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( ret == <span class="number">0</span> )</span><br><span class="line">    <span class="comment">// timeout; no event detected</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Check if any events detected</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ret; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( pevents[i].events &amp; EPOLLIN )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Get back our connection pointer</span></span><br><span class="line">            Connection * c = (Connection*) pevents[i].data.ptr;</span><br><span class="line">            c-&gt;handleReadEvent();</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><p>epoll 的描述符事件有两种触发模式：LT（level trigger）和 ET（edge trigger）。</p><ul><li><p>LT 模式</p><p>当 epoll_wait() 检测到描述符事件到达时，将此事件通知进程，进程可以不立即处理该事件，下次调用 epoll_wait() 会再次通知进程。是默认的一种模式，并且同时支持 Blocking 和 No-Blocking。</p></li><li><p>ET 模式</p><p>和 LT 模式不同的是，通知之后进程必须立即处理事件，下次再调用 epoll_wait() 时不会再得到事件到达的通知。很大程度上减少了 epoll 事件被重复触发的次数，因此效率要比 LT 模式高。只支持 No-Blocking，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</p></li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>很容易产生一种错觉认为只要用 epoll 就可以了，select 和 poll 都已经过时了，其实它们都有各自的使用场景。</p><ul><li><p>select 应用场景</p><ul><li>select 的 timeout 参数精度为 1ns，而 poll 和 epoll 为 1ms，因此 select 更加适用于实时性要求比较高的场景，比如核反应堆的控制。</li><li>select 可移植性更好，几乎被所有主流平台所支持。</li></ul></li><li><p>poll 应用场景</p><ul><li>poll 没有最大描述符数量的限制，如果平台支持并且对实时性要求不高，应该使用 poll 而不是 select。</li></ul></li><li><p>epoll 应用场景</p><ul><li>只需要运行在 Linux 平台上，有大量的描述符需要同时轮询，并且这些连接最好是长连接。</li><li>需要同时监控小于 1000 个描述符，就没有必要使用 epoll，因为这个应用场景下并不能体现 epoll 的优势。</li><li>需要监控的描述符状态变化多，而且都是非常短暂的，也没有必要使用 epoll。因为 epoll 中的所有描述符都存储在内核中，造成每次需要对描述符的状态改变都需要通过 epoll_ctl() 进行系统调用，频繁系统调用降低效率。并且 epoll 的描述符存储在内核，不容易调试。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架</title>
      <link href="/2019/04/02/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/04/02/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>本文整理自 <a href="https://blog.csdn.net/ns_code" target="_blank" rel="noopener">兰亭风雨</a> 的专栏。</p><a id="more"></a><h2 id="Java-集合框架"><a href="#Java-集合框架" class="headerlink" title="Java 集合框架"></a>Java 集合框架</h2><p>Java集合框架可以大致分为五个部分：List 列表、Set 列表、Map映射、迭代器(Iterator、Enumeration)、工具类(Arrays、Conllection)。</p><p><img src="http://qnya.pomo16.club/152.png" alt></p><p>从上图中可以看出，集合类主要分为两大类：Collection 和 Map。</p><h2 id="Java-集合框架的组成"><a href="#Java-集合框架的组成" class="headerlink" title="Java 集合框架的组成"></a>Java 集合框架的组成</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h4><p>Collection 是 List、Set 等集合高度抽象出来的接口，它包含了这些集合的基本操作，它主要又分为两大部分：List 和 Set。</p><h4 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h4><p>List 接口通常表示一个列表（数组、队列、链表、栈等），其中的元素可以重复，常用实现类为 ArrayList 和 LinkedList ，另外还有不常用的 Vector。另外，LinkedList 还是实现了 Queue 接口，因此也可以作为队列使用。</p><h4 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h4><p>Set 接口通常表示一个集合，其中的元素不允许重复（通过 hashcode 和 equals 函数保证），常用实现类有 HashSet 和 TreeSet ，HashSet 是通过 Map 中的 HashMap 实现的，而 TreeSet 是通过 Map 中的 TreeMap 实现的。另外，TreeSet 还实现了 SortedSet 接口，因此是有序的集合（集合中的元素要实现 Comparable 接口，并覆写 Compartor 函数才行）。</p><h4 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h4><p>Map 是一个映射接口，其中的每个元素都是一个 key-value 键值对，同样抽象类 AbstractMap 通过适配器模式实现了 Map 接口中的大部分函数，TreeMap、HashMap、WeakHashMap 等实现类都通过继承 AbstractMap 来实现，另外，不常用的 HashTable 直接实现了 Map 接口，它和 Vector 都是 JDK1.0 就引入的集合类。</p><h4 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h4><p>Iterator 是遍历集合的迭代器（不能遍历 Map，只用来遍历 Collection），Collection 的实现类都实现了 iterator() 函数，它返回一个 Iterator 对象，用来遍历集合，ListIterator 则专门用来遍历 List。而 Enumeration 则是 JDK1.0 时引入的，作用与 Iterator 相同，但它的功能比 Iterator 要少，它只能再 Hashtable、Vector 和 Stack 中使用。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h4><p>Arrays 和 Collections 是用来操作数组、集合的两个工具类，例如在 ArrayList 和 Vector 中大量调用了 Arrays.Copyof() 方法，而 Collections 中有很多静态方法可以返回各集合类的 synchronized 版本，即线程安全的版本，当然了，如果要用线程安全的结合类，首选 Concurrent 并发包下的对应的集合类。</p><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>我们看到，抽象类 AbstractCollection、AbstractList 和 AbstractSet 分别实现了 Collection、List 和 Set 接口，这就是在 Java 集合框架中用的很多的适配器设计模式，用这些抽象类去实现接口，在抽象类中实现接口中的若干或全部方法，这样下面的一些类只需直接继承该抽象类，并实现自己需要的方法即可，而不用实现接口中的全部抽象方法。</p><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p><strong>简介</strong></p><ul><li>ArrayList 是基于数组实现的，是一个动态数组，其容量能自动增长，类似于 C 语言中的动态申请内存，动态增长内存。</li><li>ArrayList 不是线程安全的，只能用在单线程环境下，多线程环境下可以考虑用 Collections.synchronizedList(List l) 函数返回一个线程安全的 ArrayList 类，也可以使用 concurrent 并发包下的 CopyOnWriteArrayList 类。</li><li>ArrayList 实现了 Serializable 接口，因此它支持序列化，能够通过序列化传输，实现了 RandomAccess 接口，支持快速随机访问，实际上就是通过下标序号进行快速访问，实现了 Cloneable 接口，能被克隆。</li></ul><p><strong>源码特征</strong></p><ul><li><p>ArrayList 有三个构造器</p><ul><li><strong>无参构造方法构造的 ArrayList 的容量默认为10</strong></li><li>带容量大小参数的构造方法</li><li>带有 Collection 参数的构造方法，将 Collection 转化为数组赋给 ArrayList 的实现数组 elementData</li></ul></li><li><p>扩充容量的方法 ensureCapacity ：ArrayList在每次增加元素（可能是1个，也可能是一组）时，都要调用该方法来确保足够的容量。当容量不足以容纳当前的元素个数时，就设置新的容量为旧的容量的1.5倍加1，如果设置后的新容量还不够，则直接新容量设置为传入的参数（也就是所需的容量），而后用 Arrays.copyof() 方法将元素拷贝到新的数组（详见下面的第3点）。从中可以看出，当容量不够时，每次增加元素，都要将原来的元素拷贝到一个新的数组中，非常之耗时，也因此建议在事先能确定元素数量的情况下，才使用 ArrayList，否则建议使用 LinkedList。</p></li><li><p>ArrayList 的实现中大量地调用了 Arrays.copyof() 和 System.arraycopy() 方法。 </p><ul><li>Arrays.copyof() 方法实际上是在其内部又创建了一个长度为 newlength 的数组，调用 System.arraycopy() 方法，将原来数组中的元素复制到了新的数组中。</li><li>System.arraycopy() 方法。该方法被标记了 native，调用了系统的 C/C++ 代码，在 JDK 中是看不到的，但在 openJDK 中可以看到其源码。该函数实际上最终调用了 C 语言的 memmove() 函数，因此它可以保证同一个数组内元素的正确复制和移动，比一般的复制方法的实现效率要高很多，很适合用来批量处理数组。Java 强烈推荐在复制大量数组元素时用该方法，以取得更高的效率。</li></ul></li><li><p>注意 ArrayList 的两个转化为静态数组的 toArray 方法。</p><ul><li><p>Object[] toArray() 方法。该方法有可能会抛出 java.lang.ClassCastException 异常，如果直接用向下转型的方法，将整个 ArrayList 集合转变为指定类型的 Array 数组，便会抛出该异常，而如果转化为 Array 数组时不向下转型，而是将每个元素向下转型，则不会抛出该异常，显然对数组中的元素一个个进行向下转型，效率不高，且不太方便。</p></li><li><p><code>&lt;T&gt; T[] toArray(T[] a)</code> 方法。该方法可以直接将 ArrayList 转换得到的 Array 进行整体向下转型（转型其实是在该方法的源码中实现的），且从该方法的源码中可以看出，参数 a 的大小不足时，内部会调用 Arrays.copyOf 方法，该方法内部创建一个新的数组返回，因此对该方法的常用形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer[] vectorToArray2(ArrayList&lt;Integer&gt; v) &#123;  </span><br><span class="line">    Integer[] newText = (Integer[])v.toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>]);  </span><br><span class="line">    <span class="keyword">return</span> newText;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>ArrayList 基于数组实现，可以通过下标索引直接查找到指定位置的元素，因此查找效率高，但每次插入或删除元素，就要大量地移动元素，插入删除元素的效率低。</p></li><li><p>在查找给定元素索引值等的方法中，源码都将该元素的值分为 null 和不为 null 两种情况处理，ArrayList 中允许元素为 null。</p></li></ul><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p><strong>简介</strong></p><ul><li>LinkedList 是基于双向循环链表（从源码中可以很容易看出）实现的，除了可以当做链表来操作外，它还可以当做栈、队列和双端队列来使用。</li><li>LinkedList 同样是非线程安全的，只在单线程下适合使用。</li><li>LinkedList 实现了 Serializable 接口，因此它支持序列化，能够通过序列化传输，实现了 Cloneable 接口，能被克隆。</li></ul><p><strong>源码特征</strong></p><ul><li><p>LinkedList 的实现是基于双向循环链表的，且头结点中不存放数据(即使用虚拟头结点)</p></li><li><p>LinkedList 有两个不同的构造方法。无参构造方法直接建立一个仅包含 head 节点的空链表，包含 Collection 的构造方法，先调用无参构造方法建立一个空链表，而后将 Collection 中的数据加入到链表的尾部后面。</p></li><li><p>在查找和删除某元素时，源码中都划分为该元素为 null 和不为 null 两种情况来处理，LinkedList 中允许元素为 null。</p></li><li><p>LinkedList 是基于链表实现的，因此不存在容量不足的问题，所以这里没有扩容的方法。</p></li><li><p>注意源码中的 <code>Entry&lt;E&gt; entry(int index)</code> 方法。该方法返回双向链表中指定位置处的节点，而链表中是没有下标索引的，要指定位置出的元素，就要遍历该链表，从源码的实现中，我们看到这里有一个加速动作。源码中先将 index 与长度 size 的一半比较，如果 index&lt;size/2 ，就只从位置 0 往后遍历到位置 index 处，而如果 index&gt;size/2，就只从位置 size 往前遍历到位置 index 处。这样可以减少一部分不必要的遍历，从而提高一定的效率（实际上效率还是很低）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取双向链表中指定位置的节点  </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Entry&lt;E&gt; <span class="title">entry</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size)  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span> + index + <span class="string">", Size: "</span>+size);  </span><br><span class="line">    Entry&lt;E&gt; e = header;  </span><br><span class="line">    <span class="comment">// 获取index处的节点。  </span></span><br><span class="line">    <span class="comment">// 若index &lt; 双向链表长度的1/2,则从前先后查找;  </span></span><br><span class="line">    <span class="comment">// 否则，从后向前查找。  </span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= index; i++)  </span><br><span class="line">            e = e.next;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt; index; i--)  </span><br><span class="line">            e = e.previous;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> e;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意链表类对应的数据结构 Entry。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双向链表的节点所对应的数据结构。  </span></span><br><span class="line"><span class="comment">// 包含3部分：上一节点，下一节点，当前节点值。  </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">E</span>&gt; </span>&#123;  </span><br><span class="line">    <span class="comment">// 当前节点所包含的值  </span></span><br><span class="line">    E element;  </span><br><span class="line">    <span class="comment">// 下一个节点  </span></span><br><span class="line">    Entry&lt;E&gt; next;  </span><br><span class="line">    <span class="comment">// 上一个节点  </span></span><br><span class="line">    Entry&lt;E&gt; previous;  </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 链表节点的构造函数。  </span></span><br><span class="line"><span class="comment">     * 参数说明：  </span></span><br><span class="line"><span class="comment">     *   element  —— 节点所包含的数据  </span></span><br><span class="line"><span class="comment">     *   next      —— 下一个节点  </span></span><br><span class="line"><span class="comment">     *   previous —— 上一个节点  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    Entry(E element, Entry&lt;E&gt; next, Entry&lt;E&gt; previous) &#123;  </span><br><span class="line">        <span class="keyword">this</span>.element = element;  </span><br><span class="line">        <span class="keyword">this</span>.next = next;  </span><br><span class="line">        <span class="keyword">this</span>.previous = previous;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>LinkedList 是基于链表实现的，因此插入删除效率高，查找效率低（虽然有一个加速动作）。</p></li><li><p>要注意源码中还实现了栈和队列的操作方法，因此也可以作为栈、队列和双端队列来使用。</p></li></ul><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><p><strong>简介</strong></p><ul><li>Vector 也是基于数组实现的，是一个动态数组，其容量能自动增长。</li><li>Vector 是 JDK1.0 引入了，它的很多实现方法都加入了同步语句，因此是线程安全的（其实也只是相对安全，有些时候还是要加入同步语句来保证线程的安全），可以用于多线程环境。</li><li>Vector 实现了 Serializable 接口，因此它支持序列化，实现了 Cloneable 接口，能被克隆，实现了 RandomAccess 接口，支持快速随机访问。</li></ul><p><strong>源码特征</strong></p><ul><li>Vector 有四个不同的构造方法<ul><li>无参构造方法的容量为默认值10</li><li>仅包含容量的构造方法则将容量增长量（从源码中可以看出容量增长量的作用，第二点也会对容量增长量详细说）明置为0。</li><li>指定 Vector “容量大小”和”增长系数”的构造函数。</li><li>指定集合的 Vector 构造函数。</li></ul></li><li><p>注意扩充容量的方法 ensureCapacityHelper：与 ArrayList 相同，Vector 在每次增加元素（可能是1个，也可能是一组）时，都要调用该方法来确保足够的容量。当容量不足以容纳当前的元素个数时，就先看构造方法中传入的容量增长量参数 CapacityIncrement 是否为0，如果不为0，就设置新的容量为就容量加上容量增长量，如果为0，就设置新的容量为旧的容量的2倍，如果设置后的新容量还不够，则直接新容量设置为传入的参数（也就是所需的容量），而后同样用 Arrays.copyof() 方法将元素拷贝到新的数组。</p></li><li><p>很多方法都加入了 synchronized 同步语句，来保证线程安全。</p></li><li>同样在查找给定元素索引值等的方法中，源码都将该元素的值分为 null 和不为 null 两种情况处理，Vector 中也允许元素为 null。</li><li>其他很多地方都与 ArrayList 实现大同小异，Vector 现在已经基本不再使用。 </li></ul><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p><strong>简介</strong></p><ul><li>HashMap 是基于哈希表实现的，每一个元素是一个 key-value 对，其内部通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。</li><li>HashMap 是非线程安全的，只是用于单线程环境下，多线程环境下可以采用 concurrent 并发包下的 concurrentHashMap。</li><li>HashMap 实现了 Serializable 接口，因此它支持序列化，实现了 Cloneable 接口，能被克隆。</li></ul><p><strong>源码特征</strong></p><ul><li><p>首先要清楚HashMap的存储结构，如下图所示：</p><p><img src="http://qnya.pomo16.club/153.png" alt></p><p>图中，紫色部分即代表哈希表，也称为哈希数组，数组的每个元素都是一个单链表的头节点，链表是用来解决冲突的，如果不同的key映射到了数组的同一位置处，就将其放入单链表中。</p></li><li><p>首先看链表中节点的数据结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Entry是单向链表。  </span></span><br><span class="line"><span class="comment">// 它是 “HashMap链式存储法”对应的链表。  </span></span><br><span class="line"><span class="comment">// 它实现了Map.Entry 接口，即实现getKey(), getValue(), setValue(V value), equals(Object o), hashCode()这些函数  </span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;  </span><br><span class="line">    <span class="keyword">final</span> K key;  </span><br><span class="line">    V value;  </span><br><span class="line">    <span class="comment">// 指向下一个节点  </span></span><br><span class="line">    Entry&lt;K,V&gt; next;  </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 构造函数。  </span></span><br><span class="line">    <span class="comment">// 输入参数包括"哈希值(h)", "键(k)", "值(v)", "下一节点(n)"  </span></span><br><span class="line">    Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;  </span><br><span class="line">        value = v;  </span><br><span class="line">        next = n;  </span><br><span class="line">        key = k;  </span><br><span class="line">        hash = h;  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> key;  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;  </span><br><span class="line">        V oldValue = value;  </span><br><span class="line">        value = newValue;  </span><br><span class="line">        <span class="keyword">return</span> oldValue;  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 判断两个Entry是否相等  </span></span><br><span class="line">    <span class="comment">// 若两个Entry的“key”和“value”都相等，则返回true。  </span></span><br><span class="line">    <span class="comment">// 否则，返回false  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        Map.Entry e = (Map.Entry)o;  </span><br><span class="line">        Object k1 = getKey();  </span><br><span class="line">        Object k2 = e.getKey();  </span><br><span class="line">        <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;  </span><br><span class="line">            Object v1 = getValue();  </span><br><span class="line">            Object v2 = e.getValue();  </span><br><span class="line">            <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))  </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 实现hashCode()  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (key==<span class="keyword">null</span>   ? <span class="number">0</span> : key.hashCode()) ^  </span><br><span class="line">               (value==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 当向HashMap中添加元素时，绘调用recordAccess()。  </span></span><br><span class="line">    <span class="comment">// 这里不做任何处理  </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 当从HashMap中删除元素时，绘调用recordRemoval()。  </span></span><br><span class="line">    <span class="comment">// 这里不做任何处理  </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordRemoval</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的结构元素除了 key、value、hash 外，还有 next ，next 指向下一个节点。另外，这里覆写了 equals 和 hashCode 方法来保证键值对的独一无二。</p></li><li><p>HashMap共有四个构造方法。构造方法中提到了两个很重要的参数：初始容量和加载因子。这两个参数是影响 HashMap 性能的重要参数。</p><ul><li>容量表示哈希表中槽的数量（即哈希数组的长度），初始容量是创建哈希表时的容量（从构造函数中可以看出，如果不指明，则默认为16）。<ul><li>无论我们指定的容量为多少，构造方法都会将实际容量设为不小于指定容量的2的次方的一个数，且最大值不能超过2的30次方。</li></ul></li><li>加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度，当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 resize 操作（即扩容）。<ul><li>如果加载因子越大，对空间的利用更充分，但是查找效率会降低（链表长度会越来越长）；如果加载因子太小，那么表中的数据将过于稀疏（很多空间还没用，就开始扩容了），对空间造成严重浪费。如果我们在构造方法中不指定，则系统默认加载因子为0.75，这是一个比较理想的值，一般情况下我们是无需修改的。</li></ul></li></ul></li><li><p>HashMap 中 key 和 value 都允许为 null。</p></li><li><p>要重点分析下 HashMap 中用的最多的两个方法 put 和 get。先从比较简单的 get 方法着手，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 获取key对应的value  </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">if</span> (key == <span class="keyword">null</span>)  </span><br><span class="line">          <span class="keyword">return</span> getForNullKey();  </span><br><span class="line">      <span class="comment">// 获取key的hash值  </span></span><br><span class="line">      <span class="keyword">int</span> hash = hash(key.hashCode());  </span><br><span class="line">      <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素  </span></span><br><span class="line">      <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];  </span><br><span class="line">           e != <span class="keyword">null</span>;  </span><br><span class="line">           e = e.next) &#123;  </span><br><span class="line">          Object k;  </span><br><span class="line"><span class="comment">//判断key是否相同</span></span><br><span class="line">          <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))  </span><br><span class="line">              <span class="keyword">return</span> e.value;  </span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//没找到则返回null</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 获取“key为null”的元素的值  </span></span><br><span class="line">  <span class="comment">// HashMap将“key为null”的元素存储在table[0]位置，但不一定是该链表的第一个位置！  </span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> V <span class="title">getForNullKey</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;  </span><br><span class="line">          <span class="keyword">if</span> (e.key == <span class="keyword">null</span>)  </span><br><span class="line">              <span class="keyword">return</span> e.value;  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>首先，如果 key 为 null，则直接从哈希表的第一个位置 table[0] 对应的链表上查找。<strong>记住，key 为 null 的键值对永远都放在以 table[0] 为头结点的链表中，当然不一定是存放在头结点 table[0] 中</strong>。</p></li><li><p>如果 key 不为 null，则先求的 key 的 hash 值，根据 hash 值找到在 table 中的索引，在该索引对应的单链表中查找是否有键值对的 key 与目标 key 相等，有就返回对应的 value，没有则返回 null。</p></li></ul><p>put方法稍微复杂些，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 将“key-value”添加到HashMap中  </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;  </span><br><span class="line">      <span class="comment">// 若“key为null”，则将该键值对添加到table[0]中。  </span></span><br><span class="line">      <span class="keyword">if</span> (key == <span class="keyword">null</span>)  </span><br><span class="line">          <span class="keyword">return</span> putForNullKey(value);  </span><br><span class="line">      <span class="comment">// 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。  </span></span><br><span class="line">      <span class="keyword">int</span> hash = hash(key.hashCode());  </span><br><span class="line">      <span class="keyword">int</span> i = indexFor(hash, table.length);  </span><br><span class="line">      <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;  </span><br><span class="line">          Object k;  </span><br><span class="line">          <span class="comment">// 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！  </span></span><br><span class="line">          <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;  </span><br><span class="line">              V oldValue = e.value;  </span><br><span class="line">              e.value = value;  </span><br><span class="line">              e.recordAccess(<span class="keyword">this</span>);  </span><br><span class="line">              <span class="keyword">return</span> oldValue;  </span><br><span class="line">          &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">   </span><br><span class="line">      <span class="comment">// 若“该key”对应的键值对不存在，则将“key-value”添加到table中  </span></span><br><span class="line">      modCount++;</span><br><span class="line"><span class="comment">//将key-value添加到table[i]处</span></span><br><span class="line">      addEntry(hash, key, value, i);  </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果key为null，则将其添加到table[0]对应的链表中，putForNullKey的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// putForNullKey()的作用是将“key为null”键值对添加到table[0]位置  </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span><span class="params">(V value)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (e.key == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            V oldValue = e.value;  </span><br><span class="line">            e.value = value;  </span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);  </span><br><span class="line">            <span class="keyword">return</span> oldValue;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 如果没有存在key为null的键值对，则直接题阿见到table[0]处!  </span></span><br><span class="line">    modCount++;  </span><br><span class="line">    addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 key 不为 null，则同样先求出 key 的 hash 值，根据 hash 值得出在 table 中的索引，而后遍历对应的单链表，如果单链表中存在与目标 key 相等的键值对，则将新的 value 覆盖旧的 value，比将旧的 value 返回，<strong>如果找不到与目标 key 相等的键值对，或者该单链表为空，则将该键值对插入到改单链表的头结点位置（每次新插入的节点都是放在头结点的位置）</strong>，该操作是有 addEntry 方法实现的，它的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增Entry。将“key-value”插入指定位置，bucketIndex是位置索引。  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;  </span><br><span class="line">    <span class="comment">// 保存“bucketIndex”位置的值到“e”中  </span></span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];  </span><br><span class="line">    <span class="comment">// 设置“bucketIndex”位置的元素为“新Entry”，  </span></span><br><span class="line">    <span class="comment">// 设置“e”为“新Entry的下一个节点”  </span></span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);  </span><br><span class="line">    <span class="comment">// 若HashMap的实际大小 不小于 “阈值”，则调整HashMap的大小  </span></span><br><span class="line">    <span class="keyword">if</span> (size++ &gt;= threshold)  </span><br><span class="line">        resize(<span class="number">2</span> * table.length);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里倒数第三行的构造方法，将 key-value 键值对赋给 table[bucketIndex]，并将其 next 指向元素 e，这便将 key-value 放到了头结点中，并将之前的头结点接在了它的后面。<strong>该方法也说明，每次 put 键值对的时候，总是将新的该键值对放在 table[bucketIndex] 处（即头结点处）。</strong></p><p><strong>另外注意最后两行代码，每次加入键值对时，都要判断当前已用的槽的数目是否大于等于阀值（容量*加载因子），如果大于等于，则进行扩容，将容量扩为原来容量的2倍。</strong></p></li><li><p>扩容 resize 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重新调整HashMap的大小，newCapacity是调整后的单位  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;  </span><br><span class="line">    Entry[] oldTable = table;  </span><br><span class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;  </span><br><span class="line">    <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;  </span><br><span class="line">        threshold = Integer.MAX_VALUE;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 新建一个HashMap，将“旧HashMap”的全部元素添加到“新HashMap”中，  </span></span><br><span class="line">    <span class="comment">// 然后，将“新HashMap”赋值给“旧HashMap”。  </span></span><br><span class="line">    Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];  </span><br><span class="line">    transfer(newTable);  </span><br><span class="line">    table = newTable;  </span><br><span class="line">    threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    很明显，是新建了一个 HashMap 的底层数组，而后调用 transfer 方法，将就 HashMap 的全部元素添加到新的 HashMap 中（要重新计算元素在新的数组中的索引位置）。transfer 方法的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将HashMap中的全部元素都添加到newTable中  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span> </span>&#123;  </span><br><span class="line">    Entry[] src = table;  </span><br><span class="line">    <span class="keyword">int</span> newCapacity = newTable.length;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) &#123;  </span><br><span class="line">        Entry&lt;K,V&gt; e = src[j];  </span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;  </span><br><span class="line">            src[j] = <span class="keyword">null</span>;  </span><br><span class="line">            <span class="keyword">do</span> &#123;  </span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;  </span><br><span class="line">                <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);  </span><br><span class="line">                e.next = newTable[i];  </span><br><span class="line">                newTable[i] = e;  </span><br><span class="line">                e = next;  </span><br><span class="line">            &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>很明显，扩容是一个相当耗时的操作，因为它需要重新计算这些元素在新的数组中的位置并进行复制处理。因此，我们在用 HashMap 的时，最好能提前预估下 HashMap 中元素的个数，这样有助于提高 HashMap 的性能。</strong></p></li><li><p>注意 containsKey 方法和 containsValue 方法。前者直接可以通过 key 的哈希值将搜索范围定位到指定索引对应的链表，而后者要对哈希数组的每个链表进行搜索。</p></li><li><p>我们重点来分析下求 hash 值和索引值的方法，这两个方法便是 HashMap 设计的最为核心的部分，二者结合能保证哈希表中的元素尽可能均匀地散列。</p><ul><li><p>计算哈希值的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">        <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>它只是一个数学公式，JDK 这样设计对 hash 值的计算，自然有它的好处，至于为什么这样设计，我们这里不去追究，只要明白一点，用的位的操作使 hash 值的计算效率很高。</p></li><li><p>由 hash 值找到对应索引的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个我们要重点说下，我们一般对哈希表的散列很自然地会想到用 hash 值对 length 取模（即除法散列法），Hashtable 中也是这样实现的，这种方法基本能保证元素在哈希表中散列的比较均匀，但取模会用到除法运算，效率很低，<strong>HashMap 中则通过 h&amp;(length-1) 的方法来代替取模，同样实现了均匀的散列，但效率要高很多，这也是 HashMap 对 Hashtable 的一个改进。</strong></p></li></ul></li><li><p>为什么哈希表的容量一定要是2的整数次幂?</p><ul><li><strong>length 为2的整数次幂的话，h&amp;(length-1) 就相当于对 length 取模，这样便保证了散列的均匀，同时也提升了效率</strong></li><li>length 为2的整数次幂的话，为偶数，这样 length-1 为奇数，奇数的最后一位是1，这样便保证了 h&amp;(length-1) 的最后一位可能为0，也可能为1（这取决于 h 的值），即与后的结果可能为偶数，也可能为奇数，这样便可以保证散列的均匀性，而如果 length 为奇数的话，很明显 length-1 为偶数，它的最后一位是0，这样 h&amp;(length-1) 的最后一位肯定为0，即只能为偶数，这样任何 hash 值都只会被散列到数组的偶数下标位置上，这便浪费了近一半的空间</li><li><strong>因此，length 取2的整数次幂，是为了使不同 hash 值发生碰撞的概率较小，这样就能使元素在哈希表中均匀地散列。</strong></li></ul></li></ul><h4 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h4><p><strong>简介</strong></p><ul><li>Hashtable 同样是基于哈希表实现的，同样每个元素是一个 key-value 对，其内部也是通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。</li><li>Hashtable 也是  JDK1.0 引入的类，是线程安全的，能用于多线程环境中。</li><li>Hashtable 同样实现了 Serializable 接口，它支持序列化，实现了 Cloneable 接口，能被克隆。</li></ul><p><strong>源码特征</strong></p><p>针对 Hashtable，我们同样给出几点比较重要的总结，但要结合与 HashMap 的比较来总结。</p><ul><li><p>二者的存储结构和解决冲突的方法都是相同的。</p></li><li><p>HashTable 在不指定容量的情况下的默认容量为11，而 HashMap 为16，Hashtable 不要求底层数组的容量一定要为2的整数次幂，而 HashMap 则要求一定为2的整数次幂。</p></li><li><p><strong>Hashtable 中 key 和 value 都不允许为 null，而 HashMap 中 key 和 value 都允许为 null（key 只能有一个为 null，而 value 则可以有多个为 null）。但是如果在 Hashtable 中有类似 put(null,null) 的操作，编译同样可以通过，因为 key 和 value 都是 Object 类型，但运行时会抛出 NullPointerException 异常，这是 JDK 的规范规定的。</strong>我们来看下 ContainsKey 方法和 ContainsValue 的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 判断Hashtable是否包含“值(value)”  </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object value)</span> </span>&#123;  </span><br><span class="line">      <span class="comment">//注意，Hashtable中的value不能是null，  </span></span><br><span class="line">      <span class="comment">// 若是null的话，抛出异常!  </span></span><br><span class="line">      <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;  </span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();  </span><br><span class="line">      &#125;  </span><br><span class="line">   </span><br><span class="line">      <span class="comment">// 从后向前遍历table数组中的元素(Entry)  </span></span><br><span class="line">      <span class="comment">// 对于每个Entry(单向链表)，逐个遍历，判断节点的值是否等于value  </span></span><br><span class="line">      Entry tab[] = table;  </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = tab.length ; i-- &gt; <span class="number">0</span> ;) &#123;  </span><br><span class="line">          <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next) &#123;  </span><br><span class="line">              <span class="keyword">if</span> (e.value.equals(value)) &#123;  </span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">              &#125;  </span><br><span class="line">          &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">return</span> contains(value);  </span><br><span class="line">  &#125;  </span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 判断Hashtable是否包含key  </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;  </span><br><span class="line">      Entry tab[] = table;  </span><br><span class="line"><span class="comment">//计算hash值，直接用key的hashCode代替</span></span><br><span class="line">      <span class="keyword">int</span> hash = key.hashCode();    </span><br><span class="line">      <span class="comment">// 计算在数组中的索引值 </span></span><br><span class="line">      <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;  </span><br><span class="line">      <span class="comment">// 找到“key对应的Entry(链表)”，然后在链表中找出“哈希值”和“键值”与key都相等的元素  </span></span><br><span class="line">      <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;  </span><br><span class="line">          <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;  </span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">          &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>很明显，如果 value 为 null，会直接抛出 NullPointerException 异常，但源码中并没有对 key 是否为 null 判断，有点小不解！不过 NullPointerException 属于 RuntimeException 异常，是可以由 JVM 自动抛出的，也许对 key 的值在 JVM 中有所限制吧。</strong></p></li><li><p>Hashtable 扩容时，将容量变为原来的2倍加1，而 HashMap 扩容时，将容量变为原来的2倍。</p></li><li><p><strong>Hashtable 计算 hash 值，直接用 key 的 hashCode()，而 HashMap 重新计算了 key 的 hash 值，Hashtable 在求 hash 值对应的位置索引时，用取模运算，而 HashMap 在求位置索引时，则用与运算，且这里一般先用hash&amp;0x7FFFFFFF 后，再对 length 取模，&amp;0x7FFFFFFF 的目的是为了将负的hash值转化为正值，因为 hash值有可能为负数，而 &amp;0x7FFFFFFF 后，只有符号外改变，而后面的位都不变。</strong> </p></li></ul><h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h4><p><strong>简介</strong></p><ul><li>TreeMap是基于红黑树实现的，这里只对红黑树做个简单的介绍，红黑树是一种特殊的二叉排序树，红黑树通过一些限制，使其不会出现二叉树排序树中极端的一边倒的情况，相对二叉排序树而言，这自然提高了查询的效率。</li></ul><p><strong>源码特征</strong></p><ul><li><p>存储结构：TreeMap的排序是基于对key的排序实现的，它的每一个Entry代表红黑树的一个节点，Entry的数据结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;  </span><br><span class="line">      <span class="comment">// 键  </span></span><br><span class="line">      K key;  </span><br><span class="line">      <span class="comment">// 值  </span></span><br><span class="line">      V value;  </span><br><span class="line">      <span class="comment">// 左孩子  </span></span><br><span class="line">      Entry&lt;K,V&gt; left = <span class="keyword">null</span>;  </span><br><span class="line">      <span class="comment">// 右孩子  </span></span><br><span class="line">      Entry&lt;K,V&gt; right = <span class="keyword">null</span>;  </span><br><span class="line">      <span class="comment">// 父节点  </span></span><br><span class="line">      Entry&lt;K,V&gt; parent;  </span><br><span class="line">      <span class="comment">// 当前节点颜色  </span></span><br><span class="line">      <span class="keyword">boolean</span> color = BLACK;  </span><br><span class="line">   </span><br><span class="line">      <span class="comment">// 构造函数  </span></span><br><span class="line">      Entry(K key, V value, Entry&lt;K,V&gt; parent) &#123;  </span><br><span class="line">          <span class="keyword">this</span>.key = key;  </span><br><span class="line">          <span class="keyword">this</span>.value = value;  </span><br><span class="line">          <span class="keyword">this</span>.parent = parent;  </span><br><span class="line">      &#125;  </span><br><span class="line">   </span><br><span class="line">。。。。。。</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>TreeMap一共有4个构造方法：</p><ul><li><p>无参构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    comparator = <span class="keyword">null</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用无参构造方法，不指定比较器，这时候，排序的实现要依赖 key.compareTo() 方法，因此 key 必须实现 Comparable 接口，并覆写其中的 compareTo 方法。</p></li><li><p>带有比较器的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> K&gt; comparator)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.comparator = comparator;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用带比较器的构造方法，这时候，排序依赖该比较器，key 可以不用实现 Comparable 接口。</p></li><li><p>带 Map 的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;  </span><br><span class="line">    comparator = <span class="keyword">null</span>;  </span><br><span class="line">    putAll(m);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该构造方法同样不指定比较器，调用 putAll 方法将 Map 中的所有元素加入到 TreeMap 中。putAll 的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将map中的全部节点添加到TreeMap中  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; map)</span> </span>&#123;  </span><br><span class="line">    <span class="comment">// 获取map的大小  </span></span><br><span class="line">    <span class="keyword">int</span> mapSize = map.size();  </span><br><span class="line">    <span class="comment">// 如果TreeMap的大小是0,且map的大小不是0,且map是已排序的“key-value对”  </span></span><br><span class="line">    <span class="keyword">if</span> (size==<span class="number">0</span> &amp;&amp; mapSize!=<span class="number">0</span> &amp;&amp; map <span class="keyword">instanceof</span> SortedMap) &#123;  </span><br><span class="line">        Comparator c = ((SortedMap)map).comparator();  </span><br><span class="line">        <span class="comment">// 如果TreeMap和map的比较器相等；  </span></span><br><span class="line">        <span class="comment">// 则将map的元素全部拷贝到TreeMap中，然后返回！  </span></span><br><span class="line">        <span class="keyword">if</span> (c == comparator || (c != <span class="keyword">null</span> &amp;&amp; c.equals(comparator))) &#123;  </span><br><span class="line">            ++modCount;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                buildFromSorted(mapSize, map.entrySet().iterator(),  </span><br><span class="line">                            <span class="keyword">null</span>, <span class="keyword">null</span>);  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (java.io.IOException cannotHappen) &#123;  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException cannotHappen) &#123;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 调用AbstractMap中的putAll();  </span></span><br><span class="line">    <span class="comment">// AbstractMap中的putAll()又会调用到TreeMap的put()  </span></span><br><span class="line">    <span class="keyword">super</span>.putAll(map);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，如果 Map 里的元素是排好序的，就调用 buildFromSorted 方法来拷贝 Map 中的元素，这在下一个构造方法中会重点提及，而如果 Map 中的元素不是排好序的，就调用 AbstractMap 的 putAll(map) 方法，该方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet())  </span><br><span class="line">        put(e.getKey(), e.getValue());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显它是将 Map 中的元素一个个 put（插入）到 TreeMap 中的，主要因为 Map 中的元素是无序存放的，因此要一个个插入到红黑树中，使其有序存放，并满足红黑树的性质。</p></li><li><p>带有 SortedMap 的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(SortedMap&lt;K, ? extends V&gt; m)</span> </span>&#123;  </span><br><span class="line">    comparator = m.comparator();  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        buildFromSorted(m.size(), m.entrySet().iterator(), <span class="keyword">null</span>, <span class="keyword">null</span>);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (java.io.IOException cannotHappen) &#123;  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException cannotHappen) &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先将比较器指定为 m 的比较器，这取决于生成 m 时调用构造方法是否传入了指定的构造器，而后调用 buildFromSorted 方法，将 SortedMap 中的元素插入到 TreeMap 中，由于 SortedMap 中的元素师有序的，实际上它是根据 SortedMap 创建的 TreeMap，将 SortedMap 中对应的元素添加到 TreeMap 中。</p></li></ul></li><li><p>插入删除</p><ul><li><p>插入 put</p><p>插入操作即对应 TreeMap 的 put 方法，put 操作实际上只需按照二叉排序树的插入步骤来操作即可，插入到指定位置后，再做调整，使其保持红黑树的特性。put 源码的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">      </span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;  </span><br><span class="line">    Entry&lt;K,V&gt; t = root;  </span><br><span class="line">    <span class="comment">// 若红黑树为空，则插入根节点  </span></span><br><span class="line">    <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;  </span><br><span class="line">    <span class="comment">// TBD:  </span></span><br><span class="line">    <span class="comment">// 5045147: (coll) Adding null to an empty TreeSet should  </span></span><br><span class="line">    <span class="comment">// throw NullPointerException  </span></span><br><span class="line">    <span class="comment">//  </span></span><br><span class="line">    <span class="comment">// compare(key, key); // type check  </span></span><br><span class="line">        root = <span class="keyword">new</span> Entry&lt;K,V&gt;(key, value, <span class="keyword">null</span>);  </span><br><span class="line">        size = <span class="number">1</span>;  </span><br><span class="line">        modCount++;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">int</span> cmp;  </span><br><span class="line">    Entry&lt;K,V&gt; parent;  </span><br><span class="line">    <span class="comment">// split comparator and comparable paths  </span></span><br><span class="line">    Comparator&lt;? <span class="keyword">super</span> K&gt; cpr = comparator;  </span><br><span class="line">    <span class="comment">// 找出(key, value)在二叉排序树中的插入位置。  </span></span><br><span class="line">    <span class="comment">// 红黑树是以key来进行排序的，所以这里以key来进行查找。  </span></span><br><span class="line">    <span class="keyword">if</span> (cpr != <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">do</span> &#123;  </span><br><span class="line">            parent = t;  </span><br><span class="line">            cmp = cpr.compare(key, t.key);  </span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)  </span><br><span class="line">                t = t.left;  </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)  </span><br><span class="line">                t = t.right;  </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">return</span> t.setValue(value);  </span><br><span class="line">        &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();  </span><br><span class="line">        Comparable&lt;? <span class="keyword">super</span> K&gt; k = (Comparable&lt;? <span class="keyword">super</span> K&gt;) key;  </span><br><span class="line">        <span class="keyword">do</span> &#123;  </span><br><span class="line">            parent = t;  </span><br><span class="line">            cmp = k.compareTo(t.key);  </span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)  </span><br><span class="line">                t = t.left;  </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)  </span><br><span class="line">                t = t.right;  </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">return</span> t.setValue(value);  </span><br><span class="line">        &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 为（key-value）新建节点  </span></span><br><span class="line">    Entry&lt;K,V&gt; e = <span class="keyword">new</span> Entry&lt;K,V&gt;(key, value, parent);  </span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)  </span><br><span class="line">        parent.left = e;  </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        parent.right = e;  </span><br><span class="line">    <span class="comment">// 插入新的节点后，调用fixAfterInsertion调整红黑树。  </span></span><br><span class="line">    fixAfterInsertion(e);  </span><br><span class="line">    size++;  </span><br><span class="line">    modCount++;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除 deleteEntry</p><p>删除操作及对应 TreeMap 的 deleteEntry 方法，deleteEntry 方法同样也只需按照二叉排序树的操作步骤实现即可，删除指定节点后，再对树进行调整即可。deleteEntry 方法的实现源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除“红黑树的节点p”  </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteEntry</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;  </span><br><span class="line">    modCount++;  </span><br><span class="line">    size--;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (p.left != <span class="keyword">null</span> &amp;&amp; p.right != <span class="keyword">null</span>) &#123;  </span><br><span class="line">        Entry&lt;K,V&gt; s = successor (p);  </span><br><span class="line">        p.key = s.key;  </span><br><span class="line">        p.value = s.value;  </span><br><span class="line">        p = s;  </span><br><span class="line">    &#125; </span><br><span class="line">      </span><br><span class="line">    Entry&lt;K,V&gt; replacement = (p.left != <span class="keyword">null</span> ? p.left : p.right);  </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span> (replacement != <span class="keyword">null</span>) &#123;  </span><br><span class="line">        replacement.parent = p.parent;  </span><br><span class="line">        <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>)  </span><br><span class="line">            root = replacement;  </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == p.parent.left)  </span><br><span class="line">            p.parent.left  = replacement;  </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            p.parent.right = replacement;  </span><br><span class="line">     </span><br><span class="line">        p.left = p.right = p.parent = <span class="keyword">null</span>;  </span><br><span class="line">     </span><br><span class="line">        <span class="keyword">if</span> (p.color == BLACK)  </span><br><span class="line">            fixAfterDeletion(replacement);  </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>) &#123; </span><br><span class="line">        root = <span class="keyword">null</span>;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.color == BLACK)  </span><br><span class="line">            fixAfterDeletion(p);  </span><br><span class="line">     </span><br><span class="line">        <span class="keyword">if</span> (p.parent != <span class="keyword">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (p == p.parent.left)  </span><br><span class="line">                p.parent.left = <span class="keyword">null</span>;  </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p == p.parent.right)  </span><br><span class="line">                p.parent.right = <span class="keyword">null</span>;  </span><br><span class="line">            p.parent = <span class="keyword">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="TreeMap-和-HashMap-的比较"><a href="#TreeMap-和-HashMap-的比较" class="headerlink" title="TreeMap 和 HashMap 的比较"></a>TreeMap 和 HashMap 的比较</h4><ul><li><p>TreeMap 是根据 key 进行排序的，它的排序和定位需要依赖比较器或覆写 Comparable 接口，也因此不需要 key 覆写 hashCode 方法和 equals 方法，就可以排除掉重复的 key，而 HashMap 的 key 则需要通过覆写 hashCode 方法和 equals 方法来确保没有重复的 key。</p></li><li><p>TreeMap 的查询、插入、删除效率均没有 HashMap 高，一般只有要对 key 排序时才使用 TreeMap。</p></li><li><p>TreeMap 的 key 不能为 null，而 HashMap 的 key 可以为 null。</p></li><li>注：对 TreeSet 和 HashSet 的源码不再进行剖析，二者分别是基于 TreeMap 和 HashMap 实现的，只是对应的节点中只有 key，而没有 value，因此对 TreeMap 和 HashMap 比较了解的话，对 TreeSet 和 HashSet 的理解就会非常容易。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的Object类</title>
      <link href="/2019/03/25/Java%E7%9A%84Object%E7%B1%BB/"/>
      <url>/2019/03/25/Java%E7%9A%84Object%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">参考 JDK1.8 的 API 文档</a></p><h2 id="Object-类"><a href="#Object-类" class="headerlink" title="Object 类"></a>Object 类</h2><p>Object 类在 JDK1.8 的 API 中是这么定义的：</p><blockquote><p><strong>public class Object</strong></p><p>Class <code>Object</code> is the root of the class hierarchy. Every class has <code>Object</code> as a superclass. All objects, including arrays, implement the methods of this class.</p></blockquote><h2 id="Object-类的方法"><a href="#Object-类的方法" class="headerlink" title="Object 类的方法"></a>Object 类的方法</h2><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><a href="#clone">protected Object clone()</a></td><td>创造并返回这个对象的复制</td></tr><tr><td><a href="#equals">boolean equals(Object obj)</a></td><td>指示某个其他对象是否“等于”此对象</td></tr><tr><td><a href="#finalize">protected void finalize()</a></td><td>当垃圾回收确定没有对该对象的引用时，由对象上的垃圾收集器调用</td></tr><tr><td><a href="#getClass">Class&lt;?&gt; getClass()</a></td><td>返回这个对象的运行时类</td></tr><tr><td><a href="#hashCode">int hashCode()</a></td><td>返回这个对象的哈希码</td></tr><tr><td><a href="#notify">void notify()</a></td><td>唤醒在该对象监视器上的一个单线程</td></tr><tr><td><a href="#notifyAll">void notifyAll()</a></td><td>唤醒在该对象监视器上的所有线程</td></tr><tr><td><a href="#toString">String toString()</a></td><td>返回该对象的字符串表示</td></tr><tr><td><a href="#wait">void wait()</a></td><td>导致当前线程进入等待，直到另一个线程调用这个对象的 notify() 或者 notifyAll() 方法</td></tr><tr><td><a href="#wait">void wait(long timeout)</a></td><td>导致当前线程进入等待，直到另一个线程调用这个对象的 notify() 或者 notifyAll() 方法，或者超过了指定的时间</td></tr><tr><td><a href="#wait">void wait(long timeout, int nanos)</a></td><td>导致当前线程进入等待，直到另一个线程调用这个对象的 notify() 或者 notifyAll() 方法，或者某个其他线程中断当前线程，或者超过了指定的时间</td></tr></tbody></table><h2 id="方法详解"><a href="#方法详解" class="headerlink" title="方法详解"></a>方法详解</h2><h3 id="getClass"><a href="#getClass" class="headerlink" title="getClass"></a>getClass</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Class&lt;?&gt; getClass()</span><br></pre></td></tr></table></figure><ul><li>返回此 <code>Object</code> 运行时类的 <code>Class</code> 对象。返回的 <code>Class</code> 对象是由所表示类的 <code>static synchronized</code> 方法锁定的对象。</li></ul><h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><ul><li><p>返回该对象的哈希码值。支持此方法是为了提高哈希表（例如 <code>java.util.Hashtable</code> 提供的哈希表）的性能。</p></li><li><p>hashCode 的常规协定是：</p><ul><li>在 Java 应用程序执行期间，在对同一对象多次调用 <code>hashCode</code> 方法时，必须一致地返回相同的整数，前提是将对象进行 <code>equals</code> 比较时所用的信息没有被修改。从某一应用程序的一次执行到同一应用程序的另一次执行，该整数无需保持一致。</li><li>如果根据 <code>equals(Object)</code> 方法，两个对象是相等的，那么对这两个对象中的每个对象调用 <code>hashCode</code> 方法都必须生成相同的整数结果。</li><li>如果根据 <code>equals(java.lang.Object)</code> 方法，两个对象不相等，那么对这两个对象中的任一对象上调用 <code>hashCode</code> 方法<em>不</em> 要求一定生成不同的整数结果。但是，程序员应该意识到，为不相等的对象生成不同整数结果可以提高哈希表的性能。</li></ul></li></ul><h3 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br></pre></td></tr></table></figure><ul><li>指示其他某个对象是否与此对象“相等”。如果此对象与 obj 参数相同，则返回 <code>true</code>；否则返回 <code>false</code>。</li><li><code>equals</code> 方法在非空对象引用上实现相等关系：<ul><li><em>自反性</em>：对于任何非空引用值 <code>x</code>，<code>x.equals(x)</code> 都应返回 <code>true</code>。</li><li><em>对称性</em>：对于任何非空引用值 <code>x</code> 和 <code>y</code>，当且仅当 <code>y.equals(x)</code> 返回 <code>true</code> 时，<code>x.equals(y)</code> 才应返回 <code>true</code>。</li><li><em>传递性</em>：对于任何非空引用值 <code>x</code>、<code>y</code> 和 <code>z</code>，如果 <code>x.equals(y)</code> 返回 <code>true</code>，并且 <code>y.equals(z)</code> 返回 <code>true</code>，那么 <code>x.equals(z)</code> 应返回 <code>true</code>。</li><li><em>一致性</em>：对于任何非空引用值 <code>x</code> 和 <code>y</code>，多次调用 <code>x.equals(y)</code> 始终返回 <code>true</code> 或始终返回 <code>false</code>，前提是对象上 <code>equals</code> 比较中所用的信息没有被修改。</li><li>对于任何非空引用值 <code>x</code>，<code>x.equals(null)</code> 都应返回 <code>false</code>。</li></ul></li><li>该方法比较的是引用，对于任何非空引用值 <code>x</code> 和 <code>y</code>，当且仅当 <code>x</code> 和 <code>y</code> 引用同一个对象时，此方法才返回 <code>true</code>（<code>x == y</code> 具有值 <code>true</code>）。</li><li>很多类对该方法进行了重写，以实现比较对象实际内容的功能，这里需要注意的是：<strong>当此方法被重写时，通常有必要重写 <code>hashCode</code> 方法，以维护 <code>hashCode</code> 方法的常规协定，该协定声明相等对象必须具有相等的哈希码。</strong></li></ul><h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span></span><br></pre></td></tr></table></figure><ul><li>创建并返回此对象的一个复制。“复制”的准确含义可能取决于对象的类。</li><li>如果对象的类不支持 <code>Cloneable</code> 接口，则重写 <code>clone</code> 方法的子类也会抛出此异常，以指示无法复制某个实例。</li><li>该方法执行的是对象的”浅拷贝”，即对象本身没有被复制。 </li><li><code>Object</code> 类本身不实现接口 <code>Cloneable</code>，所以在类为 <code>Object</code> 的对象上调用 <code>clone</code> 方法将会导致在运行时抛出异常。但所有的数组都被视为实现接口 <code>Cloneable</code>。</li></ul><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><ul><li><p>返回该对象的字符串表示。通常， <code>toString</code> 方法会返回一个“以文本方式表示”此对象的字符串。结果应是一个简明但易于读懂的信息表达式。建议所有子类都重写此方法。</p></li><li><p><code>Object</code> 类的 <code>toString</code> 方法返回一个字符串，该字符串由类名（对象是该类的一个实例）、at 标记符“<code>@</code>”和此对象哈希码的无符号十六进制表示组成。换句话说，该方法返回一个字符串，它的值等于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getClass().getName() + <span class="string">'@'</span> + Integer.toHexString(hashCode())</span><br></pre></td></tr></table></figure></li></ul><h3 id="notify"><a href="#notify" class="headerlink" title="notify"></a>notify</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><ul><li>唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。选择是任意性的，并在对实现做出决定时发生。</li><li>此方法只应由作为此对象监视器的所有者的线程来调用。</li><li>如果当前线程不是此对象监视器的所有者，抛出 <code>IllegalMonitorStateException</code> 异常。</li></ul><h3 id="notifyAll"><a href="#notifyAll" class="headerlink" title="notifyAll"></a>notifyAll</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><ul><li>唤醒在此对象监视器上等待的所有线程。</li><li><p>此方法只应由作为此对象监视器的所有者的线程来调用。</p></li><li><p>如果当前线程不是此对象监视器的所有者，抛出 <code>IllegalMonitorStateException</code> 异常。</p></li></ul><h3 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span></span><br></pre></td></tr></table></figure><ul><li><p>在其他线程调用此对象的 notify() 方法或 notifyAll() 方法前，导致当前线程等待。</p></li><li><p>此方法只应由作为此对象监视器的所有者的线程来调用。</p></li><li>抛出：<ul><li><code>IllegalMonitorStateException</code> - 如果当前线程不是此对象监视器的所有者。</li><li><code>InterruptedException</code> - 如果在当前线程等待通知之前或者正在等待通知时，任何线程中断了当前线程。在抛出此异常时，当前线程的中断状态被清除。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span></span><br></pre></td></tr></table></figure><ul><li><p>在其他线程调用此对象的 notify() 方法或 notifyAll() 方法前，或者超过指定的时间量前，导致当前线程等待。</p></li><li><p>此方法只应由作为此对象监视器的所有者的线程来调用。</p></li><li><p>参数：</p><ul><li><code>timeout</code> - 要等待的最长时间（以毫秒为单位）。</li></ul></li><li><p>抛出：</p><ul><li><p><code>IllegalArgumentException</code> - 如果超时值为负。</p></li><li><p><code>IllegalMonitorStateException</code> - 如果当前线程不是此对象监视器的所有者。</p></li><li><p><code>InterruptedException</code> - 如果在当前线程等待通知之前或者正在等待通知时，任何线程中断了当前线程。在抛出此异常时，当前线程的中断状态被清除。</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException</span></span><br></pre></td></tr></table></figure><ul><li><p>在其他线程调用此对象的 notify() 方法或 notifyAll() 方法前，或者其他某个线程中断当前线程，或者超过指定的时间量前，导致当前线程等待。</p></li><li><p>此方法只应由作为此对象监视器的所有者的线程来调用。</p></li><li><p>参数：</p><ul><li><code>timeout</code> - 要等待的最长时间（以毫秒为单位）。</li><li><code>nanos</code> - 额外时间（以毫微秒为单位，范围是 0-999999）。</li></ul></li><li><p>抛出：</p><ul><li><p><code>IllegalArgumentException</code> - 如果超时值是负数，或者毫微秒值不在 0-999999 范围内。</p></li><li><p><code>IllegalMonitorStateException</code> - 如果当前线程不是此对象监视器的所有者。</p></li><li><p><code>InterruptedException</code> - 如果在当前线程等待通知之前或者正在等待通知时，任何线程中断了当前线程。在抛出此异常时，当前线程的中断状态被清除。</p></li></ul></li></ul><h3 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable</span></span><br></pre></td></tr></table></figure><ul><li>当垃圾回收器确定不存在对该对象的引用时，由对象的垃圾回收器调用此方法。子类重写 <code>finalize</code> 方法，以配置系统资源或执行其他清除。</li><li>对于任何给定对象，Java 虚拟机最多只调用一次 <code>finalize</code> 方法。</li><li><code>finalize</code> 方法抛出的任何异常都会导致此对象的终结操作停止，但此外的都会被忽略。</li><li><code>Throwable</code> - 此方法抛出的 Exception</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统（七）</title>
      <link href="/2019/03/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%83%EF%BC%89/"/>
      <url>/2019/03/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%83%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="文件系统和文件"><a href="#文件系统和文件" class="headerlink" title="文件系统和文件"></a>文件系统和文件</h3><ul><li>文件系统是操作系统中管理持久性数据的子系统，提供数据存储和访问功能<ul><li>组织、检索、读写访问数据</li><li>大多数计算机系统都有文件系统</li><li>Google 也是一个文件系统</li></ul></li><li>文件是具有符号名，由字节序列构成的数据项集合<ul><li>文件系统的基本数据单位</li><li>文件名是文件的标识符号</li></ul></li><li>文件系统的功能<ul><li>分配文件磁盘空间<ul><li>管理文件块(位置和顺序)</li><li>管理空闲空间(位置)</li><li>分配算法(策略)</li></ul></li><li>管理文件集合<ul><li>定位：文件及其内容</li><li>命名：通过名字找到文件</li><li>文件系统结构：文件组织方式</li></ul></li><li>数据可靠和安全<ul><li>安全：多层次保护数据安全</li><li>可靠<ul><li>持久保存文件</li><li>避免系统崩溃、媒体错误、攻击等</li></ul></li></ul></li></ul></li><li>文件属性<ul><li>名称、类型、位置、大小、保护、创建者、创建时间、最近修改时间，…</li><li>文件头：文件系统元数据中的文件信息<ul><li>文件属性</li><li>文件存储位置和顺序</li></ul></li></ul></li></ul><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><ul><li>文件访问模式<ul><li>进程访问文件数据前必须先”打开”文件</li></ul></li><li>内核跟踪进程打开的所有文件<ul><li>操作系统为每个进程维护一个打开文件表</li><li>文件描述符是打开文件的标识<br><img src="http://qnya.pomo16.club/109.png" alt></li></ul></li></ul><h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><ul><li>操作系统在打开文件表中维护的打开文件状态和信息<ul><li>文件指针<ul><li>最近一次读写位置</li><li>每个进程分别维护自己的打开文件指针</li></ul></li><li>文件打开计数<ul><li>当前打开文件的次数</li><li>最后一个进程关闭文件时，将其从打开文件表中移除</li></ul></li><li>文件的磁盘位置<ul><li>缓存数据访问信息</li></ul></li><li>访问权限<ul><li>每个进程的文件访问模式信息</li></ul></li></ul></li></ul><h3 id="文件的用户视图和系统视图"><a href="#文件的用户视图和系统视图" class="headerlink" title="文件的用户视图和系统视图"></a>文件的用户视图和系统视图</h3><ul><li>文件的用户视图<ul><li>持久的<strong>数据结构</strong></li></ul></li><li>系统访问接口<ul><li><strong>字节序列</strong>的集合( UNIX )</li><li>系统不关心存储在磁盘上的数据结构</li></ul></li><li>操作系统的文件视图<ul><li>数据块的集合</li><li>数据块是逻辑存储单元，而扇区是物理存储单元</li><li>块大小 &lt; &gt; 扇区大小</li></ul></li><li>用户视图到系统视图的转换<ul><li>进程读文件<ul><li>获取字节所在的数据块</li><li>返回数据块内对应部分</li></ul></li><li>进程写文件<ul><li>获取数据块</li><li>修改数据块中对应部分</li><li>写回数据块</li></ul></li><li><strong>文件系统中的基本操作单位是数据块</strong><ul><li>例如，getc() 和 putc() 即使每次只访问1字节的数据，也需要缓存目标数据4096字节</li></ul></li></ul></li></ul><h3 id="访问模式"><a href="#访问模式" class="headerlink" title="访问模式"></a>访问模式</h3><ul><li>操作系统需要了解进程如何访问文件</li><li><strong>顺序访问</strong>：按字节依次读取<ul><li>大多数的文件访问都是顺序访问</li></ul></li><li><strong>随机访问</strong>：从中间读写<ul><li>不常用，但仍然重要<ul><li>例如：虚拟内存中把内存页存储在文件</li></ul></li></ul></li><li><strong>索引访问</strong>：依据数据特征索引<ul><li>通常操作系统不完整提供索引访问</li><li>数据库是建立在索引内容的磁盘访问上</li></ul></li></ul><h3 id="文件内部结构"><a href="#文件内部结构" class="headerlink" title="文件内部结构"></a>文件内部结构</h3><ul><li>无结构：单词、字节序列</li><li>简单记录结构<ul><li>分列</li><li>固定长度</li><li>可变长度</li></ul></li><li>复杂结构<ul><li>格式化的文档(如，MS Word，PDF)</li><li>可执行文件</li><li>…</li></ul></li></ul><h3 id="文件共享和访问控制"><a href="#文件共享和访问控制" class="headerlink" title="文件共享和访问控制"></a>文件共享和访问控制</h3><ul><li><strong>多用户系统</strong>中的文件共享是很必要的</li><li>访问控制<ul><li>每个用户能够获得哪些文件的哪些访问权限</li><li>访问模式：读、写、执行、删除、列表等</li></ul></li><li>文件访问控制列表( ACL )：&lt;文件实体，权限&gt;</li><li>Unix 模式<ul><li>&lt;用户|组|所有人，读|写|可执行&gt;</li><li><strong>用户标识 ID</strong> ：标识用户，表明每个用户所允许的权限以及保护模式</li><li><strong>组标识 ID </strong>：允许用户组成组，并指定了组访问权限</li></ul></li></ul><h3 id="语义一致性"><a href="#语义一致性" class="headerlink" title="语义一致性"></a>语义一致性</h3><ul><li>规定多进程如何同时访问共享文件<ul><li>与同步算法类似</li><li>因磁盘 I/O 和网络延迟而设计简单</li></ul></li><li>Unix 文件系统( UFS )语义<ul><li>对打开文件的写入内容立即对其他打开同一文件的其他用户可见</li><li>共享文件指针允许多用户同时读取和写入文件</li></ul></li><li>会话语义：写入内容只有当文件关闭时可见</li><li>读写锁：一些操作系统和文件系统提供该功能</li></ul><h3 id="分层文件系统"><a href="#分层文件系统" class="headerlink" title="分层文件系统"></a>分层文件系统</h3><ul><li>文件以目录的方式组织起来</li><li>目录是一类特殊的文件<ul><li>目录的内容是文件索引表&lt;文件名，指向文件的指针&gt;</li></ul></li><li>目录和文件的树形结构<ul><li>早起的文件系统是扁平的(只有一层目录)</li><li><img src="http://qnya.pomo16.club/110.png" alt></li></ul></li></ul><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>目录操作<ul><li>典型目录操作<ul><li>搜索文件</li><li>创建文件</li><li>删除文件</li><li>列目录</li><li>重命名文件</li><li>遍历路径</li></ul></li><li>操作系统应该只允许内核修改目录<ul><li>确保映射的完整性</li><li>应用程序通过系统调用访问目录</li></ul></li></ul></li><li>目录实现<ul><li>文件名的线性列表，包涵了指向数据块的指针<ul><li>编程简单</li><li>执行耗时</li></ul></li><li><strong>哈希表</strong>：哈希数据结构的线性表<ul><li>减少目录搜索时间</li><li>冲突 - 两个文件名的哈希值相同</li><li>固定大小</li></ul></li></ul></li></ul><h3 id="文件别名"><a href="#文件别名" class="headerlink" title="文件别名"></a>文件别名</h3><ul><li>两个或多个文件名关联同一个文件<br><img src="http://qnya.pomo16.club/111.png" alt></li><li><strong>硬链接</strong>：多个文件项指向一个文件</li><li><strong>软链接</strong>：以”快捷方式”指向其他文件<ul><li>通过存储真实文件的逻辑名称来实现</li></ul></li></ul><h3 id="文件目录中的循环"><a href="#文件目录中的循环" class="headerlink" title="文件目录中的循环"></a>文件目录中的循环</h3><p><img src="http://qnya.pomo16.club/112.png" alt></p><ul><li>如何保证没有循环?<ul><li>只允许到文件的链接，不允许在子目录的链接</li><li>增加链接时，用循环检测算法确定是否合理</li></ul></li><li>更多实践<ul><li>限制路径可遍历文件目录的数量</li></ul></li></ul><h3 id="名字解析-路径遍历"><a href="#名字解析-路径遍历" class="headerlink" title="名字解析(路径遍历)"></a>名字解析(路径遍历)</h3><ul><li>名字解析：把逻辑名字转换成物理资源(如文件)<ul><li>依据路径名，在文件系统中找到实际文件位置</li><li>遍历文件目录直到找到目标文件</li></ul></li><li>举例：解析”/bin/ls”<ul><li>读取根目录的文件头(在磁盘固定位置)</li><li>读取根目录的数据块，搜索 “bin” 项</li><li>读取 bin 的文件头</li><li>读取 bin 的数据块；搜索 “ls” 项</li><li>读取 ls 大的文件头</li></ul></li><li>当前工作目录( PWD )<ul><li>每个进程都会指向一个文件目录用于解析文件名</li><li>允许用户指定相对路径来代替绝对路径<ul><li>如，用 PWD = “/bin” 能够解析 “ls”</li></ul></li></ul></li></ul><h3 id="文件系统挂载"><a href="#文件系统挂载" class="headerlink" title="文件系统挂载"></a>文件系统挂载</h3><ul><li>文件系统需要先挂载才能被访问</li><li>未挂载的文件系统被挂载在挂载点上</li><li><img src="http://qnya.pomo16.club/113.png" height="400px"></li></ul><h3 id="文件系统种类"><a href="#文件系统种类" class="headerlink" title="文件系统种类"></a>文件系统种类</h3><ul><li>磁盘文件系统<ul><li>文件存储在数据存储设备上，如磁盘</li><li>例如：FAT，NTFS，ext2/3，ISO9660等</li></ul></li><li>数据库文件系统<ul><li>文件特征是可被寻址(辨识)的</li><li>例如：WinFS</li></ul></li><li>日志文件系统<ul><li>记录文件系统的修改/事件</li></ul></li><li>网络/分布式文件系统<ul><li>例如：NFS，SMB，AFS，GFS</li><li>文件可以通过网络被共享<ul><li>文件位于远程服务器</li><li>客户端远程挂载服务器文件系统</li><li>标准系统文件访问被转换成远程访问</li><li>标准文件共享协议：NFS for Unix，CIFS for Windows</li></ul></li><li>分布式文件系统的挑战<ul><li>客户端和客户端上的用户辨别起来很复杂<ul><li>例如：NFS 是不安全的</li></ul></li><li><strong>一致性</strong>问题</li><li>错误处理模式</li></ul></li></ul></li><li>特殊/虚拟文件系统</li></ul><h3 id="虚拟文件系统"><a href="#虚拟文件系统" class="headerlink" title="虚拟文件系统"></a>虚拟文件系统</h3><ul><li>虚拟文件系统的实现<ul><li>分层结构<ul><li>虚拟(逻辑)文件系统( VFS，Virtual File System )</li><li>特定文件系统模块<br><img src="http://qnya.pomo16.club/114.png" alt></li></ul></li></ul></li><li>虚拟文件系统( VFS )<ul><li>目的：对所有不同文件系统的抽象</li><li>功能<ul><li>提供相同的文件和文件系统<strong>接口</strong></li><li>管理所有文件和文件系统关联的<strong>数据结构</strong></li><li>高效查询<strong>例程</strong>，遍历文件系统</li><li>与特定文件系统模块的<strong>交互</strong></li></ul></li></ul></li></ul><h3 id="文件系统基本数据结构"><a href="#文件系统基本数据结构" class="headerlink" title="文件系统基本数据结构"></a>文件系统基本数据结构</h3><ul><li>文件卷控制块( Unix：”<strong>superblock</strong>“ )<ul><li>每个文件系统一个</li><li>文件系统详细信息</li><li>块、块大小、空余块、计数/指针等</li></ul></li><li>文件控制块( Unix：”vnode” or “<strong>inode</strong>“ )<ul><li>每个文件一个</li><li>文件详细信息</li><li>访问权限、拥有者、大小、数据块位置等</li></ul></li><li>目录项( Linux：”dentry” )<ul><li>每个目录项一个(目录和文件)</li><li>将目录项数据结构及树形布局编码成树形数据结构</li><li>指向文件控制块、父目录、子目录等</li></ul></li></ul><h3 id="文件系统的存储结构"><a href="#文件系统的存储结构" class="headerlink" title="文件系统的存储结构"></a>文件系统的存储结构</h3><ul><li>文件系统数据结构<ul><li>卷控制块(每个文件系统一个)</li><li>文件控制块(每个文件一个)</li><li>目录节点(每个目录项一个)</li></ul></li><li>持久存储在外存中：存储设备的数据块中</li><li>当需要时加载进内存<ul><li>卷控制模块：当文件系统挂载时进入内存</li><li>文件控制块：当文件被访问时进入内存</li><li>目录节点：在遍历一个文件路径时进入内存</li></ul></li><li>文件系统的存储视图<br><img src="http://qnya.pomo16.club/115.png" alt></li></ul><h3 id="文件缓存"><a href="#文件缓存" class="headerlink" title="文件缓存"></a>文件缓存</h3><ul><li>多种磁盘缓存位置<br><img src="http://qnya.pomo16.club/116.png" alt></li><li>数据块缓存<ul><li>数据块按需读入内存<ul><li>提供 read() 操作</li><li>预读：预先读取后面的数据块</li></ul></li><li>数据块使用后被缓存<ul><li>假设数据将会再次用到</li><li>写操作可能被缓存和延迟写入</li></ul></li><li>两种数据块缓存方式<ul><li>数据块缓存</li><li>页缓存：同一缓存数据块和内存页</li></ul></li><li><img src="http://qnya.pomo16.club/117.png" alt></li></ul></li><li>页缓存<ul><li>虚拟页式存储：在虚拟地址空间中虚拟页面可映射到本地外存文件中</li><li>文件数据块的页缓存<ul><li>在虚拟内存中文件数据块被映射成页</li><li>文件的读/写操作被转换成对内存的访问</li><li>可能导致缺页和/或设置为脏页</li><li>问题：页置换算法需要协调虚拟存储和页缓存间的页面数</li></ul></li><li><img src="http://qnya.pomo16.club/118.png" alt></li><li><img src="http://qnya.pomo16.club/119.png" alt></li></ul></li></ul><h3 id="文件系统中打开文件的数据结构"><a href="#文件系统中打开文件的数据结构" class="headerlink" title="文件系统中打开文件的数据结构"></a>文件系统中打开文件的数据结构</h3><ul><li>文件描述符<ul><li>每个被打开的文件都有一个文件描述符</li><li>文件状态信息：目录项、当前文件指针、文件操作设置等</li></ul></li><li>打开文件表<ul><li>每个进程有一个进程打开文件表</li><li>一个系统级的打开文件表</li><li>有文件被打开时，文件卷就不能被卸载</li><li><img src="http://qnya.pomo16.club/120.png" alt></li></ul></li><li>打开文件锁<ul><li>一些文件系统提供文件锁，用于协调多线程的文件访问<ul><li><strong>强制</strong>：根据锁保持情况和访问需求确定是否拒绝访问</li><li><strong>劝告</strong>：进程可以查找锁的状态来决定怎么做</li></ul></li></ul></li></ul><h3 id="文件分配"><a href="#文件分配" class="headerlink" title="文件分配"></a>文件分配</h3><ul><li>文件大小<ul><li>大多数文件都很小<ul><li>需要对小文件提供很好的支持</li><li>块空间不能太大</li></ul></li><li>一些文件非常大<ul><li>必须支持大文件(64位文件偏移)</li><li>大文件访问需要高效</li></ul></li></ul></li><li>文件分配<ul><li>如何表示分配给一个文件数据块的位置和顺序</li><li>分配方式<ul><li>连续分配</li><li>链式分配</li><li>索引分配</li></ul></li><li>指标<ul><li>存储效率：外部碎片等</li><li>读写性能：访问速度</li></ul></li></ul></li><li>连续分配<ul><li>文件头指定起始块和长度<br><img src="http://qnya.pomo16.club/121.png" alt></li><li>分配策略：最先匹配，最佳匹配，…</li><li>优点<ul><li>文件读取表现好</li><li>高效的顺序和随机访问</li></ul></li><li>缺点<ul><li>碎片！</li><li>文件增长问题(预分配？按需分配？)</li></ul></li></ul></li><li>链式分配<ul><li>文件以数据块链表方式存储</li><li>文件头包含了到第一块和最后一块的指针<br><img src="http://qnya.pomo16.club/122.png" alt></li><li>优点<ul><li>创建、增大、缩小很容易</li><li>没有碎片</li></ul></li><li>缺点<ul><li>无法实现真正的随机访问</li><li>可靠性差：破坏一个链，后面的数据块就丢了</li></ul></li></ul></li><li>索引分配<ul><li>为每个文件创建一个<strong>索引数据块</strong>：指向文件数据块的指针列表</li><li>文件头包含了索引数据块指针<br><img src="http://qnya.pomo16.club/123.png" alt></li><li>优点<ul><li>创建、增大、缩小很容易</li><li>没有碎片</li><li>支持直接访问</li></ul></li><li>缺点<ul><li>当文件很小时，存储索引的<strong>开销</strong></li><li>如何处理大文件？</li></ul></li><li>大文件的索引分配<ul><li>链式索引块( IB + IB + … )<br><img src="http://qnya.pomo16.club/124.png" alt></li><li>多级索引块( IB <em> IB </em> … )<br><img src="http://qnya.pomo16.club/125.png" alt></li></ul></li><li>UFS 多级索引分配<ul><li>文件头包含13个指针<ul><li>10个指针指向数据块</li><li>第11个指针指向索引快</li><li>第12个指针指向二级索引块</li><li>第13个指针指向三级索引块</li></ul></li><li>效果<ul><li>提高了文件大小限制阈值</li><li>动态分配数据块，文件扩展很容易</li><li>小文件开销小</li><li>只为大文件分配间接数据块，大文件在访问数据块时需要大量查询</li></ul></li><li><img src="http://qnya.pomo16.club/126.png" alt></li></ul></li></ul></li></ul><h3 id="空闲空间管理"><a href="#空闲空间管理" class="headerlink" title="空闲空间管理"></a>空闲空间管理</h3><ul><li>跟踪记录文件卷中未分配的数据块<ul><li>采用什么数据结构表示空闲空间列表？</li></ul></li><li>空闲空间组织：位图<ul><li>用位图代表空闲数据块列表<ul><li>11111111111111111111100111010101110011111…..</li><li>D<sub>i</sub> = 0 表明数据块 i 是空闲，否则，表示已分配</li></ul></li><li>使用简单但是可能会是一个很大的向量表<ul><li>160 GB 磁盘 -&gt; 40 M 数据块 -&gt; 5 MB 位图</li><li>假定空闲空间在磁盘中均匀分布，则找到”0”之前要扫面 n/r<ul><li>n = 磁盘上数据块的总数</li><li>r = 空闲块的数目</li></ul></li></ul></li></ul></li><li>其余空闲空间组织方式<br><img src="http://qnya.pomo16.club/127.png" alt></li></ul><h3 id="冗余磁盘阵列-RAID"><a href="#冗余磁盘阵列-RAID" class="headerlink" title="冗余磁盘阵列 RAID"></a>冗余磁盘阵列 RAID</h3><ul><li>磁盘分区<ul><li>通常磁盘通过分区来最大限度减小寻道时间<ul><li>分区是一组柱面的集合</li><li>每个分区都可视为逻辑上独立的磁盘</li><li><img src="http://qnya.pomo16.club/128.png" alt></li></ul></li></ul></li><li>一个典型的磁盘文件系统组织<ul><li>文件卷：一个拥有完整文件系统实例的外存空间，通常常驻在磁盘的单个分区上<br><img src="http://qnya.pomo16.club/129.png" alt></li></ul></li><li>多磁盘管理<ul><li>使用多磁盘可改善<ul><li>吞吐量(通过并行)</li><li>可靠性和可用性(通过冗余)</li></ul></li><li>冗余磁盘阵列( RAID，Redundant Array of Inexpensive Disks )<ul><li>多种磁盘管理技术</li><li>RAID 分类，如：RAID - 0，RAID - 1，RAID - 5</li></ul></li><li>冗余磁盘阵列的实现<ul><li>软件：操作系统内核的文件卷管理</li><li>硬件：RAID 硬件控制器( I/O )</li></ul></li></ul></li><li>RAID - 0：磁盘条带化<ul><li>把数据块分成多个子块，存储在独立的磁盘中<ul><li>通过独立磁盘上并行数据块访问提供更大的磁盘带宽<br><img src="http://qnya.pomo16.club/130.png" alt></li></ul></li></ul></li><li>RAID - 1：磁盘镜像<ul><li>向两个磁盘写入，从任何一个读取<ul><li>可靠性成倍增长</li><li>读取性能线性增长</li><li><img src="http://qnya.pomo16.club/131.png" alt></li></ul></li></ul></li><li>RAID - 4：带校验的磁盘条带化<ul><li>数据块级的磁盘条带化加专用奇偶校验磁盘<ul><li>允许从任意一个故障磁盘中恢复</li><li><img src="http://qnya.pomo16.club/132.png" alt></li></ul></li></ul></li><li>RAID - 5：带分布式校验的磁盘条带化<ul><li><img src="http://qnya.pomo16.club/133.png" alt></li></ul></li><li>基于位和基于块的磁盘条带化<ul><li>条带化和奇偶校验按”<strong>字节</strong>“或者”<strong>位</strong>“<ul><li>RAID - 0/4/5：基于数据块</li><li>RAID - 3：基于位</li></ul></li></ul></li><li>可纠正多个磁盘错误的冗余磁盘阵列<ul><li>RAID - 5：每组条带块有一个奇偶校验块<ul><li>允许一个磁盘错误</li></ul></li><li>RAID - 6：每组条带块有两个冗余块<ul><li>允许两个磁盘错误</li></ul></li></ul></li><li>RAID 嵌套<ul><li>RAID 0 + 1<br><img src="http://qnya.pomo16.club/134.png" alt></li><li>RAID 1 + 0<br><img src="http://qnya.pomo16.club/135.png" alt></li></ul></li></ul><h2 id="I-O-子系统"><a href="#I-O-子系统" class="headerlink" title="I/O 子系统"></a>I/O 子系统</h2><h3 id="三种常见设备接口类型"><a href="#三种常见设备接口类型" class="headerlink" title="三种常见设备接口类型"></a>三种常见设备接口类型</h3><ul><li>字符设备：如，键盘/鼠标，串口等<ul><li>访问特征：以字节为单位顺序访问</li><li>I/O 命令<ul><li>get()、put()等</li><li>通常使用文件访问接口和语义</li></ul></li></ul></li><li>块设备：如，磁盘驱动器，磁带驱动器，光驱等<ul><li>访问特征：均匀的数据块访问</li><li>I/O 命令<ul><li>原始 I/O 或文件系统接口</li><li>内存映射文件访问</li></ul></li></ul></li><li>网络设备：如，以太网，无线，蓝牙等<ul><li>访问特征：格式化报文交换</li><li>I/O 命令<ul><li>send/receive 网络报文</li><li>通过网络接口支持多种网络协议</li></ul></li></ul></li></ul><h3 id="同步和异步-I-O"><a href="#同步和异步-I-O" class="headerlink" title="同步和异步 I/O"></a>同步和异步 I/O</h3><ul><li>阻塞 I/O ：”<strong>Wait</strong>“<ul><li>读数据( read )时，进程将进入等待状态，直到完成数据读出</li><li>写数据( write )时，进程将进入等待状态，直到设备完成数据写入处理</li><li><img src="http://qnya.pomo16.club/136.png" height="400px"></li></ul></li><li>非阻塞 I/O ：”<strong>Don’t Wait</strong>“<ul><li>立即从 read 或 write 系统调用返回，返回值为成功传输字节数</li><li>read 或 write 的传输字节数可能为零</li><li><img src="http://qnya.pomo16.club/137.png" height="400px"></li></ul></li><li>异步 I/O ：”<strong>Tell Me Later</strong>“<ul><li>读数据时，使用指针标记好用户缓冲区，立即返回；稍后内核将填充缓冲区并通知用户</li><li>写数据时，使用指针标记好用户缓冲区，立即返回；稍后内核将处理数据并通知用户</li><li><img src="http://qnya.pomo16.club/138.png" height="400px"></li></ul></li></ul><h3 id="I-O-结构"><a href="#I-O-结构" class="headerlink" title="I/O 结构"></a>I/O 结构</h3><ul><li>一个实际例子<br><img src="http://qnya.pomo16.club/139.png" alt></li><li>CPU 与设备的连接<ul><li><img src="http://qnya.pomo16.club/140.png" alt></li><li>补充：设备控制器<ul><li>CPU 和 I/O 设备间的接口</li><li>向 CPU 提供特殊指令和寄存器</li></ul></li></ul></li><li>I/O 指令和内存映射 I/O<ul><li>I/O 指令<ul><li>通过 I/O 端口号访问设备寄存器</li><li>特殊的 CPU 指令<ul><li>out 0x21,AL</li></ul></li></ul></li><li>内存映射 I/O<ul><li>设备的寄存器/存储被映射到内存物理地址空间中</li><li>通过内存 load/store 指令完成  I/O 操作</li><li>MMU 设置映射，硬件跳线或程序在启动时设置地址</li></ul></li></ul></li><li>内核 I/O 结构<br><img src="http://qnya.pomo16.club/141.png" alt></li><li>I/O 请求生存周期<br><img src="http://qnya.pomo16.club/142.png" alt></li></ul><h3 id="I-O-数据传输"><a href="#I-O-数据传输" class="headerlink" title="I/O 数据传输"></a>I/O 数据传输</h3><ul><li>CPU 与设备控制器的数据传输<ul><li>程序控制 I/O (PIO，Programmed I/O )<ul><li>通过 CPU 的 in/out 或者 load/store 传输所有数据</li><li>特点<ul><li>硬件简单，编程容易</li><li>消耗的 CPU 时间和数据量成正比</li></ul></li><li>适用于简单的、小型的设备 I/O</li></ul></li><li>直接内存访问( DMA )<ul><li>设备控制器可直接访问系统总线</li><li>控制器直接与内存互相传输数据</li><li>特点<ul><li>设备传输数据不影响 CPU</li><li>需要 CPU 参与设置</li></ul></li><li>适用于高吞吐量 I/O</li></ul></li></ul></li><li>通过直接 I/O 寻址读取磁盘数据的步骤<br><img src="http://qnya.pomo16.club/143.png" alt></li><li>I/O 设备通知操作系统的机制<ul><li>操作系统需要了解设备状态<ul><li>I/O 操作完成时间</li><li>I/O 操作遇到错误</li></ul></li><li>两种方式<ul><li>CPU 主动轮询</li><li>设备中断</li></ul></li></ul></li><li>轮询<ul><li>I/O 设备在特定的<strong>状态寄存器</strong>中放置状态和错误信息</li><li>操作系统<strong>定期检测</strong>状态寄存器</li><li>特点<ul><li>简单</li><li>I/O 操作频繁或不可预测时，开销大和延时长</li></ul></li></ul></li><li>设备中断<ul><li>设备中断处理流程<ul><li>CPU 在 I/O 之前设置任务参数</li><li>CPU 发出 I/O 请求后，继续执行其他任务</li><li>I/O 设备处理 I/O 请求</li><li>I/O 设备处理完成时，触发 CPU 中断请求</li><li>CPU 接收中断，分发到相应中断处理例程</li></ul></li><li>特点<ul><li>处理不可预测事件效果好</li><li>开销相对较高</li></ul></li><li>一些设备可能结合了轮询和设备中断<ul><li>如：高宽带网络设备<ul><li>第一个传入数据包到达前采用中断</li><li>轮询后面的数据包直到硬件缓存为空</li></ul></li></ul></li><li>设备中断 I/O 处理流程<br><img src="http://qnya.pomo16.club/144.png" alt><ul><li>第6步CPU 恢复被中断进程的执行后可能又会调用另一个 I/O 然后又回到第1步</li></ul></li></ul></li></ul><h3 id="磁盘调度"><a href="#磁盘调度" class="headerlink" title="磁盘调度"></a>磁盘调度</h3><ul><li>磁盘工作机制和性能参数<ul><li>读取或写入时，磁头必须被定位在<strong>期望的磁道</strong>，并从所<strong>期望的柱面和扇区</strong>开始<br><img src="http://qnya.pomo16.club/145.png" alt></li><li>寻道时间：定位到期望的磁道所花费的时间</li><li>旋转延迟：从零扇区开始处到达目的地花费的时间</li><li><strong>平均旋转延迟时间 = 磁盘旋转一周时间的一半</strong></li></ul></li><li>磁盘 I/O 传输时间<br><img src="http://qnya.pomo16.club/146.png" alt><ul><li>T<sub>a</sub> ：访问时间</li><li>T<sub>s</sub> ：寻道时间</li><li>1/2r ：旋转延迟，1/r = 旋转一周的时间</li><li>b/rN：传输时间，b = 传输的比特数；N = 磁道上的比特数；r = 磁盘转速</li></ul></li><li>磁盘调度算法<ul><li>通过优化磁盘访问请求顺序来提高磁盘访问性能<ul><li>寻道时间是磁盘访问最耗时的部分</li><li>同时会有多个在同一磁盘上的 I/O 请求</li><li>随机处理磁盘访问请求的性能表现很差</li></ul></li><li>先进先出( FIFO )算法<ul><li>按顺序处理请求</li><li>公平对待所有进程</li><li>在有很多进程的情况下，接近随机调度的性能</li><li>示例<br><img src="http://qnya.pomo16.club/147.png" alt></li></ul></li><li>最短服务时间优先( SSTF )<ul><li>选择从磁臂当前位置需要移动最少的 I/O 请求</li><li>总是选择最短寻道时间</li><li>示例<br><img src="http://qnya.pomo16.club/148.png" alt></li></ul></li><li>扫描算法( SCAN )<ul><li>磁臂在一个方向上移动，访问所有未完成的请求，直到磁臂到达该方向上最后的磁道</li><li>调换方向</li><li>也称为电梯算法( elevator algorithm )</li><li>示例<br><img src="http://qnya.pomo16.club/149.png" alt></li></ul></li><li>循环扫描算法( C - SCAN )<ul><li>限制了仅在一个方向上扫描</li><li>当最后一个磁道也被访问过了后，磁臂返回到磁盘的另外一端再次进行</li></ul></li><li>C - LOOK 算法<ul><li>磁臂先到达该方向上最后一个请求处，然后立即反转，而不是先到最后点路径上的所有请求</li></ul></li><li>N 步扫描( N - step - SCAN )算法<ul><li>磁头粘着( Arm Stickiness )现象<ul><li>SSTF，SCAN 及 CSCAN 等算法中，可能出现磁头停留在某处不动的情况</li><li>如：进程反复请求对某一磁道的 I/O 操作</li></ul></li><li>N 步扫描算法<ul><li>将磁盘请求队列分成长度为 N 的子队列</li><li>按 FIFO 算法依次处理所有子队列</li><li>扫描算法处理每个队列</li></ul></li></ul></li><li>双队列扫描( FSCAN )算法<ul><li>FSCAN 算法是 N 步扫描算法的简化<ul><li>FSCAN 只将磁盘请求队列分成两个子队列</li></ul></li><li>FSCAN 算法<ul><li>把磁盘 I/O 请求分成两个队列</li><li>交替使用扫描算法处理一个队列</li><li>新生成的磁盘 I/O 请求放入另一队列中，所有的新请求都将被推迟到下一次扫描的处理</li></ul></li></ul></li></ul></li></ul><h3 id="磁盘缓存"><a href="#磁盘缓存" class="headerlink" title="磁盘缓存"></a>磁盘缓存</h3><ul><li>缓存：数据传输双方访问速度差异较大时，引入的速度匹配中间层</li><li>磁盘缓存是磁盘扇区在内存中的缓存区<ul><li>磁盘缓存的调度算法很类似虚拟存储调度算法</li><li>磁盘的访问频率远低于虚拟存储中的内存访问频率</li><li>通常磁盘缓存调度算法会比虚拟存储复杂</li></ul></li><li>单缓存与双缓存<br><img src="http://qnya.pomo16.club/150.png" alt></li><li>访问频率置换算法( Frequency-based Replacement )<ul><li>问题：在一段密集磁盘访问后，LFU 算法的引用计数变化无法反映当前的引用情况</li><li>算法思路<ul><li>考虑磁盘访问的密集特征，对密集引用不计数</li><li>在短周期中使用 LRU 算法，而在长周期中使用 LFU 算法</li></ul></li><li>具体做法<br><img src="http://qnya.pomo16.club/151.png" alt><ul><li>把 LRU 算法中的特殊栈分成三部分，并在每个缓存块增加一个引用计数<ul><li>新区域( New Section )</li><li>中间区域( Middle Section )</li><li>旧区域( Old Section )</li></ul></li><li>栈中缓存块被访问时移到栈顶；如果该块在新区域，引用计数不变；否则，引用计数加1<ul><li>在新区域中引用计数不变的目的是避免密集访问对引用计数不利影响</li><li>在中间区域和旧区域中引用计数加1是为了使用 LFU 算法</li></ul></li><li>未缓存数据块读入后放在栈顶，引用计数为1</li><li>在旧区域中引用计数最小的缓存块被置换<ul><li>中间区域的定义是为了避免新读入的缓存块在第一次出新区域时马上被置换掉，有一个过渡期</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统（六）</title>
      <link href="/2019/03/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2019/03/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="信号量与管程"><a href="#信号量与管程" class="headerlink" title="信号量与管程"></a>信号量与管程</h2><h3 id="信号量-semaphore"><a href="#信号量-semaphore" class="headerlink" title="信号量( semaphore )"></a>信号量( semaphore )</h3><p><img src="http://qnya.pomo16.club/84.png" alt></p><ul><li>信号量是操作系统提供的一种协调共享资源访问的方法<ul><li>软件同步是平等线程间的一种同步协商机制</li><li>信号量是和锁同级的一种实现同步的高级抽象方法</li><li>OS 是管理者，地位高于进程</li><li>用信号量表示系统资源的数量</li></ul></li><li><p>早期的操作系统的主要同步机制</p><ul><li>现在很少用(但还是非常重要在计算机科学研究)</li></ul></li><li>信号量是一种抽象数据类型<ul><li>由一个整形( sem )变量和两个原子操作组成</li><li>P() ( Prolaag (荷兰语：尝试减少))<ul><li>sem 减1</li><li>如 sem &lt; 0，进入等待，否则继续</li></ul></li><li>V() ( Verhoog (荷兰语：增加))<ul><li>sem 加1</li><li>如 sem &lt;= 0，唤醒一个等待进程</li></ul></li></ul></li><li>信号量的特征<ul><li>信号量是<strong>被保护</strong>的<strong>整数</strong>变量<ul><li>初始化完成后，只能通过 P() 和 V() 操作修改</li><li>由操作系统保证，PV 操作是原子操作</li></ul></li><li>P() 可能阻塞，V() 不会阻塞</li><li>通常假定信号量是”公平的”<ul><li>线程不会被无限期阻塞在 P() 操作</li><li>假定信号量等待按先进先出排队</li></ul></li></ul></li><li>信号量的实现<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">classSemaphore &#123;</span><br><span class="line">  <span class="keyword">int</span> sem;</span><br><span class="line">  WaitQueue q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Semaphore::P() &#123;</span><br><span class="line">  sem --;</span><br><span class="line">  <span class="keyword">if</span> (sem &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    Add <span class="keyword">this</span> thread t to q;</span><br><span class="line">    block(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Semaphore::V() &#123;</span><br><span class="line">  sem ++;</span><br><span class="line">  <span class="keyword">if</span> (sem &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    Remove a thread t from q;</span><br><span class="line">    wakeup(t);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="信号量使用"><a href="#信号量使用" class="headerlink" title="信号量使用"></a>信号量使用</h3><ul><li>信号量分类：可分为两种信号量<ul><li><strong>二进制信号量</strong>：资源数目为0或1</li><li><strong>资源信号量</strong>：资源数目为任何非负值</li><li>两者等价：基于一个可以实现另一个</li></ul></li><li>信号量的使用<ul><li>互斥访问：临界区的互斥访问控制</li><li>条件同步：线程间的事件等待</li></ul></li><li><p>用信号量实现临界区的互斥访问</p><ul><li><p>每类资源设置一个信号量，其初值为1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mutex = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mutex-&gt;P();</span><br><span class="line">Critical Section;</span><br><span class="line">mutex-&gt;V();</span><br></pre></td></tr></table></figure></li><li><p>必须<strong>成对使用</strong> P() 操作和 V() 操作</p><ul><li>P() 操作保证互斥访问临界资源</li><li>V() 操作在使用后释放临界资源</li><li>PV 操作不能次序错误、重复或遗漏</li></ul></li></ul></li><li><p>用信号量实现条件同步</p><ul><li><p>每个条件同步设置一个信号量，其初值为0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">condition = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><img src="http://qnya.pomo16.club/85.png" alt></p></li></ul></li></ul><h3 id="生产者-消费者问题"><a href="#生产者-消费者问题" class="headerlink" title="生产者-消费者问题"></a>生产者-消费者问题</h3><p><img src="http://qnya.pomo16.club/86.png" alt></p><ul><li>有界缓冲区的生产者-消费者问题描述<ul><li>一个或多个<strong>生产者</strong>在生成数据后放在一个缓冲区里</li><li>单个<strong>消费者</strong>从缓冲区取出数据处理</li><li>任何时刻<strong>只能有一个</strong>生产者或消费者可访问缓冲区</li></ul></li><li><p>用信号量解决生产者-消费者问题</p><ul><li>问题分析<ul><li>任何时刻只能有一个线程操作缓存区(互斥访问)</li><li>缓冲区空时，消费者必须等待生产者(条件同步)</li><li>缓冲区满时，生产和必须等待消费者(条件同步)</li></ul></li><li>用信号量描述每个约束<ul><li>二进制信号量 mutex</li><li>资源信号量 fullBuffers</li><li>资源信号量 emptyBuffers</li></ul></li><li><p>实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">Class BoundedBuffer &#123;</span><br><span class="line">  mutex = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line">  fullBuffers = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line">  emptyBuffers = <span class="keyword">new</span> Semaphore(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line">BoundedBuffer::Deposit(c) &#123;</span><br><span class="line">  emptyBuffers-&gt;P();</span><br><span class="line">  mutex-&gt;P();</span><br><span class="line">  Add c to the buffer;</span><br><span class="line">  mutex-&gt;V();</span><br><span class="line">  fullBuffers-&gt;V();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line">BoundedBuffer::Remove(c) &#123;</span><br><span class="line">  fullBuffers-&gt;P();</span><br><span class="line">  mutex-&gt;P();</span><br><span class="line">  Remove c from the buffer;</span><br><span class="line">  mutex-&gt;V();</span><br><span class="line">  emptyBuffers-&gt;V();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果 P、V 操作顺序有误，会造成死锁</li></ul></li></ul></li><li>使用信号量的困难<ul><li>读/开发代码比较困难<ul><li>程序员需要能运用信号量机制</li></ul></li><li>容易出错<ul><li>使用的信号量已经被另一个线程占用</li><li>忘记释放信号量</li></ul></li><li>不能够处理死锁问题</li></ul></li></ul><h3 id="管程-Moniter"><a href="#管程-Moniter" class="headerlink" title="管程( Moniter )"></a>管程( Moniter )</h3><p><img src="http://qnya.pomo16.club/87.png" alt></p><ul><li>管程是一种用于多线程互斥访问共享资源的程序结构<ul><li>采用面向对象方法，简化了线程间的同步控制</li><li>任一时刻最多只有一个线程执行管程代码</li><li>正在管程中的线程可临时放弃管程的互斥访问，等待事件出现时恢复</li></ul></li><li>管程的使用<ul><li>在对象/模块中，收集相关共享数据</li><li>定义访问共享数据的方法</li></ul></li><li>管程的组成<br><img src="http://qnya.pomo16.club/88.png" alt><ul><li>一个锁<ul><li>控制管程代码的互斥访问</li></ul></li><li>0 或者多个条件变量<ul><li>管理共享数据的并发访问</li></ul></li></ul></li><li><p>条件变量( Condition Variable )</p><ul><li>条件变量是管程内的等待机制<ul><li>进入管程的线程因资源被占用而进入等待状态</li><li>每个条件变量表示一种等待原因，对应一个等待队列</li></ul></li><li>Wait() 操作<ul><li>将自己阻塞在等待队列中</li><li>唤醒一个等待者或释放管程的互斥访问</li></ul></li><li>Signal() 操作<ul><li>将等待队列中的一个线程唤醒</li><li>如果等待队列为空，则等同空操作</li></ul></li><li>条件变量的实现<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Class Condition &#123;</span><br><span class="line">  <span class="keyword">int</span> numWaiting = <span class="number">0</span>;</span><br><span class="line">  WaitQueue q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Condition::Wait(lock) &#123;</span><br><span class="line">  numWaiting++;</span><br><span class="line">  Add <span class="keyword">this</span> thread t to q;</span><br><span class="line">  release(lock)；</span><br><span class="line">  schedule();<span class="comment">// need mutex</span></span><br><span class="line">  require(lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Condition::Signal() &#123;</span><br><span class="line">  <span class="keyword">if</span> (numWaiting &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    Remove a thread t from q;</span><br><span class="line">    wakeup(t);<span class="comment">//need mutex</span></span><br><span class="line">    numWaiting--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>用管程解决生产者-消费者问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">classBoundedBuffer &#123;</span><br><span class="line">  ...</span><br><span class="line">  Lock lock;</span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">  Condition notFull, notEmpty;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line">BoundedBuffer::Deposit(c) &#123;</span><br><span class="line">  lock-&gt;Acquire();</span><br><span class="line">  <span class="keyword">while</span> (count == n)</span><br><span class="line">  notFull.Wait(&amp;lock);</span><br><span class="line">  Add c to the buffer;</span><br><span class="line">  count++;</span><br><span class="line">  notEmpty.Signal();</span><br><span class="line">  lock-&gt;Release();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line">BoundedBuffer::Remove(c) &#123;</span><br><span class="line">  lock-&gt;Acquire();</span><br><span class="line">  <span class="keyword">while</span> (count == <span class="number">0</span>)</span><br><span class="line">  notEmpty.Wait(&amp;lock);</span><br><span class="line">  Remove c from the buffer;</span><br><span class="line">  count--;</span><br><span class="line">  notFull.Signal();</span><br><span class="line">  lock-&gt;Release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>管程条件变量的释放处理方式<br><img src="http://qnya.pomo16.club/89.png" alt></p><ul><li>Hansen 的连续执行效率更高，如图少了一次切换</li><li>Hansen 管程：主要用于真实 OS 和 Java 中</li><li>Hoare 管程：主要见于教材中</li><li>Hansen 管程与 Hoare 管程<ul><li>以生产者-消费者问题的生产者代码为例<br><img src="http://qnya.pomo16.club/90.png" alt><ul><li>Hansen 管程<ul><li>条件变量释放仅是一个提示</li><li>需要重新检查条件</li><li>特点：高效</li></ul></li><li>Hoare 管程<ul><li>条件变量释放同时表示放弃管程访问</li><li>释放后条件变量的状态可用</li><li>特点：低效</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="经典同步问题之哲学家就餐问题"><a href="#经典同步问题之哲学家就餐问题" class="headerlink" title="经典同步问题之哲学家就餐问题"></a>经典同步问题之哲学家就餐问题</h3><p><img src="http://qnya.pomo16.club/91.png" alt></p><ul><li>问题描述<ul><li>5个哲学家围绕一张圆桌而坐<ul><li>桌子上放着5支叉子</li><li>每两个哲学家之间放一支</li></ul></li><li>哲学家的动作包括思考和进餐<ul><li>进餐时需同时拿到左右两边的叉子</li><li>思考时将两支叉子放回原处</li></ul></li><li>如何保证哲学家们的动作有序进行？<ul><li>如：不出现有人永远拿不到叉子</li></ul></li></ul></li><li>方案一<br><img src="http://qnya.pomo16.club/92.png" alt><ul><li>不正确，可能导致死锁</li></ul></li><li>方案二<br><img src="http://qnya.pomo16.club/93.png" alt><ul><li>互斥访问正确，但每次只允许一人进餐</li></ul></li><li>方案三<br><img src="http://qnya.pomo16.club/94.png" alt><ul><li>没有死锁，可有多人同时进餐</li></ul></li></ul><h3 id="经典同步问题之读者-写者问题"><a href="#经典同步问题之读者-写者问题" class="headerlink" title="经典同步问题之读者-写者问题"></a>经典同步问题之读者-写者问题</h3><ul><li>问题描述<ul><li>共享数据的两类使用者<ul><li>读者：只读取数据，不修改</li><li>写者：读取和修改数据</li></ul></li><li>读者-写者问题描述：对共享数据的读写<ul><li>“读 - 读”允许<ul><li>同一时刻，允许有多个读者同时读</li></ul></li><li>“读 - 写”互斥<ul><li>没有写者时读者才能读</li><li>没有读者时写者才能写</li></ul></li><li>“写 - 写”互斥<ul><li>没有其他写者时写者才能写</li></ul></li></ul></li></ul></li><li>用信号量解决读者-写者问题<ul><li>用信号量描述每个约束<ul><li>信号量 WriteMutex<ul><li>控制读写操作的互斥</li><li>初始化为1</li></ul></li><li>读者技术 Rcount<ul><li>正在进行读操作的读者数目</li><li>初始化为0</li></ul></li><li>信号量 CountMutex<ul><li>控制对读者计数的互斥修改</li><li>初始化为1</li></ul></li></ul></li><li><img src="http://qnya.pomo16.club/95.png" alt><ul><li>此实现中，读者优先</li></ul></li></ul></li><li>读者-写者问题：优先策略<ul><li>读者优先策略<ul><li>只要有读者正在读状态，后来的读者都能直接进入</li><li>如读者持续不断进入，则写者就处于饥饿</li></ul></li><li>写者优先策略<ul><li>只要有写者就绪，写者应尽快执行写操作</li><li>如写者持续不断就绪，则读者就处于饥饿</li></ul></li></ul></li><li><p>用管程解决读者-写者问题</p><ul><li><p>两个基本方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Database::Read() &#123;</span><br><span class="line">  Wait until no writer;</span><br><span class="line">  read database;</span><br><span class="line">  check out - wake up waiting writers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Database::Write() &#123;</span><br><span class="line">  Wait until no readers/writers;</span><br><span class="line">  write database;</span><br><span class="line">  check out - wake up waiting readers/writers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>管程的状态变量<br><img src="http://qnya.pomo16.club/96.png" alt></p></li><li>解决方案详情：读者<br><img src="http://qnya.pomo16.club/97.png" alt><ul><li>这里 while() 里的条件设置的是有写者在写或有写者申请写就等待，体现的是写者优先</li><li>这里 if() 里的条件设置的是最后一个读者看有没有写者，如果有写者等着，就释放</li></ul></li><li>解决方案详情：写者<br><img src="http://qnya.pomo16.club/98.png" alt><ul><li>这里 while() 里的条件设置的是有写者在写或有读者在读就等待，但是如果继续有读者等着就不管了，所以体现的是写者优先</li><li>这里 if() 里的条件设置的是如果有等待写的就优先唤醒，没有的话才唤醒读者</li></ul></li></ul></li></ul><h2 id="死锁和进程通信"><a href="#死锁和进程通信" class="headerlink" title="死锁和进程通信"></a>死锁和进程通信</h2><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul><li>定义：由于竞争资源或者通信关系，两个或更多线程在执行中出现，永远相互等待只能由其他进程引发的事件</li><li>死锁示例：单向通行桥梁<br><img src="http://qnya.pomo16.club/99.png" alt><ul><li>桥梁只能单向通行</li><li>桥的每个部分可视为一个资源</li><li>可能出现死锁<ul><li>对向行驶车辆在桥中相遇</li><li>解决办法：一个方向的车辆倒退(资源抢占和回退)</li></ul></li><li>可能发生饥饿<ul><li>由于一个方向的持续车流，另一个方向的车辆无法通过桥梁</li></ul></li></ul></li></ul><h3 id="进程访问资源的流程"><a href="#进程访问资源的流程" class="headerlink" title="进程访问资源的流程"></a>进程访问资源的流程</h3><ul><li>资源类型 R1，R2，…，Rm<ul><li>CPU 执行时间、内存空间、I/O 设备等</li></ul></li><li>每类资源 Ri 有 Wi 个实例</li><li>进程访问资源的流程<ul><li>请求/获取：申请空闲资源</li><li>使用/占用：进程占用资源</li><li>释放：资源状态由占有变成空闲</li></ul></li></ul><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><ul><li><p>资源分类</p><ul><li>可重用资源( Reusable Resource )<ul><li>资源不能被删除且在任何时刻只能有一个进程使用</li><li>进程释放资源后，其他进程可重用</li><li>可重用资源示例<ul><li>硬件：处理器，I/O 通道，主和副存储器，设备等</li><li>软件：文件，数据库和信号量等数据结构</li></ul></li><li>可能出现死锁<ul><li>每个进程占用一部分资源并请求其他资源</li></ul></li></ul></li><li>消耗资源( Consumable Resource )<ul><li>资源创建和销毁</li><li>消耗资源示例<ul><li>在 I/O 缓冲区的中断、信号、消息等</li></ul></li><li>可能出现死锁<ul><li>进程间相互等待接受对方的消息</li></ul></li></ul></li></ul></li><li><p>资源分配图</p><ul><li><strong>描述资源和进程间的分配和占用关系的有向图</strong></li><li><img src="http://qnya.pomo16.club/100.png" height="400px"></li><li>两类顶点<ul><li>系统中的所有进程<br>P = {P<sub>1</sub>，P<sub>2</sub>，…，P<sub>n</sub>}</li><li>系统中的所有资源<br>R = {R<sub>1</sub>，R<sub>2</sub>，…，R<sub>m</sub>}</li></ul></li><li>两类有向边<ul><li>资源请求边<ul><li>进程 P<sub>i</sub> 请求资源 R<sub>j</sub> ：P<sub>i</sub> -&gt; R<sub>j</sub> </li></ul></li><li>资源分配边<ul><li>资源 R<sub>j</sub> 已分配给进程 P<sub>i</sub> ：R<sub>j</sub> -&gt; P<sub>i</sub></li></ul></li></ul></li></ul></li></ul><h3 id="出现死锁的必要条件"><a href="#出现死锁的必要条件" class="headerlink" title="出现死锁的必要条件"></a>出现死锁的必要条件</h3><ul><li>互斥<ul><li>任何时刻只能有一个进程使用一个资源实例</li></ul></li><li>持有并等待<ul><li>进程保持至少一个资源，并正在等待获取其他进程持有的资源</li></ul></li><li>非抢占<ul><li>资源只能在进程使用后自愿释放</li></ul></li><li>循环等待<ul><li>存在等待进程集合{P<sub>0</sub>，P<sub>1</sub>，…，P<sub>N</sub>}，<br>P<sub>0</sub> 正在等待 P<sub>1</sub> 所占用的资源，<br>P<sub>1</sub> 正在等待 P<sub>2</sub> 所占用的资源，…，<br>P<sub>N-1</sub> 正在等待 P<sub>N</sub> 所占用的资源，<br>P<sub>N</sub> 正在等待 P<sub>0</sub> 所占用的资源</li></ul></li><li>现学现用<br><img src="http://qnya.pomo16.club/101.png" alt></li></ul><h3 id="死锁处理方法"><a href="#死锁处理方法" class="headerlink" title="死锁处理方法"></a>死锁处理方法</h3><ul><li>死锁预防( Deadlock Prevention )：确保系统永远不会进入死锁状态</li><li>死锁避免( Deadlock Avoidance )：在使用前进行判断，只允许不会出现死锁的进程请求资源</li><li>死锁检测和恢复( Deadlock Detection &amp; Recovery )：在检测到运行系统进入死锁状态后，进行恢复</li><li>由应用进程处理死锁<ul><li>通常操作系统忽略死锁：大多数操作系统(包括 UNIX )的做法</li></ul></li></ul><h3 id="死锁预防"><a href="#死锁预防" class="headerlink" title="死锁预防"></a>死锁预防</h3><ul><li>预防是采用某种策略，<strong>限制</strong>并发进程对资源的请求，使系统在任何时刻都<strong>不满足死锁的必要条件</strong></li><li>互斥：把互斥的共享资源封装成可同时访问</li><li>持有并等待<ul><li>进程请求资源时，要求它不持有任何其他资源</li><li>仅允许进程在开始执行时，一次请求所有需要的资源</li><li>资源利用率低</li></ul></li><li>非抢占<ul><li>如进程请求不能立即分配的资源，则释放已占用资源</li><li>只在能够同时获得所有需要资源时，才执行分配操作</li></ul></li><li>循环等待<ul><li>对资源排序，要求进程按顺序请求资源</li></ul></li></ul><h3 id="死锁避免"><a href="#死锁避免" class="headerlink" title="死锁避免"></a>死锁避免</h3><ul><li>方法一：利用额外的先验信息，在分配资源时判断是否会出现死锁，只在不会死锁时分配资源<ul><li>要求进程声明需要资源的<strong>最大数目</strong></li><li>限定<strong>提供</strong>与<strong>分配</strong>的资源数量，确保满足进程的<strong>最大</strong>需求</li><li><strong>动态检查</strong>资源分配状态，确保不会出现环形等待</li></ul></li><li>方法二：当进程请求资源时，系统判断分配后是否处于安全状态<ul><li>系统处于安全状态<ul><li>针对所有已占用进程，存在安全序列</li></ul></li><li>序列 &lt;P<sub>1</sub>，P<sub>2</sub>，…，P<sub>N</sub>&gt; 是安全的<ul><li>P<sub>i</sub> 要求的资源 &lt;= 当前可用资源 + 所有 P<sub>j</sub> 持有资源其中 j &lt; i</li><li>如 P<sub>i</sub> 的资源请求不能立即分配，则 P<sub>i</sub> 等待所有 P<sub>j</sub> ( j &lt; i )完成</li><li>P<sub>i</sub> 完成后，P<sub>i</sub> + 1可得到所需资源，执行并释放所分配的资源</li><li>最终整个序列的所有  P<sub>i</sub> 都能获得所需资源</li></ul></li><li>安全状态与死锁的关系<ul><li><img src="http://qnya.pomo16.club/102.png" height="400px"></li><li>系统处于安全状态，一定没有死锁</li><li>系统处于不安全状态，可能出现死锁<ul><li>避免死锁就是确保系统不会进入不安全状态</li></ul></li></ul></li></ul></li></ul><h3 id="银行家算法-Banker’s-Algorithm"><a href="#银行家算法-Banker’s-Algorithm" class="headerlink" title="银行家算法( Banker’s Algorithm )"></a>银行家算法( Banker’s Algorithm )</h3><ul><li>银行家算法是一个避免死锁产生的算法。以银行借贷分配策略为基础，判断并保证系统处于安全状态<ul><li>客户在第一次申请贷款时，声明所需最大资金量，在满足所有贷款要求并完成项目时，及时归还</li><li>在客户贷款数量不超过银行拥有的最大值时，银行家尽量满足客户需求</li><li>类比<ul><li>银行家 ↔ 操作系统</li><li>资金 ↔ 资源</li><li>客户 ↔ 申请资源的线程</li></ul></li></ul></li><li>银行家算法：数据结构<ul><li>n = 线程数量，m = 资源类型数量</li><li>Max (总需求量)：n * m 矩阵<ul><li>线程 T<sub>i</sub> 最多请求类型 R<sub>j</sub> 的资源 Max[i, j] 个实例</li></ul></li><li>Available (剩余空闲量)：长度为 m 的向量<ul><li>当前有 Available[i] 个类型  R<sub>j</sub> 的资源实例可用</li></ul></li><li>Allocation (已分配量)：n * m 矩阵<ul><li>线程 T<sub>i</sub> 当前分配了Allocation[i, j] 个 R<sub>j</sub> 的实例</li></ul></li><li>Need (未来需要量)：n * m 矩阵<ul><li>线程 T<sub>i</sub> 未来需要 Need[i, j] 个 R<sub>j</sub> 资源实例</li></ul></li><li><strong>Need[i, j] = Max[i, j] - Allocation[i, j]</strong></li></ul></li><li><p>银行家算法核心：安全状态判断</p><ol><li><p><strong>Work</strong> 和 <strong>Finish</strong> 分别是长度为 m 和 n 的向量初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Work = Available<span class="comment">//当前资源剩余空闲量</span></span><br><span class="line">Finish[i] = <span class="literal">false</span> <span class="keyword">for</span> i : <span class="number">1</span>,<span class="number">2</span>, …, n.<span class="comment">//线程 i 没结束</span></span><br></pre></td></tr></table></figure></li><li><p>寻找线程 T<sub>i</sub> 满足</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Finish[i] = <span class="literal">false</span><span class="comment">//接下来找出 Need 比 Work 小的线程 i</span></span><br><span class="line">Need[i] &lt;= Work</span><br></pre></td></tr></table></figure><p>没有找到满足条件的 T<sub>i</sub>  ，转4</p></li><li><p>改成 true 表示线程结束</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Work = Work + Allocation[i]<span class="comment">//线程 i 的资源需求量小于当前剩余空闲资源量，所以配置给它再回收</span></span><br><span class="line">Finish[i] = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>转2</p></li><li>如所有线程 T<sub>i</sub> 满足 Finish[i] == true，则系统处于安全状态</li></ol></li><li><p>银行家算法</p><ul><li>初始化<ul><li>Request<sub>i</sub> 线程 T<sub>i</sub> 的资源请求向量</li><li>Request<sub>i</sub>[j] 线程 T<sub>i</sub> 请求资源 R<sub>j</sub> 的实例</li></ul></li><li><p>循环</p><ol><li>如果 Request<sub>i</sub> &lt;= Need[i]，转到步骤2。否则，拒绝资源申请，因为线程已经超过了其最大要求</li><li>如果  Request<sub>i</sub> &lt;= Available，转到步骤3。否则，T<sub>i</sub> 必须等待，因为资源不可用</li><li><p>通过安全状态判断来确定是否分配资源给 T<sub>i</sub> ：</p><ul><li>生成一个需要判断状态是否安全的资源分配环境<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Available = Available - Requesti;</span><br><span class="line">Allocation[i] = Allocation[i] + Requesti;</span><br><span class="line">Need[i] = Need[i] - Requesti;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>调用安全状态判断</p><ul><li>如果返回结果是<strong>安全</strong>，将资源分配给 T<sub>i</sub> </li><li>如果返回结果是<strong>不安全</strong>，系统会拒绝 T<sub>i</sub> 的资源请求</li></ul></li></ol></li></ul></li></ul><h3 id="死锁检测和恢复"><a href="#死锁检测和恢复" class="headerlink" title="死锁检测和恢复"></a>死锁检测和恢复</h3><ul><li>死锁检测简述<ul><li>允许系统进入死锁状态</li><li>维护系统的资源分配图</li><li>定期调用死锁检测算法来搜索图中是否存在死锁</li><li>出现死锁时，用死锁恢复机制进行恢复</li></ul></li><li>死锁检测算法：数据结构<ul><li>Available：长度为 m 的向量<ul><li>每种类型可用资源的数量</li></ul></li><li>Allocation：一个 n * m 矩阵<ul><li>当前分配给各个进程每种类型资源的数量</li><li>进程 P<sub>i</sub> 拥有资源 R<sub>i</sub> 的 Allocation[i, j] 个实例</li></ul></li></ul></li><li>死锁检测算法<ol><li><strong>Work</strong> 和 <strong>Finish</strong> 分别是长度为 m 和 n 的向量初始化<ul><li>Work = Available    //work 为当前空闲资源量</li><li>Allocation[i] &gt; 0 时，Finish[i] = false; 否则，Finish[i] = true;    //finish 为线程是否结束</li></ul></li><li>寻找线程 T<sub>i</sub>  满足<ul><li>Finish[i] = false    //线程没有结束，且此线程将需要的资源量小于当前空闲资源量</li><li>Request<sub>i</sub> &lt;= Work<br>没有找到这样的 i ，转到4</li></ul></li><li>Work = Work + Allocation[i]    //把找到的线程拥有的资源释放到当前空闲资源中<br>Finish[i] = true<br>转到2</li><li>如果某个 Finish[i] == false，系统处于死锁状态<br><strong>算法需要O(m*n<sup>2</sup>)操作检测系统是否处于死锁状态</strong></li></ol></li><li>死锁检测算法的使用<ul><li>死锁检测的时间和周期选择依据<ul><li>死锁多久可能会发生</li><li>多少进程需要被回滚</li></ul></li><li>资源图可能有多个循环<ul><li>难以分辨”造成”死锁的关键进程</li></ul></li></ul></li><li>死锁恢复：进程终止<ul><li>终止所有的死锁进程</li><li>一次只终止一个进程直到死锁清除</li><li>终止进程的顺序应该是<ul><li>进程的优先级</li><li>进程已运行时间以及还需运行时间</li><li>进程已占用资源</li><li>进程完成需要的资源</li><li>终止进程数目</li><li>进程是交互还是批处理</li></ul></li></ul></li><li>死锁恢复：资源抢占<ul><li>选择被抢占进程<ul><li>最小成本目标</li></ul></li><li>进程回退<ul><li>返回到一些安全状态，重启进程到安全状态</li></ul></li><li>可能出现饥饿<ul><li>同一进程可能一直被选作被抢占者</li></ul></li></ul></li></ul><h3 id="进程通信-IPC，Inter-Process-Communication"><a href="#进程通信-IPC，Inter-Process-Communication" class="headerlink" title="进程通信( IPC，Inter-Process Communication )"></a>进程通信( IPC，Inter-Process Communication )</h3><ul><li>进程通信是进程进行通信和同步的机制</li><li>IPC 提供2个基本操作<ul><li>发送操作：send(message)</li><li>接收操作：receive(message)</li></ul></li><li>进程通信流程<ul><li>在通信进程间建立通信链路</li><li>通过 send/receive 交换信息</li></ul></li><li>进程链路特征<ul><li>物理(如：共享内存，硬件总线)</li><li>逻辑(如：逻辑属性)</li></ul></li><li>通信方式<br><img src="http://qnya.pomo16.club/103.png" alt><ul><li>直接通信<ul><li>进程必须正确的命名对方<ul><li>send(P, message)：发送信息到进程 P</li><li>receive(Q, message)：从进程 Q 接受消息</li></ul></li><li>通信链路的属性<ul><li>自动建立链路</li><li>一条链路恰好对应一对通信进程</li><li>每对进程之间只有一个链接存在</li><li>链接可以是单向的，但通常为双向的</li></ul></li></ul></li><li>间接通信<ul><li>通过操作系统维护的消息队列实现进程间的消息接收和发送<ul><li>每个消息队列都有一个唯一的标识</li><li>只有共享了相同消息队列的进程，才能够通信</li></ul></li><li>通信链路的属性<ul><li>只有共享了相同消息队列的进程，才建立连接</li><li>连接可以是单向或双向</li><li>消息队列可以与多个进程相关联</li><li>每对进程可以共享多个消息队列</li></ul></li><li>通信流程<ul><li>创建一个新的消息队列</li><li>通过消息队列发送和接收消息</li><li>销毁消息队列</li></ul></li><li>基本通信操作<ul><li>send(A, message)：发送消息到队列 A</li><li>receive(A, message)：从队列 A 接收消息</li></ul></li></ul></li></ul></li><li>阻塞与非阻塞通信<ul><li>进程通信可划分为阻塞(同步)或非阻塞(异步)</li><li>阻塞通信<ul><li>阻塞发送：发送者在发送消息后进入等待，直到接受者成功收到</li><li>阻塞接收：接收者在请求接收消息后进入等待，直到成功收到一个消息</li></ul></li><li>非阻塞通信<ul><li>非阻塞发送：发送者在消息发送后，可立即进行其他操作</li><li>非阻塞接收：没有消息发送时，接受者在请求接收消息后，接收不到任何消息</li></ul></li></ul></li><li>通信链路缓冲<ul><li>进程发送的消息在链路上可能有3种缓冲方式<ul><li>0容量：发送方必须等待接收方</li><li>有限容量：通信链路缓冲队列满时，发送方必须等待</li><li>无限容量：发送方不需要等待</li></ul></li></ul></li></ul><h3 id="信号-Signal"><a href="#信号-Signal" class="headerlink" title="信号( Signal )"></a>信号( Signal )</h3><ul><li>信号<ul><li>进程间的软件中断通知和处理机制</li><li>如：SIGKILL，SIGSTOP，SIGCONT等</li></ul></li><li>信号的接收处理<ul><li>捕获( Catch )：执行进程指定的信号处理函数被调用</li><li>忽略( Ignore )：执行操作系统指定的缺省操作<ul><li>例如：进程终止、进程挂起等</li></ul></li><li>屏蔽( Mask )：禁止进程接收和处理信号<ul><li>可能是暂时的(当处理同样类型的信号)</li></ul></li></ul></li><li>不足<ul><li>传送的信息量小，只有一个信号类型</li></ul></li><li>信号的实现<br><img src="http://qnya.pomo16.club/104.png" alt></li><li>信号使用示例<br><img src="http://qnya.pomo16.club/105.png" alt></li></ul><h3 id="管道-pipe"><a href="#管道-pipe" class="headerlink" title="管道( pipe )"></a>管道( pipe )</h3><ul><li>进程间基于内存文件的通信机制<ul><li>子进程从父进程继承文件描述符</li><li>缺省文件描述符：0 stdin，1 stdout，2 stderr</li></ul></li><li>进程不知道(或不关心！)的另一端<ul><li>可能从键盘、文件、程序读取</li><li>可能写入到终端、文件、程序</li></ul></li><li>与管道相关的系统调用<ul><li>读管道：read(fd, buffer, nbytes)<ul><li>scanf() 是基于它实现的</li></ul></li><li>写管道：write(fd, buffer, nbytes)<ul><li>printf() 是基于它实现的</li></ul></li><li>创建管道：pipe(rgfd)<ul><li>rgfd 是2个文件描述符组成的数组</li><li>rgfd[0] 是读文件描述符</li><li>rgfd[1] 是写文件描述符</li></ul></li></ul></li><li>管道示例<ul><li>% ls | more<br><img src="http://qnya.pomo16.club/106.png" alt><ul><li>shell<ol><li>创建管道</li><li>为 ls 创建一个进程，设置 stdout 为管道写端</li><li>为 more 创建一个进程，设置 stdin 为管道读端</li></ol></li></ul></li></ul></li></ul><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><ul><li>消息队列是由操作系统维护的以字节序列为基本单位的间接通信机制<ul><li>每个消息( Message )是一个字节序列</li><li>相同标识的消息组成按先进先出顺序组成一个消息队列( Message Queues )<br><img src="http://qnya.pomo16.club/107.png" alt></li></ul></li><li>消息队列的系统调用<ul><li>msgget ( key, flags )：获取消息队列标识</li><li>msgsnd ( QID, buf, size, flags )：发送消息</li><li>msgrcv ( QID, buf, size, type, flags )：接收消息</li><li>msgctl ( … )：消息队列控制</li></ul></li></ul><h3 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h3><ul><li>共享内存是把同一个物理内存区域同时映射到多个进程的内存地址空间的通信机制</li><li>进程<ul><li>每个进程都有私有内存地址空间</li><li>每个进程的内存地址空间需明确设置共享内存段</li></ul></li><li>线程<ul><li>同一进程中的线程总是共享相同的内存地址空间</li></ul></li><li>优点：快捷、方便地共享数据</li><li>不足：必须用额外的同步机制来协调数据访问</li><li>共享内存的实现<br><img src="http://qnya.pomo16.club/108.png" alt><ul><li>最快的方法</li><li>一个进程写另外一个进程立即可见</li><li>没有系统调用干预</li><li>没有数据复制</li><li>不提供同步：由程序员提供同步</li></ul></li><li>共享内存系统调用<ul><li>shmget ( key, size, flags )：创建共享段</li><li>shmat ( shmid, *shmaddr, flags )：把共享段映射到进程地址空间</li><li>shmdt ( *shmaddr )：取消共享段到进程地址空间的映射</li><li>shmctl ( … )：共享段控制</li><li>需要信号量等机制协调共享内存的访问冲突</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统（五）</title>
      <link href="/2019/03/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2019/03/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="处理机调度"><a href="#处理机调度" class="headerlink" title="处理机调度"></a>处理机调度</h2><h3 id="CPU-资源的时分复用"><a href="#CPU-资源的时分复用" class="headerlink" title="CPU 资源的时分复用"></a>CPU 资源的时分复用</h3><ul><li>进程切换：CPU 资源的当前占用者切换<ul><li>保存当前进程在 PCB 中的执行上下文(CPU状态)</li><li>恢复下一个进程的执行上下文</li></ul></li><li>处理及调度<ul><li>从就绪队列中<strong>挑选</strong>下一个占用 CPU 运行的<strong>进程</strong></li><li>从多个可用 CPU 中<strong>挑选</strong>就绪进程可使用的 CPU <strong>资源</strong></li></ul></li><li>调度程序：挑选就绪进程的内核函数<ul><li>调度策略：依据什么原则挑选进程/线程？</li><li>调度时机：什么时候进行调度？</li></ul></li></ul><h3 id="调度时机"><a href="#调度时机" class="headerlink" title="调度时机"></a>调度时机</h3><p>在进程/线程的生命周期中的什么时候进行调度？</p><ul><li>内核运行调度程序的条件<ul><li>进程从运行状态切换到等待状态</li><li>进程被终结了</li></ul></li><li>非抢占系统<ul><li>当前进程主动放弃 CPU 时</li></ul></li><li>可抢占系统<ul><li>中断请求被服务例程响应完成时</li><li>当前进程被抢占<ul><li>进程时间片用完</li><li>进程从等待切换到就绪</li></ul></li></ul></li></ul><h3 id="调度策略"><a href="#调度策略" class="headerlink" title="调度策略"></a>调度策略</h3><ul><li>调度策略：确定如何从就绪队列中选择下一个执行进程</li><li>调度策略要解决的问题<ul><li>挑选就绪队列中的哪一个进程？</li><li>通过什么样的准则来选择？</li></ul></li><li>调度算法：在调度程序中实现的调度策略</li><li>比较调度算法的准则：哪一个策略/算法较好？</li></ul><h3 id="处理机资源的使用模式"><a href="#处理机资源的使用模式" class="headerlink" title="处理机资源的使用模式"></a>处理机资源的使用模式</h3><ul><li>进程在 CPU 计算和 I/O 操作间交替<ul><li>每次调度决定在下一个 CPU 计算时将哪个工作交给 CPU</li><li>在时间片机制下，进程可能在结束当前 CPU 计算前被迫放弃 CPU</li></ul></li><li><img src="http://qnya.pomo16.club/69.png" alt></li></ul><h3 id="比较调度算法的准则"><a href="#比较调度算法的准则" class="headerlink" title="比较调度算法的准则"></a>比较调度算法的准则</h3><ul><li>CPU 使用率：CPU 处于忙状态的<strong>时间百分比</strong></li><li>吞吐量：单位时间内完成的<strong>进程数量</strong></li><li>周转时间：进程从初始化到结束(包括等待)的<strong>总时间</strong></li><li>等待时间：进程在就绪队列中的<strong>总时间</strong></li><li>响应时间：从提交请求到产生响应所花费的<strong>总时间</strong></li></ul><h3 id="处理机调度策略的响应时间目标"><a href="#处理机调度策略的响应时间目标" class="headerlink" title="处理机调度策略的响应时间目标"></a>处理机调度策略的响应时间目标</h3><ul><li>减少响应时间<ul><li>及时处理用户的输入请求，尽快将输出反馈给用户</li></ul></li><li>减少平均响应时间的波动<ul><li>在交互系统中，可预测性比高差异的平均更重要</li></ul></li><li>低延迟调度改善了用户的交互体验<ul><li>如果移动鼠标时，屏幕中的光标没动，用户可能会重启电脑</li></ul></li><li>响应时间是操作系统的计算延迟</li></ul><h3 id="处理机调度策略的吞吐量目标"><a href="#处理机调度策略的吞吐量目标" class="headerlink" title="处理机调度策略的吞吐量目标"></a>处理机调度策略的吞吐量目标</h3><ul><li>增加吞吐量<ul><li>减少开销(操作系统开销，上下文切换)</li><li>系统资源的高效利用( CPU，I/O 设备 )</li></ul></li><li>减少等待时间<ul><li>减少每个进程的等待时间</li></ul></li><li>操作系统需要保证吞吐量不受用户交互的影响<ul><li>操作系统必须不时进行调度，即使存在许多交互任务</li></ul></li><li>吞吐量是操作系统的计算带宽</li></ul><h3 id="处理机调度的公平性目标"><a href="#处理机调度的公平性目标" class="headerlink" title="处理机调度的公平性目标"></a>处理机调度的公平性目标</h3><ul><li>公平的定义<ul><li>保证每个进程占用相同的 CPU 时间</li><li>保证每个进程的等到时间相同</li></ul></li><li>公平通常会增加平均响应时间</li></ul><h3 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h3><ul><li>先来先服务算法<ul><li>FCFS：First Come，First Served</li></ul></li><li>短进程优先算法<ul><li>SPN：Shortest Process Next</li><li>SJF：Shortest Job First (短作业优先算法)</li><li>SRT：Shortest Remaining Time(短剩余时间优先算法)</li></ul></li><li>最高响应比优先算法<ul><li>HRRN：Highest Response Ratio Next</li></ul></li><li>时间片轮转算法<ul><li>RR：Round Robin</li></ul></li><li>多级反馈队列算法<ul><li>MFQ：Multilevel Feedback Queues</li></ul></li><li>公平共享调度算法<ul><li>FSS：Fair Share Scheduling</li></ul></li></ul><h3 id="先来先服务算法-First-Come-First-Served，FCFS"><a href="#先来先服务算法-First-Come-First-Served，FCFS" class="headerlink" title="先来先服务算法( First Come First Served，FCFS"></a>先来先服务算法( First Come First Served，FCFS</h3><ul><li>依据进程进入就绪状态的先后顺序排列<ul><li>进程进入等待或结束状态时，就绪队列中的下一个进程占用 CPU</li></ul></li><li>FCFS 算法的周转时间<ul><li>示例：3个进程，计算时间分别为12，3，3<br><img src="http://qnya.pomo16.club/70.png" alt></li></ul></li><li>FCFS 算法的特征<ul><li>优点：简单</li><li>缺点<ul><li>平均等待时间波动较大<ul><li>短进程可能排在长进程后面</li></ul></li><li>I/O 资源和 CPU 资源的利用率较低<ul><li>CPU 密集型进程会导致 I/O 设备闲置时 I/O 密集型进程也等待</li></ul></li></ul></li></ul></li></ul><h3 id="短进程优先算法-SPN"><a href="#短进程优先算法-SPN" class="headerlink" title="短进程优先算法( SPN )"></a>短进程优先算法( SPN )</h3><ul><li>选择就绪队列中执行时间最短进程占用 CPU 进入运行状态<ul><li>就绪队列按预期的执行时间来排序</li><li><img src="http://qnya.pomo16.club/71.png" alt></li></ul></li><li>短剩余时间优先算法( SRT )<ul><li>SPN 算法的可抢占改进</li></ul></li><li>短进程优先算法具有最优平均周转时间<ul><li>SPN 算法中一组进程的平均周转时间</li><li><img src="http://qnya.pomo16.club/72.png" alt><ul><li>修改顺序后平均等待时间更大</li></ul></li></ul></li><li>SPN 的特征<ul><li>优点：具有最优平均周转时间</li><li>缺点<ul><li>可能导致饥饿：连续的短进程流会使长进程无法获得 CPU 资源</li><li>需要预知未来<ul><li>如何预估下一个 CPU 计算的持续时间？</li><li>简单的解决办法：询问用户<ul><li>用户欺骗就杀死相应进程</li><li>用户不知道怎么办？</li></ul></li><li>SPN 的执行时间预估<ul><li>用历史的执行时间来预估未来的执行时间</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="最高响应比优先算法-HRRN"><a href="#最高响应比优先算法-HRRN" class="headerlink" title="最高响应比优先算法( HRRN )"></a>最高响应比优先算法( HRRN )</h3><ul><li>选择就绪队列中响应比 R 值最高的进程<ul><li>R = (w+s)/s</li><li>w：等待时间(waiting time)</li><li>s：执行时间(service time</li></ul></li><li>特征<ul><li>在短进程优先算法的基础上改进</li><li>不可抢占</li><li>关注进程的等待时间</li><li>防止无限期推迟</li></ul></li></ul><h3 id="时间片轮转算法-RR，Round-Robin"><a href="#时间片轮转算法-RR，Round-Robin" class="headerlink" title="时间片轮转算法(RR，Round-Robin)"></a>时间片轮转算法(RR，Round-Robin)</h3><ul><li>时间片：分配处理机资源的基本时间单元<br><img src="http://qnya.pomo16.club/73.png" alt></li><li>算法思路<ul><li>时间片结束后，按 FCFS 算法切换到下一个就绪进程</li><li>每隔 ( n - 1 ) 个时间片进程执行一个时间片 q</li></ul></li><li>时间片为20的 RR 算法示例<ul><li>4个进程的执行时间如下：<ul><li>P1：53；P2：8；P3：68；P4：24；</li></ul></li><li>甘特图<br><img src="http://qnya.pomo16.club/74.png" alt></li><li>等待时间<ul><li>P1 = ( 68 - 20 ) + ( 112 - 88 ) = 72</li><li>P2 = ( 20 - 0 ) = 20</li><li>P3 = ( 28 - 0 ) + ( 88 - 48 ) + ( 125 - 108 ) = 85</li><li>P4 = ( 48 - 0 ) + ( 108 - 68 ) = 88</li></ul></li><li>平均等待时间 = ( 72 + 20 + 85 + 88 ) / 4 = 66.25</li></ul></li><li>RR 算法的时间片长度<ul><li>RR 算法开销：额外的上下文切换</li><li>时间片太大<ul><li>等待时间过长</li><li>极限情况退化成 FCFS</li></ul></li><li>时间片太小<ul><li>反应迅速，但产生大量上下文切换</li><li>大量上下文切换开销影响到系统吞吐量</li></ul></li><li>时间片长度选择目标<ul><li>选择一个合适的时间片长度</li><li>经验规则：维持上下文切换开销处于 1% 以内</li></ul></li></ul></li><li>比较 FCFS 和 RR<ul><li>示例：4个进程的执行时间如下：<ul><li>P1：53；P2：8；P3：68；P4：24；</li><li>假设上下文切换时间为0，FCFS 和 RR 各自的平均等待时间是多少？</li><li><img src="http://qnya.pomo16.club/75.png" alt></li><li>这里两个极端中的 BestFCFS 即短进程优先算法，WorstFCFS 即长进程优先算法。表中可以看出，FCFS 抖动较大，而 RR 相对稳定</li></ul></li></ul></li></ul><h3 id="多级队列调度算法-MQ"><a href="#多级队列调度算法-MQ" class="headerlink" title="多级队列调度算法( MQ )"></a>多级队列调度算法( MQ )</h3><ul><li>就绪队列被划分成多个独立的子序列<ul><li>如：前台(交互)、后台(批处理)</li></ul></li><li>每个队列拥有自己的调度策略<ul><li>如：前台-RR，后台-FCFS</li></ul></li><li>队列间的调度<ul><li>固定优先级<ul><li>先处理前台，然后处理后台</li><li>可能导致饥饿</li></ul></li><li>时间片轮转<ul><li>每个队列都得到一个确定的能够调度其进程的 CPU 总时间</li><li>如：80% CPU 时间用于前台，20% CPU 时间用于后台</li></ul></li></ul></li></ul><h3 id="多级反馈队列算法-MLFQ"><a href="#多级反馈队列算法-MLFQ" class="headerlink" title="多级反馈队列算法( MLFQ )"></a>多级反馈队列算法( MLFQ )</h3><ul><li>进程可在不同队列间移动的多级队列算法<ul><li>时间片大小随优先级级别增加而增加</li><li>如进程在当前的时间片没有完成，则降到下一个优先级</li><li><img src="http://qnya.pomo16.club/76.png" alt></li></ul></li><li>MLFQ 算法的特征<ul><li>CPU 密集型进程的优先级下降很快</li><li>I/O 密集型进程停留在高优先级</li></ul></li></ul><h3 id="公平分享调度-FSS，Fair-Share-Scheduling"><a href="#公平分享调度-FSS，Fair-Share-Scheduling" class="headerlink" title="公平分享调度(FSS，Fair Share Scheduling)"></a>公平分享调度(FSS，Fair Share Scheduling)</h3><ul><li>FSS 控制用户对系统资源的访问<ul><li>一些用户组比其他用户组更重要</li><li>保证不重要的组无法垄断资源</li><li>未使用的资源按比例分配</li><li>没有达到资源使用率目标的组获得更高的优先级</li></ul></li><li><img src="http://qnya.pomo16.club/77.png" alt></li></ul><h3 id="传统调度算法总结"><a href="#传统调度算法总结" class="headerlink" title="传统调度算法总结"></a>传统调度算法总结</h3><ul><li>先来先服务算法<ul><li>不公平，平均等待时间较差</li></ul></li><li>短进程优先算法<ul><li>不公平，平均周转时间最小</li><li>需要精准预测计算时间</li><li>可能导致饥饿</li></ul></li><li>最高响应比优先算法<ul><li>基于 SPN 调度</li><li>不可抢占</li></ul></li><li>时间片轮转算法<ul><li>公平，但是平均等待时间较差</li></ul></li><li>多级反馈队列<ul><li>多种算法的集成</li></ul></li><li>公平共享调度<ul><li>公平是第一要素</li></ul></li></ul><h3 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h3><ul><li>实时操作系统的定义<ul><li>正确性依赖于其<strong>时间</strong>和<strong>功能</strong>两方面的操作系统</li></ul></li><li>实时操作系统的性能指标<ul><li><strong>时间约束的及时性( deadlines )</strong></li><li>速度和平均性能相对不重要</li></ul></li><li>实时系统的特性<ul><li>时间约束的可预测性</li></ul></li><li>实时任务<ul><li>任务(工作单元)<ul><li>一次计算，一次文件读取，一次信息传递等等</li></ul></li><li>任务属性<ul><li>完成任务所需要的资源</li><li>定时参数</li></ul></li><li><img src="http://qnya.pomo16.club/78.png" alt></li></ul></li><li>周期实时任务：一系列相似的任务<ul><li>任务有规律地重复</li><li>周期 p = 任务请求时间间隔(0 &lt; p)</li><li>执行时间 e = 最大执行时间(0 &lt; e &lt; p)</li><li>使用率 U = e / p</li><li><img src="http://qnya.pomo16.club/79.png" alt></li></ul></li><li>软时限和硬时限<ul><li>硬时限( Hard deadline )<ul><li>错过任务时限会导致灾难性或非常严重的后果</li><li>必须验证，在最坏情况下能够满足时限</li></ul></li><li>软时限( Soft deadline )<ul><li>通常能满足任务实现<ul><li>如有时不能满足，则降低要求</li></ul></li><li>尽力保证满足任务时限</li></ul></li></ul></li><li>可调度性<ul><li>可调度表示一个实时操作系统能够满足任务时限要求<ul><li>需要确定实时任务的执行顺序</li><li>静态优先级调度</li><li>动态优先级调度</li></ul></li></ul></li><li>实时调度<ul><li>速率单调调度算法( RM，Rate Monotonic)<ul><li>通过<strong>周期</strong>安排优先级</li><li>周期越短优先级越高</li><li>执行周期最短的任务</li></ul></li><li>最早截止时间优先算法( EDF，Earliest Deadline First )<ul><li>截止时间越早优先级越高</li><li>执行截止时间最早的任务</li></ul></li></ul></li></ul><h3 id="多处理器调度"><a href="#多处理器调度" class="headerlink" title="多处理器调度"></a>多处理器调度</h3><ul><li>多处理机调度的特征<ul><li>多个处理机组成一个多处理机系统</li><li>处理机间可负载共享</li></ul></li><li>对称多处理器( SMP，Symmetric multiprocessing )调度<ul><li>截止时间越早优先级越高每个处理器运行自己的调度程序</li><li>调度程序对共享资源的访问需要进行同步</li></ul></li><li>对称多处理器的进程分配<ul><li>静态进程分配<ul><li>进程从开始到结束都被分配到一个固定的处理机上执行</li><li>每个处理机有自己的就绪队列</li><li>调度开销小</li><li>各处理机可能忙闲不均</li></ul></li><li>动态进程分配<ul><li>进程在执行中可分配到任意空闲处理机执行</li><li>所有处理机共享一个公共的就绪队列</li><li>调度开销大</li><li>各处理机的负载时均衡的</li></ul></li></ul></li></ul><h3 id="优先级反置-Priority-Inversion"><a href="#优先级反置-Priority-Inversion" class="headerlink" title="优先级反置( Priority Inversion )"></a>优先级反置( Priority Inversion )</h3><ul><li>操作系统中出现高优先级进程长时间等待低优先级进程所占用资源的现象</li><li>基于优先级的可抢占调度算法存在优先级反置<br><img src="http://qnya.pomo16.club/80.png" alt></li><li>解决方法<ul><li>优先级继承( Priority Inheritance )<ul><li>占用资源的低优先级进程继承申请资源的高优先级进程的优先级<ul><li>只在占有资源的低优先级进程被阻塞时，才提高占有资源进程的优先级</li></ul></li></ul></li><li>优先级天花板协议( Priority Ceiling Protocol )<ul><li>占用资源进程的优先级和所有可能申请该资源的进程的最高优先级相同<ul><li>不管是否发生等待，都提升占用资源进程的优先级</li><li>优先级高于系统中所有被锁定的资源的优先级上限，任务执行临界区时就不会被阻塞</li></ul></li></ul></li></ul></li></ul><h2 id="同步互斥"><a href="#同步互斥" class="headerlink" title="同步互斥"></a>同步互斥</h2><h3 id="并发进程的正确性"><a href="#并发进程的正确性" class="headerlink" title="并发进程的正确性"></a>并发进程的正确性</h3><ul><li>独立进程<ul><li>不和其他进程共享资源或状态</li><li><strong>确定性</strong>：输入状态决定结果</li><li><strong>可重现</strong>：能够重现起始条件</li><li>调度顺序不重要</li></ul></li><li>并发进程<ul><li>在多个进程间有资源共享</li><li>不确定性</li><li>不可重现</li></ul></li><li>并发进程的正确性<ul><li>执行过程是不确定性和不可重现的</li><li>程序错误可能是间歇性发生的</li></ul></li></ul><h3 id="进程并发执行的好处"><a href="#进程并发执行的好处" class="headerlink" title="进程并发执行的好处"></a>进程并发执行的好处</h3><ul><li>进程需要与计算机中的其他进程和设备进行协作</li><li>好处1：共享资源<ul><li>多个用户使用同一台计算机</li><li>银行账号存款余额在多台 ATM 机操作</li><li>机器人上的嵌入式系统协调手臂和手的动作</li></ul></li><li>好处2：加速<ul><li>I/O 操作和 CPU 计算机可以重叠(并行)</li><li>程序可划分成多个模块放在多个处理器上并行执行</li></ul></li><li>好处3：模块化<ul><li>将大程序分解成小程序<ul><li>以编译为例，gcc 会调用 cpp，cc1，cc2，as，Id</li></ul></li><li>使系统易于复用和扩展</li></ul></li></ul><h3 id="并发创建新进程时的标识分配"><a href="#并发创建新进程时的标识分配" class="headerlink" title="并发创建新进程时的标识分配"></a>并发创建新进程时的标识分配</h3><ul><li><p>程序可以调用函数 fork() 来创建一个新的进程</p><ul><li>操作系统需要分配一个新的并且唯一的进程 ID</li><li><p>在内核中，这个系统调用会运行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_pid = next_pid++</span><br></pre></td></tr></table></figure></li><li><p>翻译成机器指令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LOAD next_pid Reg1</span><br><span class="line">STORE Reg1 new_pid</span><br><span class="line">INC Reg1</span><br><span class="line">STORE Reg1 next_pid</span><br></pre></td></tr></table></figure></li></ul></li><li><p>两个进程并发执行时的预期结果(假定 next_pid = 100)</p><ul><li>一个进程得到的 ID 应该是100</li><li>另一个进程的 ID 应该是101</li><li>next_pid 应该增加到102</li></ul></li></ul><h3 id="原子操作-Atomic-Operation"><a href="#原子操作-Atomic-Operation" class="headerlink" title="原子操作( Atomic Operation )"></a>原子操作( Atomic Operation )</h3><ul><li>原子操作是指一次不存在任何中断或者失败的操作<ul><li>要么操作成功完成</li><li>或者操作没有执行</li><li>不会出现部分执行的状态</li></ul></li><li><strong>操作系统需要利用同步机制在并发执行的同时，保证一些操作是原子操作</strong></li></ul><h3 id="进程的交互关系：相互感知程度"><a href="#进程的交互关系：相互感知程度" class="headerlink" title="进程的交互关系：相互感知程度"></a>进程的交互关系：相互感知程度</h3><table><thead><tr><th>相互感知的程度</th><th>交互关系</th><th>进程间的影响</th></tr></thead><tbody><tr><td>相互不感知(完全不了解其他进程的存在)</td><td>独立</td><td>一个进程的操作对其他进程的结果无影响</td></tr><tr><td>间接感知(双方都与第三方交互，如共享资源)</td><td>通过共享进行协作</td><td>一个进程的结果依赖于共享资源的状态</td></tr><tr><td>直接感知(双方直接交互，如通信)</td><td>通过通信进行协作</td><td>一个进程的结果依赖于从其他进程获得的信息</td></tr></tbody></table><ul><li>互斥( mutual exclusion )<ul><li>一个进程占用资源，其他进程不会使用</li></ul></li><li>死锁( deadlock )<ul><li>多个进程各占用部分资源，形成循环等待</li></ul></li><li>饥饿( starvation )<ul><li>其他进程可能轮流占用资源，一个进程一直得不到资源</li></ul></li></ul><h3 id="临界区-Critical-Section"><a href="#临界区-Critical-Section" class="headerlink" title="临界区( Critical Section )"></a>临界区( Critical Section )</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">entry section</span><br><span class="line">critical section</span><br><span class="line"><span class="built_in">exit</span> section</span><br><span class="line">remainder section</span><br></pre></td></tr></table></figure><ul><li>临界区 ( critical section )<ul><li>进程中访问临界资源的一段需要互斥执行的代码</li></ul></li><li>进入区 ( entry section )<ul><li>检查可否进入临界区的一段代码</li><li>如可进入，设置相应”正在访问临界区”标志</li></ul></li><li>退出区 ( exit section )<ul><li>清除”正在访问临界区”标志</li></ul></li><li>剩余区 ( remainder section )<ul><li>代码中的其余部分</li></ul></li></ul><h3 id="临界区的访问规则"><a href="#临界区的访问规则" class="headerlink" title="临界区的访问规则"></a>临界区的访问规则</h3><ul><li>空闲则入<ul><li>没有进程在临界区时，任何进程可进入</li></ul></li><li>忙则等待<ul><li>有进程在临界区时，其他进程均不能进入临界区</li></ul></li><li>有限等待<ul><li>等待进入临界区的进程不能无限期等待</li></ul></li><li>让权等待(可选)<ul><li>不能进入临界区的进程，应释放 CPU (如转换到阻塞状态)</li></ul></li></ul><h3 id="临界区的实现方法-同步方法"><a href="#临界区的实现方法-同步方法" class="headerlink" title="临界区的实现方法(同步方法)"></a>临界区的实现方法(同步方法)</h3><ul><li><p>禁用中断</p><ul><li><p>没有中断，没有上下文切换，因此没有并发</p><ul><li>硬件将中断处理延迟到中断被启动之后</li><li>现代计算机体系结构都提供指令来实现禁用中断</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">local_irq_save(<span class="keyword">unsigned</span> <span class="keyword">long</span> flags);</span><br><span class="line">critical section</span><br><span class="line">local_irq_restore(<span class="keyword">unsigned</span> <span class="keyword">long</span> flags);</span><br></pre></td></tr></table></figure></li><li><p>进入临界区：禁止所有中断，并保存标志</p></li><li>离开临界区：使能所有中断，并恢复标志</li><li>缺点<ul><li>禁用中断后，进程无法被停止<ul><li>整个系统都会为此停下来</li><li>可能导致其他进程处于饥饿状态</li></ul></li><li>临界区可能很长<ul><li>无法确定响应中断所需的时间(可能存在硬件影响)</li></ul></li><li>要小心使用</li></ul></li></ul></li><li><p>软件方法</p><ul><li>线程可通过共享一些共有变量来同步它们的行为</li><li><p>Peterson 算法</p><ul><li>满足线程 Ti 和 Tj 之间互斥的经典的基于软件的解决方法(1981年)</li><li><p>共享变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> turn;<span class="comment">//表示该谁进入临界区</span></span><br><span class="line">boolean flag[]；<span class="comment">//表示进程是否准备好进入临界区</span></span><br></pre></td></tr></table></figure></li><li><p>进入区代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flag[i] = <span class="literal">true</span>;</span><br><span class="line"><span class="literal">true</span> = j;</span><br><span class="line"><span class="keyword">while</span> (flag[j] &amp;&amp; turn == j);</span><br></pre></td></tr></table></figure></li><li><p>退出区代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag[i] = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li><li><p>线程 Ti 的完整代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  flag[i] = <span class="literal">true</span>;</span><br><span class="line">  <span class="literal">true</span> = j;</span><br><span class="line">  <span class="keyword">while</span> (flag[j] &amp;&amp; turn == j);</span><br><span class="line">  CRITICAL SECTION</span><br><span class="line">  flag[i] = <span class="literal">false</span>;</span><br><span class="line">  REMAINDER SECTION</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Dekkers 算法</p><ul><li>线程 Ti 的代码<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flag[<span class="number">0</span>] := <span class="literal">false</span>;flag[<span class="number">1</span>] := <span class="literal">false</span>;turn := <span class="number">0</span>;<span class="comment">//orl</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  flag[i] = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">while</span> flag[j] == <span class="literal">true</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> turn != i &#123;</span><br><span class="line">      flag[i] := <span class="literal">false</span></span><br><span class="line">      <span class="keyword">while</span> turn != i &#123; &#125;</span><br><span class="line">      flag[i] := <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  CRITICAL SECTION</span><br><span class="line">  turn := j</span><br><span class="line">  flag[i] = <span class="literal">false</span>;</span><br><span class="line">  EMAINDER SECTION</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>N 线程的软件方法( Eisenbery 和 McGuire )<br><img src="http://qnya.pomo16.club/81.png" alt></p></li><li>缺点<ul><li>复杂：需要两个进程间的共享数据项</li><li>需要忙等待：浪费 CPU 时间</li></ul></li></ul></li><li>更高级的抽象方法<ul><li>硬件提供了一些同步原语<ul><li>中断禁用，原子操作指令等</li></ul></li><li>操作系统提供更高级的编程抽象来简化进程同步<ul><li>例如：锁、信号量</li><li>用硬件原语来构建</li></ul></li></ul></li><li>不同的临界区实现机制的比较<ul><li>性能：并发级别</li></ul></li></ul><h3 id="锁-lock"><a href="#锁-lock" class="headerlink" title="锁( lock )"></a>锁( lock )</h3><ul><li>锁是一个抽象的数据结构<ul><li>一个二进制变量(锁定/解锁)</li><li>Lock::Acquire()<ul><li>锁被释放前一直等待，然后得到锁</li></ul></li><li>Lock::Release()<ul><li>释放锁，唤醒任何等待的进程</li></ul></li></ul></li><li>使用锁来控制临界区访问<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lock_next_pid-&gt;Acquire();</span><br><span class="line">new_pid = next_pid++;</span><br><span class="line">lock_next_pid-&gt;Release();</span><br></pre></td></tr></table></figure></li></ul><h3 id="原子操作指令"><a href="#原子操作指令" class="headerlink" title="原子操作指令"></a>原子操作指令</h3><ul><li>现代 CPU 体系结构都提供一些特殊的原子操作指令</li><li><p>测试和置位( Test-and-Set )指令</p><ul><li>从内存单元中读取值</li><li>测试该值是否为1(然后返回真或假)</li><li>内存单元值设置为1<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">boolean <span class="title">TestAndSet</span> <span class="params">(boolean *target)</span></span>&#123;</span><br><span class="line">  boolean rv = *target;</span><br><span class="line">  *target = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> rv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>交换指令( exchange )</p><ul><li>交换内存中的两个值<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Exchange</span> <span class="params">(boolean *a, boolean *b)</span></span>&#123;</span><br><span class="line">  boolean temp = *a;</span><br><span class="line">  *a = *b;</span><br><span class="line">  *b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用 TS 指令实现自旋锁( spinlock )<br><img src="http://qnya.pomo16.club/82.png" alt> </p><ul><li>线程在等待的时候需要消耗 CPU 时间</li></ul></li><li>使用 TS 指令实现无忙等待锁<br><img src="http://qnya.pomo16.club/83.png" alt></li><li>原子操作指令锁的特征<ul><li>优点<ul><li>适用于单处理器或者共享生存的<strong>多处理器</strong>中<strong>任意数量的进程同步</strong></li><li>简单并且容易证明</li><li>支持多临界区</li></ul></li><li>缺点<ul><li>忙等待消耗处理器时间</li><li>可能导致饥饿：进程离开临界区时有多个等待进程的情况</li><li>死锁<ul><li>拥有临界区的低优先级进程</li><li>请求访问临界区的高优先级进程获得处理器并等待临界区</li></ul></li></ul></li></ul></li></ul><h3 id="同步方法总结"><a href="#同步方法总结" class="headerlink" title="同步方法总结"></a>同步方法总结</h3><ul><li>并发问题<ul><li>多线程并发导致资源竞争</li></ul></li><li>同步概念<ul><li>协调多线程对共享数据的访问</li><li>任何时刻只能有一个线程执行临界区代码</li></ul></li><li>确保同步正确的方法<ul><li>底层硬件支持</li><li>高层次的编程抽象</li></ul></li><li>锁是一种高级的同步抽象方法<ul><li>互斥可以使用锁来实现</li><li>需要硬件支持</li></ul></li><li>常用的三种同步实现方法<ul><li>禁用中断(仅限于单处理器)</li><li>软件方法(复杂)</li><li>原子操作指令(单处理器或多处理器均可)</li></ul></li><li><img src="http://qnya.pomo16.club/84.png" alt></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统（四）</title>
      <link href="/2019/03/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2019/03/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ul><li>定义<ul><li>进程是指一个具有一定<strong>独立功能</strong>的程序在一个<strong>数据集合</strong>上的一次动态执行过程</li></ul></li><li>进程的组成<ul><li>进程包含了正在运行的一个程序的<strong>所有状态</strong>信息<ul><li>代码</li><li>数据</li><li>状态寄存器：CPU 状态 CR0 、指令指针 IP</li><li>通用寄存器：AX、BX、CX…</li><li>进程占用系统资源：打开文件、已分配内存…</li></ul></li><li><img src="http://qnya.pomo16.club/54.png" alt></li></ul></li><li>进程的特点<ul><li>动态性：可动态地创建，结束进程</li><li>并发性：进程可以被独立调度并占用处理机运行</li><li>独立性：不同进程的工作不相互影响</li><li>制约性：因访问共享数据/资源或进程间同步而产生制约<br><img src="http://qnya.pomo16.club/55.png" alt></li></ul></li><li>进程与程序的联系<ul><li>进程是操作系统处于执行状态程序的抽象<ul><li>程序 = 文件 (静态的可执行文件)</li><li>进程 = 执行中的程序 = 程序 + 执行状态</li></ul></li><li>同一个程序的多次执行过程对应为不同进程<ul><li>如命令 “ ls “ 的多次执行对应多个进程</li></ul></li><li>进程执行需要的资源<ul><li>内存：保存代码和数据</li><li>CPU：执行指令</li></ul></li></ul></li><li>进程与程序的区别<ul><li>进程是动态的，程序是静态的<ul><li>程序是有序代码的集合</li><li>进程是程序的执行，进程有核心态/用户态</li></ul></li><li>进程是暂时的，程序的永久的<ul><li>进程是一个状态变化的过程</li><li>程序可长久保存</li></ul></li><li>进程与程序的组成不同<ul><li>进程的组成包括程序、数据和进程控制块</li></ul></li></ul></li></ul><h3 id="进程控制块-PCB，Process-Control-Block"><a href="#进程控制块-PCB，Process-Control-Block" class="headerlink" title="进程控制块( PCB，Process Control Block )"></a>进程控制块( PCB，Process Control Block )</h3><ul><li>定义：操作系统管理控制进程运行所用的信息集合<ul><li>操作系统用 PCB 来描述进程的基本情况以及运行变化的过程</li><li>PCB 是进程存在的唯一标志<ul><li>每个进程都在操作系统中有一个对应的 PCB</li></ul></li><li>进程控制块的使用<ul><li>进程创建：生成该进程的 PCB</li><li>进程终止：回收它的 PCB</li><li>进程的组织管理：通过对 PCB 的组织管理来实现</li></ul></li></ul></li><li>进程控制块内容<ul><li>进程标识信息</li><li>处理机现场保存</li><li>进程控制信息<ul><li>调度和状态信息：进程和处理机制使用情况调度</li><li>进程间通信信息：进程间通信相关的各种标识</li><li>存储管理信息：指向进程映像存储空间数据结构</li><li>进程所用资源：进程使用的系统资源，如打开文件等</li><li>有关数据结构连接信息：与 PCB 相关的进程队列</li></ul></li></ul></li><li>进程控制块的组织<ul><li>链表：同一状态的进程其 PCB 成一链表，多个状态对应多个不同的链表<ul><li>各状态的进程形成不同的链表：就绪链表、阻塞链表</li></ul></li><li>索引表：同一状态的进程归入一个索引表(由索引指向 PCB )，多个状态对应多个不同的索引表<ul><li>各状态的进程形成不同的索引表：就绪索引表、阻塞索引表</li></ul></li><li><img src="http://qnya.pomo16.club/56.png" alt></li></ul></li></ul><h3 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h3><ul><li>进程的生命周期划分<ul><li>进程创建<ul><li>引起进程创建的情况<ul><li>系统初始化时</li><li>用户请求创建一个新进程</li><li>正在运行的进程执行了创建进程的系统调用</li></ul></li></ul></li><li>进程执行<ul><li>内核选择一个就绪的进程，让它占用处理机并执行</li></ul></li><li>进程等待<ul><li>进入等待(阻塞)的情况<ul><li>请求并等待系统服务，无法马上完成</li><li>启动某种操作，无法马上完成</li><li>需要的数据没有到达</li></ul></li><li>只有进程自身才能知道何时需要等待某种事件的发生</li></ul></li><li>进程抢占<ul><li>进程会被抢占的情况<ul><li>高优先级进程就绪</li><li>进程执行当前时间用完</li></ul></li></ul></li><li>进程唤醒<ul><li>唤醒进程的情况<ul><li>被阻塞进程需要的资源可被满足</li><li>被阻塞进程等待的事件到达</li></ul></li><li>进程只能被别的进程或者操作系统唤醒</li></ul></li><li>进程结束<ul><li>进程结束的情况<ul><li>正常退出(自愿的)</li><li>错误退出(自愿的)</li><li>致命错误(强制性的)</li><li>被其他进程扼杀(强制性的)</li></ul></li></ul></li></ul></li></ul><h3 id="三状态进程模型"><a href="#三状态进程模型" class="headerlink" title="三状态进程模型"></a>三状态进程模型</h3><ul><li>三个主要状态<ul><li>运行状态( Running )：进程正在处理机上运行</li><li>就绪状态( Ready )：进程获得了除处理机之外的所需资源，得到处理机即可运行</li><li>等待状态( 又称阻塞状态 Blocked )：进程正在等待某一事件的出现而暂停运行</li></ul></li><li>辅助状态<ul><li>创建状态( New )：一个进程正在被创建，还没被转到就绪状态之前的状态</li><li>结束状态( Exit )：一个进程正在从系统中消失时的状态，这是因为进程结束或由于其他原因所导致</li></ul></li><li>状态变迁<ul><li>NULL &gt; 创建：一个新进程被产生出来执行一个程序</li><li>创建 &gt; 就绪：当进程被创建完成并初始化后，一切就绪准备运行时，变为就绪状态</li><li>就绪 &gt; 运行：处于就绪状态的进程被进程调度程序选中后，就分配到处理机上来运行</li><li>运行 &gt; 结束：当进程表示它已经完成或者因出错，当前运行进程会由操作系统作结束处理</li><li>运行 &gt; 就绪：处于运行状态的进程在其运行过程中，由于分配给它的处理机时间片用完而让出处理机</li><li>运行 &gt; 等待：当进程请求某资源且必须等待时</li><li>等待 &gt; 就绪：当进程要等待某事件到来时，它从阻塞状态变到就绪状态</li></ul></li><li><img src="http://qnya.pomo16.club/57.png" alt></li></ul><h3 id="挂起进程模型"><a href="#挂起进程模型" class="headerlink" title="挂起进程模型"></a>挂起进程模型</h3><ul><li>进程挂起：处于挂起状态的进程映像在磁盘上，目的是减少进程占用内存</li><li>新增状态<ul><li>等待挂起状态( Blocked-suspend )：进程在外存并等待某事件的出现</li><li>就绪挂起状态( Ready-suspend )：进程在外存，但只要进入内存即可运行</li></ul></li><li>新增状态变迁<ul><li>挂起( Suspend )：把一个进程从内存转到外存<ul><li>等待到等待挂起：没有进程处于就绪状态或就绪进程要求更多内存资源</li><li>就绪到就绪挂起：当有高优先级等待(系统认为会很快就绪的)进程和低优先级就绪进程</li><li>运行到就绪挂起：对抢先式分时系统，当有高优先级等待挂起进程因事件出现而进入就绪挂起</li></ul></li><li>在外存时的状态转换<ul><li>等待挂起到就绪挂起：当有等待挂起进程因相关事件出现</li></ul></li><li>激活( Activate )：把一个进程从外存转到内存<ul><li>就绪挂起到就绪：没有就绪进程或挂起就绪进程优先级高于就绪进程</li><li>等待挂起到等待：当一个进程释放足够内存，并有高优先级等待挂起进程</li></ul></li></ul></li><li>状态队列<ul><li>由操作系统来维护一组队列，表示系统中所有进程的当前状态</li><li>不同队列表示不同状态<ul><li>就绪队列、各种等待队列</li></ul></li><li>根据进程状态不同，进程 PCB 加入相应队列<ul><li>进程状态变化时，它所在的 PCB 会从一个队列换到另一个</li></ul></li></ul></li><li><img src="http://qnya.pomo16.club/58.png" alt></li></ul><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ul><li>定义：线程是进程的一部分，描述指令流执行状态。它是进程中的<strong>指令执行流</strong>的最小单元，是 CPU <strong>调度</strong>的基本单位<ul><li>进程的资源分配角色：进程由一组相关资源构成，包括地址空间(代码段、数据段)、打开的文件等各种资源</li><li>线程的处理机调度角色：线程描述在进程资源环境中的指令流执行状态</li><li><img src="http://qnya.pomo16.club/59.png" alt></li></ul></li><li>进程和线程的关系<br><img src="http://qnya.pomo16.club/60.png" alt></li><li>线程 = 进程 - 共享资源<ul><li>线程的优点<ul><li>一个进程中可以同时存入多个线程</li><li>各个线程之间可以并发地执行</li><li>各个线程之间可以共享地址空间和文件等资源</li></ul></li><li>线程的缺点<ul><li>一个线程崩溃，会导致其所属进程的所有线程崩溃</li></ul></li></ul></li><li>线程和进程的比较<ul><li>进程是资源分配单位，线程是 CPU 调度单位</li><li>进程拥有一个完整的资源平台，而线程只独享指令流执行的必要资源，如寄存器和栈</li><li>线程具有就绪、等待和运行三种基本状态和状态间的转换关系</li><li>线程能减少并发执行的时间和空间开销<ul><li>线程的创建时间比进程短</li><li>线程的终止时间比进程短</li><li>同一进程内的线程切换时间比进程短</li><li>由于同一进程的各线程间共享内存和文件资源，可不通过内核进行直接通信</li></ul></li></ul></li><li>线程的三种实现方式<ul><li>用户线程：在用户空间实现<ul><li>POSIX Pthreads，Mach C-threads，Solaris threads</li></ul></li><li>内核线程：在内核中实现<ul><li>Windows，Solaris，Linux</li></ul></li><li>轻量级进程：在内核中实现，支持用户线程<ul><li>Solaris ( LightWeight Process )</li></ul></li></ul></li></ul><h3 id="用户线程"><a href="#用户线程" class="headerlink" title="用户线程"></a>用户线程</h3><ul><li>定义：由一组用户级的线程库函数来完成线程的管理，包括线程的创建、终止、同步和调度等<br><img src="http://qnya.pomo16.club/61.png" alt></li><li>特征<ul><li>不依赖于操作系统的内核<ul><li>内核不了解用户线程的存在</li><li>可用于不支持线程的多进程操作系统</li></ul></li><li>在用户空间实现的线程机制<ul><li>每个进程有私有的线程控制块( TCB )列表</li><li>TCB 有线程库函数维护</li></ul></li><li>同一进程内的用户线程切换速度快<ul><li>无需用户态/内核态切换</li></ul></li><li>允许每个进程拥有自己的线程调度算法</li></ul></li><li>不足<ul><li>线程发起系统调用而阻塞时，则整个进程进入等待</li><li>不支持基于线程的处理机抢占<ul><li>除非当前运行线程主动放弃，它所在进程的其他线程无法抢占 CPU</li></ul></li><li>只能按进程分配 CPU 时间<ul><li>多个线程进程中，每个线程的时间片较少</li></ul></li></ul></li></ul><h3 id="内核线程"><a href="#内核线程" class="headerlink" title="内核线程"></a>内核线程</h3><ul><li>定义：由内核通过系统调用实现的线程机制，由内核完成线程的创建、终止和管理<br><img src="http://qnya.pomo16.club/62.png" alt></li><li>特征<ul><li>由内核维护 PCB 和 TCB</li><li>线程执行系统调用而被阻塞不影响其他线程</li><li>线程的创建、终止和切换相对较大<ul><li>通过系统调用/内核函数，在内核实现</li></ul></li><li>以线程为单位进行 CPU 时间分配<ul><li>多线程的进程可获得更多 CPU 时间</li></ul></li></ul></li></ul><h3 id="轻权进程-LightWeight-Process"><a href="#轻权进程-LightWeight-Process" class="headerlink" title="轻权进程( LightWeight Process )"></a>轻权进程( LightWeight Process )</h3><p>内核支持的用户线程。一个进程可有一个或多个轻量级进程，每个轻权进程由一个单独的内核线程来支持。(Solaris/Linux)<br><img src="http://qnya.pomo16.club/63.png" alt></p><h3 id="用户进程与内核线程的对应关系"><a href="#用户进程与内核线程的对应关系" class="headerlink" title="用户进程与内核线程的对应关系"></a>用户进程与内核线程的对应关系</h3><p><img src="http://qnya.pomo16.club/64.png" alt></p><ul><li>实际实现中，一对一效果最好</li></ul><p>#进程管理 </p><h3 id="进程切换"><a href="#进程切换" class="headerlink" title="进程切换"></a>进程切换</h3><ul><li>进程切换(上下文切换)<ul><li>暂停当前运行进程，从运行状态变为其他状态</li><li>调度另一个进程从就绪状态变成运行状态</li></ul></li><li>进程切换的要求<ul><li>切换前，保存进程上下文</li><li>切换后，恢复进程上下文</li><li>快速切换</li></ul></li><li>进程生命周期的信息<ul><li>寄存器( PC，SP，…)</li><li>CPU 状态</li><li>内存地址空间</li></ul></li><li>上下文切换图示<br><img src="http://qnya.pomo16.club/65.png" alt></li><li>进程控制块 PCB ：内核的进程状态记录<ul><li>内核为每个进程维护了对应的进程控制块 ( PCB )</li><li>内核将相同状态的进程的 PCB 放置在同一队列<ul><li>就绪队列</li><li>I/O 等待队列<ul><li>每个设备一个队列</li></ul></li><li>僵尸队列<br><img src="http://qnya.pomo16.club/66.png" alt></li></ul></li></ul></li></ul><h3 id="进程创建"><a href="#进程创建" class="headerlink" title="进程创建"></a>进程创建</h3><ul><li><p>创建新进程</p><ul><li>Windows 进程创建 API：CreateProcess(filename)<ul><li>创建时关闭所有在子进程里的文件描述符<ul><li>CreateProcess(filename, CLOSE_FD)</li></ul></li><li>创建时改变子进程的环境<ul><li>CreateProcess(filename, CLOSE_FD, new_envp)</li></ul></li><li>等等</li></ul></li><li><p>Unix 进程创建系统调用：fork/exec</p><ul><li>fork() 把一个进程复制成两个进程<ul><li>parent (old PID)，child (new PID)</li></ul></li><li>exec() 用新程序来重写当前进程<ul><li>PID 没有改变</li></ul></li><li><p>用 fork 和 exec 创建进程的示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> pid = fork();<span class="comment">//创建子进程</span></span><br><span class="line"><span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">  <span class="comment">//Do anything (unmap memory, close net connections...)</span></span><br><span class="line">  exec(<span class="string">"program"</span>,argc,argv0,argv1,...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>fork() 创建一个继承的子进程</p><ul><li>复制父进程的所有变量和内存</li><li>复制父进程的所有 CPU 寄存器(有一个寄存器例外)</li></ul></li><li>fork() 的返回值<ul><li>子进程的 fork() 返回0</li><li>父进程的 fork() 返回子进程标识符</li><li>fork() 返回值可方便后续使用，子进程可使用 getpid() 获取 PID</li></ul></li><li>fork() 的地址空间复制<ul><li>fork() 执行过程对于子进程而言，是在调用时间对父进程地址空间的一次复制<ul><li>对于父进程 fork() 返回 child PID，对于子进程返回值为0<br><img src="http://qnya.pomo16.club/67.png" alt></li></ul></li></ul></li><li><p>程序加载和执行</p><ul><li>系统调用 exec() 加载新程序取代当前运行进程</li><li>exec() 示例代码<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">main()</span><br><span class="line">...</span><br><span class="line"><span class="keyword">int</span> pid = fork();<span class="comment">//创建子进程</span></span><br><span class="line"><span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;<span class="comment">//子进程在这里继续</span></span><br><span class="line">  exec_status = exec(<span class="string">"calc"</span>,argc,arg0,arg1,...);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Why would I execute?"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//父进程在这里继续</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Whose your daddy?"</span>);</span><br><span class="line">  ...</span><br><span class="line">  child_status = wait(pid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pid &lt; <span class="number">0</span>)&#123;<span class="comment">/*error occurred*/</span>&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>fork() 的开销</p><ul><li>fork() 的实现开销<ul><li>对子进程分配内存</li><li>复制父进程的内存和 CPU 寄存器到子进程里</li><li>开销昂贵！！</li></ul></li><li>在 99% 的情况里，我们在调用 fork() 之后调用 exec()<ul><li>在 fork() 操作中内存复制是没有作用的</li><li>子进程将可能关闭打开的文件和连接</li><li>为什么不能结合它们在一个调用中？</li></ul></li><li>vfork()<ul><li>创建进程时，不再创建一个同样的内存映像</li><li>一些时候称为轻量级 fork()</li><li>子进程应该几乎立即调用 exec()</li><li>现在使用 Copy on Write (COW) 技术</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="进程加载"><a href="#进程加载" class="headerlink" title="进程加载"></a>进程加载</h3><ul><li>程序加载和执行系统调用 exec()<ul><li>允许进程”加载”一个完全不同的程序，并从 main 开始执行(即_start)</li><li>允许进程加载时指定启动参数(argc，argv)</li><li>exec 调用成功时<ul><li>它是相同的进程…</li><li>但是运行了不同的程序</li></ul></li><li>代码段、堆栈和堆(heap)等完全重写</li></ul></li></ul><h3 id="进程等待与退出"><a href="#进程等待与退出" class="headerlink" title="进程等待与退出"></a>进程等待与退出</h3><ul><li>父进程等待子进程<ul><li>wait() 系统调用用于父进程等待子进程的结束<ul><li>子进程结束时通过 exit() 向父进程返回一个值</li><li>父进程通过 wait() 接受并处理返回值</li></ul></li><li>wait() 系统调用的功能<ul><li>有子进程存活时，父进程进入等待状态，等待子进程的返回结果<ul><li>当某子进程调用 exit() 时，唤醒父进程，将 exit() 返回值作为父进程中 wait 的返回值</li></ul></li><li>有僵尸子进程等待时，wait()立即返回其中一个值</li><li>无子进程存活时，wait()立刻返回</li></ul></li></ul></li><li>进程的有序终止 exit()<ul><li>进程结束执行时调用 exit()，完成进程资源回收</li><li>exit() 系统调用的功能<ul><li>将调用参数作为进程的”结果”</li><li>关闭所有打开的文件等占用资源</li><li>释放内存</li><li>释放大部分进程相关的内核数据结构</li><li>检查是否父进程是存活着的<ul><li>如存活，保留结果的值直到父进程需要它，进入僵尸( zombie / defunct )状态</li><li>如果没有，它释放所有的数据结构，进程结果</li></ul></li><li>清理所有等待的僵尸进程</li></ul></li><li>进程终止是最终的垃圾收集(资源回收)</li></ul></li></ul><h3 id="其他进程控制系统调用"><a href="#其他进程控制系统调用" class="headerlink" title="其他进程控制系统调用"></a>其他进程控制系统调用</h3><ul><li>优先级控制<ul><li>nice() 指定进程的初始优先级</li><li>Unix 系统中进程优先级会随执行时间而衰减</li></ul></li><li>进程调试支持<ul><li>ptrace() 允许一个进程控制另一个进程的执行</li><li>设置断点和查看寄存器等</li></ul></li><li>定时<ul><li>sleep() 可以让进程在定时器的等待队列中等待指定</li></ul></li></ul><h3 id="进程控制-v-s-进程状态"><a href="#进程控制-v-s-进程状态" class="headerlink" title="进程控制 v.s. 进程状态"></a>进程控制 v.s. 进程状态</h3><p><img src="http://qnya.pomo16.club/68.png" alt></p><ul><li>exec() 实际上是执行代码过程中的一种状态</li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统（三）</title>
      <link href="/2019/03/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2019/03/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟存储概念"><a href="#虚拟存储概念" class="headerlink" title="虚拟存储概念"></a>虚拟存储概念</h1><h3 id="虚拟存储"><a href="#虚拟存储" class="headerlink" title="虚拟存储"></a>虚拟存储</h3><ul><li>概念：基于非连续存储内存分配的基础上，可以把一部分内训放在外存里</li><li>需求<ul><li>计算机系统时常出现内存空间不够用<ul><li>覆盖( overlay )<br>应用程序手动把需要的指令和数据保存在内存中</li><li>交换( swapping )<br>操作系统自动把暂时不能执行的程序保存到外存中</li><li>虚拟存储<br>在有限容量的内存中，以页为单位自动装入更多更大的程序</li></ul></li></ul></li></ul><h3 id="覆盖技术"><a href="#覆盖技术" class="headerlink" title="覆盖技术"></a>覆盖技术</h3><ul><li>目标：在较小的可用内存中运行较大的程序</li><li>方法：依据程序逻辑结构，将程序划分为若干<strong>功能相对独立</strong>的模块；将不会同时执行的模块<strong>共享同一块内存</strong>区域<ul><li>必要部分(常用功能)的代码和数据常驻内存</li><li>可选部分(不常用功能)放在其他程序模块中，只在要用到时装入内存</li><li>不存在调用关系的模块可相互覆盖，共用同一内存区域</li></ul></li><li>不足<ul><li>增加编程困难<ul><li>需程序员划分功能模块，并确定模块间的覆盖关系</li><li>增加了编程的复杂度</li></ul></li><li>增加执行时间<ul><li>从外存装入覆盖模块</li><li>时间换空间</li></ul></li></ul></li></ul><h3 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h3><ul><li>目标：增加正在运行或需要运行的程序的内存</li><li>实现方法<ul><li>可将暂时不能运行的程序放到外存</li><li>换入换出的基本单位<ul><li>整个进程的地址空间</li></ul></li><li>换出( swap out )<ul><li>把一个进程的整个地址空间保存到外存</li></ul></li><li>换入( swap in )<ul><li>将外存中某进程的地址空间读入到内存</li></ul></li></ul></li><li>交换技术面临的问题<ul><li>交换时机：何时需要发生交换？<ul><li>只当内存空间不够或有不够的可能时换出</li></ul></li><li>交换区大小<ul><li>存放所有用户进程的所有内存映像的拷贝</li></ul></li><li>程序换入时的重定向：换出后再换入时要放在原处吗？<ul><li>采用动态地址映射的方法</li></ul></li></ul></li></ul><h3 id="覆盖和交换的比较"><a href="#覆盖和交换的比较" class="headerlink" title="覆盖和交换的比较"></a>覆盖和交换的比较</h3><ul><li>覆盖<ul><li>只能发生在没有调用关系的模块间</li><li>程序员须给出模块间的逻辑覆盖结构</li><li>发生在运行程序的内部模块间</li></ul></li><li>交换<ul><li>以进程为单位</li><li>不需要模块间的逻辑覆盖结构</li><li>发生在内存进程间</li></ul></li></ul><h3 id="虚拟存储技术的目标"><a href="#虚拟存储技术的目标" class="headerlink" title="虚拟存储技术的目标"></a>虚拟存储技术的目标</h3><ul><li>只把部分程序放到内存中，从而运行比物理内存大的程序<ul><li>由操作系统自动完成，无需程序员的干涉</li></ul></li><li>实现进程在内存与外存之间的交换，从而获得更多的空闲内存空间<ul><li>在内存与外存之间只交换进程的部分内容</li></ul></li></ul><h3 id="局部性原理-principle-of-locality"><a href="#局部性原理-principle-of-locality" class="headerlink" title="局部性原理( principle of locality )"></a>局部性原理( principle of locality )</h3><ul><li>程序在执行过程中的一个较短时期，所执行的指令地址和指令的操作数地址，分别局限于一定区域。<ul><li>时间局部性<ul><li>一条指令的一次执行和下次执行，一个数据的一次访问和下次访问都集中在一个较短时期内</li></ul></li><li>空间局部性<ul><li>当前指令和邻近的几条指令，当前访问的数据和邻近的几个数据都集中在一个较小区域内</li></ul></li><li>分支局部性<ul><li>一条跳转指令的两次执行，很可能跳到相同的内存位置</li></ul></li><li>局部性原理的意义<ul><li>从理论上来说，虚拟存储技术是能够实现的，而且可取得满意的效果</li></ul></li></ul></li></ul><h3 id="虚拟存储的基本概念"><a href="#虚拟存储的基本概念" class="headerlink" title="虚拟存储的基本概念"></a>虚拟存储的基本概念</h3><ul><li>思路：将不常用的部分内存块暂存到外存</li><li>原理<ul><li>装载程序时<ul><li>只将当前指令执行需要的部分页面或段装入内存</li></ul></li><li>指令执行中需要的指令或数据不在内存(称为缺页或缺段)时<ul><li>处理器通知操作系统将相应的页面或段调入内存</li></ul></li><li>操作系统将内存中暂时不用的页面或段保存到外存</li></ul></li><li>实现方式<ul><li>虚拟页式存储</li><li>虚拟段式存储</li></ul></li><li>基本特征<ul><li>不连续性<ul><li>物理内存分配非连续</li><li>虚拟地址空间使用非连续</li></ul></li><li>大用户空间<ul><li>提供给用户的虚拟内存可大于实际的物理内存</li></ul></li><li>部分交换<ul><li>虚拟存储只对部分虚拟地址空间进行调入和调出</li></ul></li></ul></li><li>支持技术<ul><li>硬件：页式或段式存储中的地址转换机制</li><li>操作系统：管理内存和外存间页面或段的换入和换出</li></ul></li></ul><h3 id="虚拟页式存储管理"><a href="#虚拟页式存储管理" class="headerlink" title="虚拟页式存储管理"></a>虚拟页式存储管理</h3><ul><li>在页式存储管理的基础上，增加请求调页和页面置换</li><li>思路<ul><li>当用户程序要装载到内存运行时，只装入部分页面，就启动程序运行</li><li>进程在运行中发现有需要的代码或数据不在内存时，则向系统发出缺页异常请求</li><li>操作系统在处理缺页异常时，将外存中相应的页面调入内存，使得进程能继续运行</li></ul></li><li>虚拟页式存储中的页表项结构<ul><li>驻留位：表示该页是否在内存<ul><li>1表示该页位于内存中，该页表项是有效的，可以使用</li><li>0表示该页当前在外存中，访问该页表项将导致缺页异常</li></ul></li><li>修改位：表示在内存中的该页是否被修改过<ul><li>回收该物理页面时，据此判断是否要把它的内容写回外存</li></ul></li><li>访问位：表示该页面是否被访问过(读或写)<ul><li>用于页面置换算法</li></ul></li><li>保护位：表示该页的允许访问方式<ul><li>只读，可写，可执行等</li></ul></li></ul></li><li>虚拟页式存储中的外存管理<ul><li>在何处保存未被映射的页？<ul><li>应能方便地找到在外存中的页面内容</li><li>交换空间(磁盘或者文件)<ul><li>采用特殊格式存储未被映射的页面</li></ul></li></ul></li><li>虚拟页式存储中的外存选择<ul><li>代码段：可执行二进制文件</li><li>动态加载的共享库程序段：动态调用的库文件</li><li>其他段：交换空间</li></ul></li></ul></li><li>虚拟页式存储管理的性能<ul><li>有效存储访问时间( effective memory access time EAT )<ul><li>EAT = 访存时间 <em> (1-p) + 缺页异常处理时间 </em> 缺页率 p</li></ul></li><li>例子：<ul><li>访存时间：10 ns；磁盘访问时间：5 ms；缺页率 p；页修改概率 q；</li><li>EAT = 10(1-p) + 5,000,000p(1+q)</li></ul></li></ul></li></ul><h3 id="缺页异常-缺页中断-的处理流程"><a href="#缺页异常-缺页中断-的处理流程" class="headerlink" title="缺页异常(缺页中断)的处理流程"></a>缺页异常(缺页中断)的处理流程</h3><ol><li>在内存中有空闲物理页面时，分配一物理页帧 f，转第 5 步</li><li>依据页面置换算法选择将被替换的物理页帧 f，对应逻辑页 q</li><li>如 q 被修改过，则把它写回外存</li><li>修改 q 的页表项中驻留位置为 0</li><li>将需要访问的页 p 装入到物理页面 f</li><li>重新执行产生缺页的指令</li></ol><h1 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h1><h3 id="置换算法的功能和目标"><a href="#置换算法的功能和目标" class="headerlink" title="置换算法的功能和目标"></a>置换算法的功能和目标</h3><ul><li>功能<ul><li>当出现缺页异常，需调入新页面而内存已满时，置换算法<strong>选择被置换的物理页面</strong></li></ul></li><li>设计目标<ul><li>尽可能<strong>减少页面的调入调出次数</strong></li><li>把未来不再访问或短期内不访问的页面调出</li></ul></li><li>页面锁定( frame locking )<ul><li>描述必须常驻内存的逻辑页面</li><li>操作系统的关键部分</li><li>要求响应速度的代码和数据</li><li>页表中的锁定标志位( lock bit )</li></ul></li><li>置换算法的评价方法<ul><li>记录进程访问内存的页面轨迹<ul><li>举例：虚拟地址访问用(页号，位移)表示<br>(3,0), (1,9), (4,1), (2,1), (5,3), (2,0), (1,9), (2,4), (3,1), (4,8)</li><li>对应的页面轨迹<br>3，1，4，2，5，2，1，2，3，4<br>替换c，a，d，b，e，b，a，b，c，d</li></ul></li><li>评价方法<ul><li>模拟页面置换行为，记录产生缺页的次数</li><li>更少的缺页，更好的性能</li></ul></li></ul></li><li>页面置换算法分类<ul><li>局部页面置换算法<ul><li>置换页面的选择范围仅限于当前进程占用的物理页面内</li><li>最优算法，先进先出算法，最近最久未使用算法</li><li>时钟算法，最不常用算法</li></ul></li><li>全局页面置换算法<ul><li>置换页面的选择范围是所有可换出的物理页面</li><li>工作集算法，缺页率算法</li></ul></li></ul></li></ul><h3 id="最优页面置换算法-OPT，optional"><a href="#最优页面置换算法-OPT，optional" class="headerlink" title="最优页面置换算法( OPT，optional )"></a>最优页面置换算法( OPT，optional )</h3><ul><li>基本思路：置换在未来最长时间不访问的页面</li><li>算法实现<ul><li>缺页时，计算内存中每个逻辑页面的下一次访问时间</li><li>选择<strong>未来最长时间不访问的页面</strong></li></ul></li><li>算法特征<ul><li>缺页最少，是理想情况</li><li>实际系统中<strong>无法实现</strong></li><li>无法预知每个页面在下次访问前的等待时间</li><li>作为置换算法的性能评价依据<ul><li>在模拟器上运行某个程序，并记录每一次的页面访问情况</li><li>第二遍运行时使用最优算法</li></ul></li></ul></li></ul><h3 id="先进先出算法-First-In-First-Out，FIFO"><a href="#先进先出算法-First-In-First-Out，FIFO" class="headerlink" title="先进先出算法( First-In First-Out，FIFO )"></a>先进先出算法( First-In First-Out，FIFO )</h3><ul><li>思路：选择<strong>在内存驻留时间最长</strong>的页面进行置换</li><li>实现<ul><li>维护一个记录所有位于内存中的逻辑页面链表</li><li>链表元素<strong>按驻留内存的时间排序</strong>，链首最长，链尾最短</li><li>出现缺页时，选择链首页面进行置换，新页面加到链尾</li></ul></li><li>特征<ul><li>实现简单</li><li>性能较差，调出的页面可能是进场访问的</li><li>进程分配物理页面数增加时，缺页并不一定减少(Belady现象)</li><li>很少单独使用</li></ul></li></ul><h3 id="最近最久未使用算法-Least-Recently-Used，LRU"><a href="#最近最久未使用算法-Least-Recently-Used，LRU" class="headerlink" title="最近最久未使用算法( Least Recently Used，LRU )"></a>最近最久未使用算法( Least Recently Used，LRU )</h3><ul><li>思路<ul><li>选择<strong>最长时间没有被引用</strong>的页面进行置换</li><li>如某些页面长时间未被访问，则它们在将来还可能会长时间不会访问</li></ul></li><li>实现<ul><li>缺页时，计算内存中每个逻辑页面的<strong>上一次</strong>访问时间</li><li>选择<strong>上一次使用到当前时间最长的页面</strong></li></ul></li><li>特征<ul><li>最优置换算法的一种近似</li></ul></li><li>LRU 算法的可能实现方法<ul><li>页面链表<ul><li>系统维护一个按最近一次访问时间排序的页面链表<ul><li>链表首节点是最近刚刚使用过的页面</li><li>链表尾节点是最久未使用的页面</li></ul></li><li>访问内存时，找到相应页面，并把它移到链表之首</li><li>缺页时，置换链表尾节点的页面</li></ul></li><li>活动页面栈<ul><li>访问页面时，将此页号压入栈顶，并栈内相同的页号抽出</li><li>缺页时，置换栈底的页面</li></ul></li><li>LRU 算法特征：开销比较大</li></ul></li></ul><h3 id="时钟置换算法-Clock"><a href="#时钟置换算法-Clock" class="headerlink" title="时钟置换算法( Clock )"></a>时钟置换算法( Clock )</h3><ul><li>思路：仅对页面的访问情况进行大致统计</li><li>数据结构<ul><li>在页表项中增加<strong>访问位</strong>，描述页面在过去一段时间的内访问情况</li><li>各页面组织成<strong>环型链表</strong></li><li><strong>指针</strong>指向最先调入的页面</li></ul></li><li>算法<ul><li>访问页面时，在页表项记录页面访问情况</li><li>缺页时，从指针处开始顺序查找未被访问的页面进行置换</li></ul></li><li>特征：时钟算法是 LRU 和 FIFO 的折中</li><li>实现<ul><li>页面装入内存时，访问位初始化为0</li><li>访问页面(读/写)时，访问位置1</li><li>缺页时，从指针当前位置顺序检查环形链表<ul><li>访问位为0，则置换该页</li><li>访问位为1，则访问位置0，并指针移动到下一个页面，直到找到可置换的页面</li></ul></li></ul></li><li>改进的 Clock 算法<ul><li>思路：减少修改页的缺页处理开销</li><li>算法<ul><li>在页面中增加修改位，并在访问时进行相应修改</li><li>缺页时，修改页面标志位，以跳过有修改的页面</li></ul></li></ul></li></ul><h3 id="最不常用算法-Least-Frequently-Used，LFU"><a href="#最不常用算法-Least-Frequently-Used，LFU" class="headerlink" title="最不常用算法( Least Frequently Used，LFU )"></a>最不常用算法( Least Frequently Used，LFU )</h3><ul><li>思路：缺页时，置换访问次数最少的页面</li><li>实现<ul><li>每个页面设置一个访问计数</li><li>访问页面时，访问计数加1</li><li>缺页时，置换计数最小的页面</li></ul></li><li>特征<ul><li>算法开销大</li><li>开始时频繁使用，但以后不使用的页面很难置换<ul><li>解决方法：计数定期右移</li></ul></li></ul></li><li>LRU 和 LFU 的区别<ul><li>LRU 关注多久未访问，时间越短越好</li><li>LFU 关注访问次数，次数越多越好</li></ul></li></ul><h3 id="Belady现象"><a href="#Belady现象" class="headerlink" title="Belady现象"></a>Belady现象</h3><ul><li>现象：采用 FIFO 等算法时，可能出现分配的物理页面数增加，缺页次数反而升高的异常现象</li><li>原因<ul><li>FIFO 算法的置换特征与进程访问内存的动态特征矛盾</li><li>被它置换出去的页面并不一定是进程近期不会访问的</li></ul></li><li>FIFO 算法有 Belady 现象</li><li>LRU 算法没有 Belady 现象</li></ul><h3 id="LRU，FIFO-和-Clock-的比较"><a href="#LRU，FIFO-和-Clock-的比较" class="headerlink" title="LRU，FIFO 和 Clock 的比较"></a>LRU，FIFO 和 Clock 的比较</h3><ul><li>LRU 算法和 FIFO 本质上都是先进先出的思路<ul><li>LRU 依据页面的最近访问时间排序</li><li>LRU 需要动态地调整顺序</li><li>FIFO 依据页面进入内存的时间排序</li><li>FIFO 的页面进入时间是固定不变的</li></ul></li><li>LRU 可退化成 FIFO<ul><li>如页面进入内存后没有被访问，最近访问时间与进入内存的时间相同</li><li>例如：给进程分配3个物理页面，逻辑页面的访问顺序为1，2，3，4，5，6，1，2，3…</li></ul></li><li>LRU 算法性能较好，但系统开销较大</li><li>FIFO 算法系统开销较小，会发生 Belady 现象</li><li>Clock 算法是它们的折中<ul><li>页面访问时，不动态调整页面在链表中的顺序，仅做标记</li><li>缺页时，再把它移动到链表末尾</li></ul></li><li>对于未被访问的页面，Clock 和 LRU 算法的表现一样好</li><li>对于被访问过的页面，Clock 算法不能记录准确访问顺序，而 LRU 算法可以</li></ul><h3 id="全局页面置换算法"><a href="#全局页面置换算法" class="headerlink" title="全局页面置换算法"></a>全局页面置换算法</h3><ul><li>背景：局部置换算法没有考虑进程访存差异</li><li>思路：全局置换算法为进程分配<strong>可变数目</strong>的物理页面</li><li>全局置换算法要解决的问题<ul><li>进程在不同阶段的内存需求是变化的</li><li>分配给进程的内存也需要在不同阶段有所变化</li><li>全局置换算法需要确定分配给进程的物理页面数</li></ul></li></ul><h3 id="CPU-利用率和并发进程数的关系"><a href="#CPU-利用率和并发进程数的关系" class="headerlink" title="CPU 利用率和并发进程数的关系"></a>CPU 利用率和并发进程数的关系</h3><p><img src="http://qnya.pomo16.club/50.png" alt></p><ul><li>CPU 利用率与并发进程数存在相互促进和制约的关系<ul><li>进程数少时，提高并发进程数，可提高 CPU 利用率</li><li>并发进程导致内存访问增加</li><li>并发进程的内存访问会降低了访存的局部性特征</li><li>局部性特征的下降会导致缺页率上升和 CPU 利用率下降</li></ul></li></ul><h3 id="工作集"><a href="#工作集" class="headerlink" title="工作集"></a>工作集</h3><ul><li>一个进程当前正在使用的逻辑页面集合，可表示为二元函数 W(t,△)<ul><li>t 是当前的执行时刻</li><li>△ 称为工作集窗口 ( working-set window )，即一个定长的页面访问时间窗口</li><li>W(t,△) 是指在当前时刻 t 前的 △ 时间窗口中的所有访问页面所组成的集合</li><li>|W(t,△)| 指工作集的大小，即页面数目</li></ul></li><li>工作集的变化<br><img src="http://qnya.pomo16.club/51.png" alt><ul><li>进程开始执行后，随着访问新页面逐步建立较稳定的工作集</li><li>当内存访问的局部性区域的位置<strong>大致稳定</strong>时，工作集大小也大致稳定</li><li>局部性区域的位置改变时，工作集<strong>快速扩张和收缩</strong>过渡到下一个稳定值</li></ul></li></ul><h3 id="常驻集"><a href="#常驻集" class="headerlink" title="常驻集"></a>常驻集</h3><ul><li>在当前时刻，进程实际驻留在内存当中的页面集合<ul><li>工作集和常驻集的关系<ul><li>工作集是进程在运行过程中固有的性质</li><li>常驻集取决于系统分配给进程的物理页面数目和页面置换算法</li></ul></li><li>缺页率和常驻集的关系<ul><li>常驻集 ⊇ 工作集时，缺页较少</li><li>工作集发生剧烈变动(过渡)时，缺页较多</li><li>进程常驻集大小达到一定数目后，缺页率也不会明显下降</li></ul></li></ul></li></ul><h3 id="工作集置换算法"><a href="#工作集置换算法" class="headerlink" title="工作集置换算法"></a>工作集置换算法</h3><ul><li>思路：换出不在工作集中的页面</li><li>窗口大小 τ<ul><li>当前时刻前 τ 个内存访问的页引用是工作集，τ 被称为窗口大小</li></ul></li><li>实现方法<ul><li>访存链表：维护窗口内的访存页面链表</li><li>访存时，换出不在工作集的页面；更新访存链表</li><li>缺页时，换入页面；更新访存链表</li></ul></li></ul><h3 id="缺页率-page-fault-rate"><a href="#缺页率-page-fault-rate" class="headerlink" title="缺页率( page fault rate )"></a>缺页率( page fault rate )</h3><p>缺页次数  / 内存访问次数 或 缺页平均时间间隔的倒数</p><ul><li>影响缺页率的因素<ul><li>页面置换算法</li><li>分配给进程的物理页面数目</li><li>页面大小</li><li>程序的编写方法</li></ul></li></ul><h3 id="缺页率置换算法-PFF，Page-Fault-Frequency"><a href="#缺页率置换算法-PFF，Page-Fault-Frequency" class="headerlink" title="缺页率置换算法( PFF，Page-Fault-Frequency )"></a>缺页率置换算法( PFF，Page-Fault-Frequency )</h3><p><img src="http://qnya.pomo16.club/52.png" alt></p><ul><li>原理<ul><li>通过调节常驻集大小，使每个进程的缺页率保持在一个合理的范围内<ul><li>若进程缺页率过高，则增加常驻集以分配更多的物理页面</li><li>若进程缺页率过低，则减少常驻集以减少它的物理页面</li></ul></li></ul></li><li>实现<ul><li>访存时，设置引用位标志</li><li>缺页时，计算从上次缺页时间 t<sub>last</sub> 到现在 t<sub>current</sub> 的时间间隔<ul><li>如果 t<sub>current</sub> - t<sub>last</sub> &gt; T，则置换所有在 [ t<sub>last</sub> , t<sub>current</sub> ] 时间内没有被引用的页</li><li>如果  t<sub>current</sub> - t<sub>last</sub> &lt;= T，则增加缺失页到常驻集中</li></ul></li></ul></li></ul><h3 id="抖动问题"><a href="#抖动问题" class="headerlink" title="抖动问题"></a>抖动问题</h3><ul><li>抖动<ul><li>进程物理页面太少，不能包含工作集</li><li>造成大量缺页，频繁置换</li><li>进程运行速度变慢</li></ul></li><li>产生抖动的原因<ul><li>随着驻留内存的进程数目增加，分配给每个进程的物理页面数不断减少，缺页率不断上升。</li></ul></li><li>操作系统需在并发水平和缺页率之间达到一个平衡<ul><li>选择一个适当的进程数目和进程需要的物理页面数</li></ul></li></ul><h3 id="负载控制"><a href="#负载控制" class="headerlink" title="负载控制"></a>负载控制</h3><ul><li>通过调节并发进程数 ( MPL ) 来进行系统负载控制<ul><li>∑WSi = 内存大小</li><li>平均缺页间隔时间 ( MTBF ) = 缺页异常处理时间( PFST )<br><img src="http://qnya.pomo16.club/53.png" alt></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统（二）</title>
      <link href="/2019/03/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2019/03/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="物理内存管理：连续内存分配"><a href="#物理内存管理：连续内存分配" class="headerlink" title="物理内存管理：连续内存分配"></a>物理内存管理：连续内存分配</h1><h3 id="地址空间定义"><a href="#地址空间定义" class="headerlink" title="地址空间定义"></a>地址空间定义</h3><ul><li>物理地址空间：硬件支持的地址空间<ul><li>起始地址0，直到 MAX<sub>sys</sub></li></ul></li><li>逻辑地址空间：在 CPU 运行的进程看到的地址<ul><li>起始地址0，直到 MAX<sub>prog</sub></li><li><img src="http://qnya.pomo16.club/48.png" alt></li></ul></li></ul><h3 id="地址生成时机和限制"><a href="#地址生成时机和限制" class="headerlink" title="地址生成时机和限制"></a>地址生成时机和限制</h3><ul><li>编译时<ul><li>假设起始地址已知</li><li>如果起始地址改变，必须重新编译</li></ul></li><li>加载时<ul><li>如编译时起始位置未知，编译器需生成可重定位的代码(relocatable code)</li><li>加载时，生成绝对地址</li></ul></li><li>执行时<ul><li>执行时代码可移动</li><li>需地址转换(映射)硬件支持</li></ul></li></ul><h3 id="地址生成过程"><a href="#地址生成过程" class="headerlink" title="地址生成过程"></a>地址生成过程</h3><ul><li>CPU<ul><li>ALU：需要逻辑地址的内存内容</li><li>MMU：进行逻辑地址和物理地址的转换</li><li>CPU 控制逻辑：给总线发送物理地址请求</li></ul></li><li>内存<ul><li>发送物理地址的内容给 CPU</li><li>或接受 CPU 数据到物理地址</li></ul></li><li>操作系统<ul><li>建立逻辑地址 LA 和物理地址 PA 的映射</li></ul></li></ul><h3 id="连续内存分配和内存碎片"><a href="#连续内存分配和内存碎片" class="headerlink" title="连续内存分配和内存碎片"></a>连续内存分配和内存碎片</h3><ul><li>连续内存分配<ul><li>给进程分配一块不小于指定大小的连续的物理内存区域</li></ul></li><li>内存碎片<ul><li>空闲内存不能被利用</li></ul></li><li>外部碎片<ul><li>分配单元之间的未被使用内存</li></ul></li><li>内部碎片<ul><li>分配单元内部的未被使用内存</li><li>取决于分配单元大小是否要取整</li></ul></li></ul><h3 id="连续内存分配：动态分区分配"><a href="#连续内存分配：动态分区分配" class="headerlink" title="连续内存分配：动态分区分配"></a>连续内存分配：动态分区分配</h3><ul><li>动态分区分配<ul><li>当程序被加载执行时，分配一个进程指定大小可变的分区(块、内存块)</li><li>分区的地址是连续的</li></ul></li><li>操作系统需要维护的数据结构<ul><li>所有进程的已分配分区</li><li>空闲分区(Empty-blocks)</li></ul></li><li>动态分区分配策略<ul><li>最先匹配(First-fit)</li><li>最佳匹配(Best-fit)</li><li>最差匹配(Worst-fit)</li></ul></li></ul><h3 id="最先匹配-First-Fit-Allocation-策略"><a href="#最先匹配-First-Fit-Allocation-策略" class="headerlink" title="最先匹配(First Fit Allocation)策略"></a>最先匹配(First Fit Allocation)策略</h3><ul><li>思路：分配 n 个字节，使用功能第一个可用的空间比 n 大的空闲块</li><li>原理 &amp; 实现<ul><li>空闲分区列表按地址顺序排序</li><li>分配过程中，搜索一个合适的分区</li><li>释放分区时，检查是都可与临近的空闲分区合并</li></ul></li><li>优点<ul><li>简单</li><li>在高地址空间有大块的空闲分区</li></ul></li><li>缺点<ul><li>外部碎片</li><li>分配大块时较慢</li></ul></li></ul><h3 id="最佳匹配-Best-Fit-Allocation-策略"><a href="#最佳匹配-Best-Fit-Allocation-策略" class="headerlink" title="最佳匹配(Best Fit Allocation)策略"></a>最佳匹配(Best Fit Allocation)策略</h3><ul><li>思路：分配 n 字节分区时，查找并使用不小于 n 的最小空闲分区</li><li>原理 &amp; 实现<ul><li>空闲分区列表按照大小排序</li><li>分配时，查找一个合适的分区</li><li>释放时，查找并且合并临近的空闲分区(如果找到)</li></ul></li><li>优点<ul><li>大部分分配的尺寸较小时，效果很好<ul><li>可避免大的空闲分区被拆分</li><li>可减少外部碎片的大小</li><li>相对简单</li></ul></li></ul></li><li>缺点<ul><li>外部碎片</li><li>释放分区比较慢</li><li>容易产生很多无用的小碎片</li></ul></li></ul><h3 id="最差匹配-Worst-Fit-Allocation-策略"><a href="#最差匹配-Worst-Fit-Allocation-策略" class="headerlink" title="最差匹配(Worst Fit Allocation)策略"></a>最差匹配(Worst Fit Allocation)策略</h3><ul><li>思路：分配 n 字节，使用尺寸不小于 n 的最大空闲分区</li><li>原理 &amp; 实现<ul><li>空闲分区列表按由大到小排序</li><li>分配时，选最大的分区</li><li>释放时，检查是否可与临近的空闲分区合并，进行可能的合并，并调整空闲分区列表顺序</li></ul></li><li>优点<ul><li>中等大小的分配比较多时，效果最好</li><li>避免出现太多的小碎片</li></ul></li><li>缺点<ul><li>释放分区较慢</li><li>外部碎片</li><li>容易破坏大的空闲分区，因此后续难以分配大的分区</li></ul></li></ul><h3 id="碎片整理：紧凑-compaction"><a href="#碎片整理：紧凑-compaction" class="headerlink" title="碎片整理：紧凑( compaction )"></a>碎片整理：紧凑( compaction )</h3><ul><li>碎片整理<ul><li>通过调整进程占用的分区位置来减少或避免分区碎片</li></ul></li><li>碎片紧凑<ul><li>通过移动分配给进程的内存分区，以合并外部碎片</li><li>碎片紧凑的条件：所有的应用程序可动态重定位</li><li>需要解决的问题：<ul><li>什么时候移动？</li><li>开销</li></ul></li></ul></li></ul><h3 id="碎片整理：分区兑换-Swapping-in-out"><a href="#碎片整理：分区兑换-Swapping-in-out" class="headerlink" title="碎片整理：分区兑换( Swapping in/out )"></a>碎片整理：分区兑换( Swapping in/out )</h3><ul><li>通过抢占并回收处于等待状态进程的分区，以增大可用内存空间</li><li>需要解决的问题<ul><li>交换哪个(些)程序？</li></ul></li></ul><h3 id="伙伴系统-Buddy-System"><a href="#伙伴系统-Buddy-System" class="headerlink" title="伙伴系统( Buddy System )"></a>伙伴系统( Buddy System )</h3><ul><li>整个可分配的分区大小 2<sup>U</sup></li><li>需要的分区大小为 2<sup>U-1</sup> &lt; s &lt;= 2<sup>U</sup> 时，把整个块分配给该进程<ul><li>如 s &lt;= 2<sup>i-1</sup> ，将大小为 2<sup>i</sup> 的当前空闲分区划分成两个大小为 2<sup>i-1</sup> 的空闲分区</li><li>重复划分过程，直到 2<sup>i-1</sup> &lt; s &lt;= 2<sup>i</sup> ，并把一个空闲分区分配给该进程</li></ul></li></ul><h3 id="伙伴系统的实现"><a href="#伙伴系统的实现" class="headerlink" title="伙伴系统的实现"></a>伙伴系统的实现</h3><ul><li>数据结构<ul><li>空闲块按大小和起始地址组织成二维数组</li><li>初始状态：只有一个大小为 2<sup>U</sup> 的空闲块</li></ul></li><li>分配过程<ul><li>由小到大在空闲块数组中找最小的可用空闲块</li><li>如空闲块过大，对可用空闲块进行二等分，知道得到合适的可用空闲块</li></ul></li><li>释放过程<ul><li>把释放的块放入空闲块数组</li><li>合并满足合并条件的空闲块</li></ul></li><li>合并条件<ul><li>大小相同 2<sup>i</sup></li><li>地址相邻</li><li>起始地址较小的块的起始地址必须是 2^(i+1) 的倍数</li></ul></li></ul><h1 id="物理内存管理：非连续内存分配"><a href="#物理内存管理：非连续内存分配" class="headerlink" title="物理内存管理：非连续内存分配"></a>物理内存管理：非连续内存分配</h1><h3 id="非连续分配的设计目标"><a href="#非连续分配的设计目标" class="headerlink" title="非连续分配的设计目标"></a>非连续分配的设计目标</h3><ul><li>连续分配的缺点<ul><li>分配给程序的物理内存必须连续</li><li>存在外碎片和内碎片</li><li>内存分配的动态修改困难</li><li>内存利用率较低</li></ul></li><li>非连续分配的设计目标：提高内存利用效率和管理灵活性<ul><li>允许一个程序的使用非连续的物理地址空间</li><li>允许共享代码与数据</li><li>支持动态加载和动态链接</li></ul></li><li>非连续分配需要解决的问题<ul><li>如何实现虚拟地址和物理地址的转换?<ul><li>软件实现 (灵活，开销大)</li><li>硬件实现 (够用，开销小)</li></ul></li></ul></li><li>非连续分配的硬件辅助机制<ul><li>如何选择非连续分配中的内存分块大小？<ul><li>段式存储管理( segmentation )</li><li>页式存储管理( paging )</li></ul></li></ul></li></ul><h3 id="段地址空间"><a href="#段地址空间" class="headerlink" title="段地址空间"></a>段地址空间</h3><ul><li>进程的段地址空间由多个段组成<ul><li>主代码段</li><li>子模块代码段</li><li>公用库代码段</li><li>堆栈段( stack )</li><li>堆数据( heap )</li><li>初始化数据段</li><li>符号表等</li></ul></li><li>段式存储管理的目的<ul><li>更细粒度和灵活的分离与共享</li></ul></li></ul><h3 id="段访问机制"><a href="#段访问机制" class="headerlink" title="段访问机制"></a>段访问机制</h3><ul><li>段的概念<ul><li>段表示访问方式和存储数据等属性相同的一段地址空间</li><li>对应一个连续的内存”块”</li><li>若干个段组成进程逻辑地址空间</li></ul></li><li>段访问：逻辑地址由二元组 (s,addr) 表示<ul><li>s: 段号</li><li>addr: 段内偏移</li></ul></li></ul><h3 id="页式存储管理"><a href="#页式存储管理" class="headerlink" title="页式存储管理"></a>页式存储管理</h3><ul><li>页帧(帧，物理页面，Frame，Page Frame)</li><li>页面(页，逻辑页面，Page)</li><li>页面到页帧<ul><li>逻辑地址到物理地址的转换</li><li>页表</li><li>MMU/TLB</li></ul></li></ul><h3 id="帧-Frame"><a href="#帧-Frame" class="headerlink" title="帧( Frame )"></a>帧( Frame )</h3><ul><li>物理内存被划分成大小相等的帧，内存物理地址的表示：二元组 (f,o)<br>f: 帧号( F 位，共有 2<sup>F</sup> 个帧)<br>o: 帧内偏移 ( S 位，每帧有 2<sup>S</sup> 字节)<br>物理地址 = f * 2<sup>S</sup> + o</li><li>基于页帧的物理地址计算实例<ul><li>假定<ul><li>16-bit 的地址空间</li><li>9-bit (512 byte) 大小的页帧</li></ul></li><li>物理地址计算<ul><li>物理地址表示 = (3, 6)</li><li>物理地址 = f * 2<sup>S</sup> + o</li><li><img src="http://qnya.pomo16.club/49.png" alt><br>F = 7，S = 9，f = 3，o = 6</li></ul></li><li>实际物理地址 = 2^9 * 3 + 6 = 1536 + 6 = 1542</li></ul></li></ul><h3 id="页-Page"><a href="#页-Page" class="headerlink" title="页( Page )"></a>页( Page )</h3><ul><li>进程逻辑地址空间被划分为大小相等的页<ul><li>页内偏移 = 帧内偏移</li><li>通常：页号大小 ≠ 帧号大小</li><li>进程逻辑地址的表示：二元组 (p, o)<br>p: 页号 ( P 位，2<sup>P</sup> 个页)<br>o: 页内偏移 ( S 位，每页有 2<sup>S</sup> 字节)<br>虚拟地址 = p * 2<sup>S</sup> + o</li></ul></li><li>页式存储中的地址映射<ul><li>页到帧的映射</li><li>逻辑地址中的页号是连续的</li><li>物理地址中的帧号是不连续的</li><li>不是所有的页都有对应的帧</li></ul></li></ul><h3 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h3><ul><li>页表概述<ul><li>页表保存了逻辑地址与物理地址之间的映射关系</li></ul></li><li>页表结构<ul><li>每个进程都有一个页表<ul><li>每个页面对应一个页表项</li><li>随进程运行状态而动态变化</li><li>页表基址寄存器( PTBR: Page Table Base Register )</li></ul></li><li>页表项的组成<ul><li>帧号：f</li><li>页表项状态<ul><li>存在位( register bit )</li><li>修改位( dirty bit )</li><li>引用位( clock/reference bit )</li></ul></li></ul></li></ul></li><li>页式存储管理机制的性能问题<ul><li>内存访问性能问题<ul><li>访问一个内存单元需要2次内存访问</li><li>第一次访问：获取页表项</li><li>第二次访问：访问数据</li></ul></li><li>页表大小问题<ul><li>页表可能非常大</li><li>64位机器如果每页1024字节，那么一个页表的大小会是多少</li></ul></li><li>如何处理？<ul><li>缓存 ( Caching )</li><li>间接 ( Indirection ) 访问</li></ul></li></ul></li></ul><h3 id="解决页表问题"><a href="#解决页表问题" class="headerlink" title="解决页表问题"></a>解决页表问题</h3><ul><li>快表 ( Translation Look-aside Buffer, TLB )<ul><li>缓存近期访问的页表项<ul><li>TLB 使用关联存储 ( association memory ) 实现，具备快速访问性能</li><li>如果 TLB 命中，物理页号可以很快被获取</li><li>如果 TLB 未命中，对应的表项被更新到 TLB 中</li></ul></li></ul></li><li>多级页表<ul><li>通过间接引用将页号分成 k 级<ul><li>建立页表”树”</li><li>减少每级页表的长度</li></ul></li></ul></li><li>反置页表<ul><li>大地址空间问题<ul><li>对于大地址空间 ( 64-bits ) 系统，多级页表变得繁琐<ul><li>比如：5级页表</li><li>逻辑(虚拟)地址空间增长速度快于物理地址空间</li></ul></li><li>页寄存器和反置页面的思路<ul><li>不让页表与逻辑地址空间的大小相对应</li><li>让页表与物理地址空间的大小相对应</li></ul></li></ul></li><li>页寄存器( Page Registers )<ul><li>每个帧与一个页寄存器( Page Register )关联，寄存器内容包括：<ul><li>使用位( Register bit )：此帧是否被进程占用</li><li>占用页号( Occupier )：对应的页号 p</li><li>保护位 ( Protection bits )</li></ul></li><li>页寄存器示例<ul><li>物理内存大小：4096 <em> 4096 = 4 K </em> 4 KB = 16 MB</li><li>页面大小：4096 bytes = 4 KB</li><li>页帧数：4096 = 4 K</li><li>页寄存器使用的空间(假设每个页寄存器占8字节)：8 * 4096 = 32 Kbytes</li><li>页寄存器带来的额外开销：32K / 16M = 0.2%(大约)</li><li>虚拟内存的大小：任意</li></ul></li><li>页寄存器方案特征<ul><li>优点<ul><li>页表大小相对于物理内存而言很小</li><li>页表大小与逻辑地址空间大小无关</li></ul></li><li>缺点<ul><li>页表信息对调后，需要依据帧号可找页号</li><li>在页寄存器中搜索逻辑地址中的页号</li></ul></li></ul></li><li>页寄存器中的地址转换<ul><li>CPU 生成的逻辑地址如何找对应的物理地址？<ul><li>对逻辑地址进行 Hash 映射，以减少搜索范围</li><li>需要解决可能的冲突</li></ul></li><li>用快表缓存页表项后的页寄存器搜索步骤<ul><li>对逻辑地址进行 Hash 变换</li><li>在快表中查找对应页表项</li><li>有冲突时遍历冲突项链表</li><li>查找失败时，产生异常</li></ul></li><li>快表的限制<ul><li>快表的容量限制</li><li>快表的功耗限制( StrongARM 上快表功耗占 27% )</li></ul></li></ul></li></ul></li><li>反置页表<ul><li>基于 Hash 映射值查找对应页表项中的帧号<ul><li>进程标识与页号的 Hash 值可能有冲突</li><li>页表项中包括保护位、修改位、访问位和存在位等标识</li></ul></li><li>反置页表的 Hash 冲突</li></ul></li></ul></li></ul><h3 id="段页式存储管理"><a href="#段页式存储管理" class="headerlink" title="段页式存储管理"></a>段页式存储管理</h3><ul><li>需求<ul><li>段式存储在内存保护方面有优势，页式存储在内存利用和优化转移到后备存储方面有优势。</li><li>段式存储，页式存储能否结合？</li></ul></li><li>做法<ul><li>在段式存储管理基础上，给每个段加一级页表</li></ul></li><li>段页式存储管理中的内存共享<ul><li>通过指向相同的页表基址，实现进程间的段共享</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统（一）</title>
      <link href="/2019/03/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/03/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h1><h3 id="什么是操作系统？"><a href="#什么是操作系统？" class="headerlink" title="什么是操作系统？"></a>什么是操作系统？</h3><p>没有公认定义，可以理解为起协助作用的控制程序，或者是介于软硬件之间的资源管理器。</p><h3 id="操作系统软件组成"><a href="#操作系统软件组成" class="headerlink" title="操作系统软件组成"></a>操作系统软件组成</h3><ol><li>Shell 命令行接口<ul><li>通过键盘操纵</li><li>方便用户进行命令输入</li></ul></li><li>GUI 图形用户接口<ul><li>WIMP<br>视窗（windows）、t图标（icon）、选单（menu）、指标（pointer）</li><li>直接操作、所见即所得</li></ul></li><li>Kernel 操作系统内核<ul><li>执行各种资源管理等功能</li></ul></li></ol><h3 id="操作系统内核"><a href="#操作系统内核" class="headerlink" title="操作系统内核"></a>操作系统内核</h3><ul><li>并发：计算机系统中同时存在多个运行的程序，需要 OS 管理和调度</li><li>共享：“同时”访问（宏观），互斥共享（微观：对资源进行隔离保护）</li><li>虚拟：高频率交替（多道程序设计技术），使用户感觉在专用系统</li><li>异步：程序执行时间难于预测，运行环境相同时，OS 需要保证输出结果相同</li></ul><h3 id="系统类型"><a href="#系统类型" class="headerlink" title="系统类型"></a>系统类型</h3><ol><li>UNIX(开放)：UNIX BSD、Mac OS等</li><li>Linux(与 UNIX 同一类,API 兼容或类似，开放程度更完整)：Ubuntu、安卓等</li><li>Windows(专用和封闭，图形用户接口，易用) </li></ol><h3 id="操作系统主要功能：硬件抽象和协调管理"><a href="#操作系统主要功能：硬件抽象和协调管理" class="headerlink" title="操作系统主要功能：硬件抽象和协调管理"></a>操作系统主要功能：硬件抽象和协调管理</h3><h3 id="操作系统的演变"><a href="#操作系统的演变" class="headerlink" title="操作系统的演变"></a>操作系统的演变</h3><ul><li>单用户系统</li><li>批处理系统</li><li>多程序系统</li><li>分时</li><li>个人计算机：每个用户一个系统</li><li>分布式计算：每个用户多个系统</li></ul><h3 id="操作系统结构"><a href="#操作系统结构" class="headerlink" title="操作系统结构"></a>操作系统结构</h3><ol><li>简单结构：无模块划分，主要汇编，不可移植</li><li>分层结构：<ul><li>将操作系统分为多层（levels）<ul><li>每层建立在底层之上</li><li>最底层（layer 0）是硬件</li><li>最高层（layer N）是用户界面</li></ul></li><li>每一层仅使用更低一层的功能（操作）和服务</li></ul></li><li>微内核结构（Microkernel）:<ul><li>尽可能把内核功能移到用户空间</li><li>用户模块间的通信使用消息传递</li><li>好处：灵活、安全</li><li>缺点：性能</li></ul></li><li>外核结构（Exokernel）:<ul><li>内核少放东西，资源管理由应用态代码完成，一个系统支起不同的操作系统服务</li><li>让内核分配机器的物理资源给多个应用程序，并让每个程序决定如何处理这些资源</li><li>程序能链接到操作系统库（libOS）实现了操作系统抽象</li><li>保护和控制隔离</li></ul></li><li>VMM（虚拟机管理器，非操作系统结构）:<ul><li>负责和硬件接触（隔离资源），操作系统负责资源管理</li><li>虚拟机管理器将单独的机器接口转换成很多的虚拟机，每个虚拟机都是一个原始计算机系统的有效副本，并能完成所有的处理器指令</li></ul></li></ol><h3 id="对于主流操作系统的结构分析"><a href="#对于主流操作系统的结构分析" class="headerlink" title="对于主流操作系统的结构分析"></a>对于主流操作系统的结构分析</h3><ul><li><p>Windows<br>Windows 属于比较接近微内核的混合内核结构，这样的结构有一个特点，那就是驱动是单独分发的，并不会和 Windows 的微内核混合在一起。因此，其驱动配置比较简单，无需改动 Windows 内核代码。</p></li><li><p>Linux<br>Linux 是一个宏内核的结构，在保留了微内核结构优点的基础上进行了优化。Linux 的驱动和内核是整合在一起的，要适配某种硬件，得把驱动都整合进 Linux 内核。它是模块化的、多线程的以及内核本身可调度的操作系统。Linux 仅仅是一个单块内核，单个内核负责管理 CPU、内存、进程间通信、设备驱动程序、文件系统和系统服务器调用。</p></li><li><p>Mac OS<br>Mac OS 的内核（XNU）结合了微内核（Mach）和单片内核的（BSD）的特性。根据苹果公司的 Github 页面，XNU 是将卡耐基梅隆大学开发的 Mach 内核和 FreeBSD 组件整合而成的混合内核，加上用于编写驱动程序的 C++ API。代码的 BSD 子系统部分在微内核系统中，通常实现为用户空间的服务。Mach 部分负责底层工作，例如多任务、内存保护、虚拟内存管理、内核调试支持和控制台 I/O。</p></li></ul><h1 id="启动、中断、异常和系统调用"><a href="#启动、中断、异常和系统调用" class="headerlink" title="启动、中断、异常和系统调用"></a>启动、中断、异常和系统调用</h1><h3 id="BIOS启动固件"><a href="#BIOS启动固件" class="headerlink" title="BIOS启动固件"></a>BIOS启动固件</h3><p>基本功能：</p><ul><li>基本输入输出的程序</li><li>系统设置信息</li><li>开机后自检程序</li><li>系统自启程序等</li></ul><p>BIOS 系统调用：</p><ul><li>BIOS 以中断调用的方式提供了基本的 I/O 功能<ul><li>INT 10h：字符显示</li><li>INT 13h：磁盘扇区读写</li><li>INT 15h：检测内存大小</li><li>INT 16h：键盘输入</li></ul></li><li>只能在 x86 的实模式下访问</li></ul><h3 id="系统启动流程"><a href="#系统启动流程" class="headerlink" title="系统启动流程"></a>系统启动流程</h3><p><img src="http://qnya.pomo16.club/45.png" alt></p><ol><li>CPU 初始化<ul><li>CPU 加电稳定后从 0XFFFF0 读第一条指令<ul><li>CS:IP = 0xf000:fff0</li><li>第一条指令是跳转指令</li></ul></li><li>CPU 初始状态为16位实模式<ul><li>CS:IP 是16位寄存器</li><li>指令指针 PC = 16 * CS + IP</li><li>最大地址空间是 1MB</li></ul></li></ul></li><li>BIOS 初始化<ul><li>硬件自检 POST</li><li>检测系统中内存和显卡等关键部件的存在和工作状态</li><li>查找并执行显卡等接口卡 BIOS ，进行设备初始化</li><li>执行系统 BIOS ，进行系统检测，检测和配置系统中安装的即插即用设备</li><li>更新 CMOS 中的扩展系统配置数据 ESCD</li><li>按指定启动顺序从软盘、硬盘或光驱启动</li></ul></li><li>主引导记录 MBR 格式<ul><li>启动代码：446字节<ul><li>检查分区表正确性</li><li>加载并跳转到磁盘上的引导程序</li></ul></li><li>硬盘分区表：64字节<ul><li>描述分区状态和位置</li><li>每个分区描述信息占据16字节</li></ul></li><li>结束标志字：2字节 (55AA)<ul><li>主引导记录的有效标志</li></ul></li></ul></li><li>分区引导扇区格式<ul><li>跳转指令：跳转到启动代码<ul><li>与平台相关代码</li></ul></li><li>文件卷头：文件系统描述信息</li><li>启动代码：跳转到加载程序</li><li>结束标志：55AA</li></ul></li><li>加载程序(bootloader)</li></ol><h3 id="系统启动规范"><a href="#系统启动规范" class="headerlink" title="系统启动规范"></a>系统启动规范</h3><ul><li>BIOS<ul><li>固化到计算机主板上的程序</li><li>包括系统设置、自检程序和系统自启动程序</li><li>BIOS-MBR、BIOS-GPT、PXE</li></ul></li><li>UEFI<ul><li>接口标准</li><li>在所有平台上一致的操作系统启动服务</li></ul></li></ul><h3 id="中断、异常和系统调用"><a href="#中断、异常和系统调用" class="headerlink" title="中断、异常和系统调用"></a>中断、异常和系统调用</h3><ul><li>系统调用 (system call)<ul><li>应用程序主动向操作系统发出的服务请求</li></ul></li><li>异常<ul><li>非法指令或者其他原因导致当前指令执行失败 (如：内存出错)后的处理请求</li></ul></li><li>中断<ul><li>来自硬件设备的处理请求</li></ul></li><li>区别：<ul><li>源头<ul><li>中断：外设</li><li>异常：应用程序意想不到的行为</li><li>系统调用：应用程序请求操作提供服务</li></ul></li><li>响应方式<ul><li>中断：异步</li><li>异常：同步</li><li>系统调用：同步或异步</li></ul></li><li>处理机制<ul><li>中断：持续，对用户应用程序是透明的</li><li>异常：杀死或者重新执行意想不到的应用程序指令</li><li>系统调用：等待和持续</li></ul></li></ul></li></ul><h3 id="中断处理机制"><a href="#中断处理机制" class="headerlink" title="中断处理机制"></a>中断处理机制</h3><ul><li>硬件处理<ul><li>在 CPU 初始化时设置中断使能的标志<ul><li>依据内部或外部事件设置中断标志</li><li>依据中断向量调用相应中断的服务例程</li></ul></li></ul></li><li>软件<ul><li>现场保存(编译器)</li><li>中断服务处理(服务例程)</li><li>清除中断标记(服务例程)</li><li>现场恢复(编译器)</li></ul></li><li>中断嵌套<ul><li>硬件中断服务例程可被打断<ul><li>不同硬件中断源可能硬件中断处理时出现</li><li>硬件中断服务例程中需要临时禁止中断请求</li><li>中断请求会保持到 CPU 做出响应</li></ul></li><li>异常处理例程可被打断<ul><li>异常服务例程执行时可能出现硬件中断</li></ul></li><li>异常服务例程可嵌套<ul><li>异常服务例程可能出现缺页</li></ul></li></ul></li></ul><h3 id="系统调用的外界使用"><a href="#系统调用的外界使用" class="headerlink" title="系统调用的外界使用"></a>系统调用的外界使用</h3><ul><li>操作系统服务的编程接口</li><li>通常由高级语言编写 (C 或者 C++)</li><li>程序访问通常是通过高层次的 API 接口而不是直接进行系统调用</li><li>三种最常用的应用程序编程接口 (API)<ul><li>Win32 API 用于 Windows</li><li>POSIX API 用于 POSIX-based systems (包括 UNIX, LINUX, Mac OS X的所有版本)</li><li>Java API 用于 JAVA 虚拟机 (JVM)</li></ul></li></ul><h3 id="系统调用的内部实现"><a href="#系统调用的内部实现" class="headerlink" title="系统调用的内部实现"></a>系统调用的内部实现</h3><ul><li>每个系统调用对应一个系统调用号<ul><li>系统调用接口根据系统调用号来维护表的索引</li></ul></li><li>系统调用接口调用内核态中的系统调用功能实现，并返回系统调用的状态和结果</li><li>用户不需要知道系统调用的实现<ul><li>需要设置调用参数和获取返回结果</li><li>操作系统接口的细节大部分都隐藏在应用编程接口后<ul><li>通过运行程序支持的库来管理</li></ul></li></ul></li></ul><h3 id="函数调用和系统调用的不同处"><a href="#函数调用和系统调用的不同处" class="headerlink" title="函数调用和系统调用的不同处"></a>函数调用和系统调用的不同处</h3><ul><li>系统调用<ul><li>INT 和 IRET 指令用于系统调用<ul><li>系统调用时，堆栈切换和特权级的转换</li></ul></li></ul></li><li>函数调用<ul><li>CALL 和 RET 用于常规调用<ul><li>常规调用时没有堆栈切换</li></ul></li></ul></li></ul><h3 id="中断、异常和系统调用的开销"><a href="#中断、异常和系统调用的开销" class="headerlink" title="中断、异常和系统调用的开销"></a>中断、异常和系统调用的开销</h3><p>系统调用比函数调用更安全，但是系统调用的开销超过函数调用。<br>中断、异常和系统调用具体开销：</p><ul><li>引导机制</li><li>建立内核堆栈</li><li>验证参数</li><li>内核态映射到用户态的地址空间<ul><li>更新页面映射权限</li></ul></li><li>内核态独立地址空间<ul><li>TLB</li></ul></li></ul><h3 id="内存层次"><a href="#内存层次" class="headerlink" title="内存层次"></a>内存层次</h3><p><img src="http://qnya.pomo16.club/46.png" alt></p><h3 id="操作系统的内存管理"><a href="#操作系统的内存管理" class="headerlink" title="操作系统的内存管理"></a>操作系统的内存管理</h3><p><img src="http://qnya.pomo16.club/47.png" alt></p><h3 id="操作系统的内存管理方式"><a href="#操作系统的内存管理方式" class="headerlink" title="操作系统的内存管理方式"></a>操作系统的内存管理方式</h3><ul><li>操作系统中采用的内存管理方式<ul><li>重定位 ( relocation )</li><li>分段 ( segmentation )</li><li>分页 ( paging )</li><li>虚拟存储 ( virtual memory )<ul><li>目前多数系统(如 Linux )采用按需页式虚拟存储</li></ul></li></ul></li><li>实现高度依赖硬件<ul><li>与计算机存储架构紧耦合</li><li>MMU(内存管理单元)：处理 CPU 存储访问请求的硬件</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSR-303校验</title>
      <link href="/2019/03/15/JSR303%E6%A0%A1%E9%AA%8C/"/>
      <url>/2019/03/15/JSR303%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="JSR"><a href="#JSR" class="headerlink" title="JSR"></a>JSR</h2><p>JSR是Java Specification Requests的缩写，意思是Java 规范提案。</p><h2 id="JSR-303"><a href="#JSR-303" class="headerlink" title="JSR-303"></a>JSR-303</h2><p>JSR-303 是 JAVA EE 6 中的一项子规范，叫做 Bean Validation，Hibernate Validator 是 Bean Validation 的参考实现 . Hibernate Validator 提供了 JSR 303 规范中所有内置 constraint 的实现，除此之外还有一些附加的 constraint。</p><h3 id="Bean-Validation-中内置的-constraint"><a href="#Bean-Validation-中内置的-constraint" class="headerlink" title="Bean Validation 中内置的 constraint"></a>Bean Validation 中内置的 constraint</h3><table><thead><tr><th style="text-align:left"><strong>Constraint</strong></th><th style="text-align:left"><strong>详细信息</strong></th></tr></thead><tbody><tr><td style="text-align:left"><code>@Null</code></td><td style="text-align:left">被注释的元素必须为 <code>null</code></td></tr><tr><td style="text-align:left"><code>@NotNull</code></td><td style="text-align:left">被注释的元素必须不为 <code>null</code></td></tr><tr><td style="text-align:left"><code>@AssertTrue</code></td><td style="text-align:left">被注释的元素必须为 <code>true</code></td></tr><tr><td style="text-align:left"><code>@AssertFalse</code></td><td style="text-align:left">被注释的元素必须为 <code>false</code></td></tr><tr><td style="text-align:left"><code>@Min(value)</code></td><td style="text-align:left">被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td style="text-align:left"><code>@Max(value)</code></td><td style="text-align:left">被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td style="text-align:left"><code>@DecimalMin(value)</code></td><td style="text-align:left">被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td style="text-align:left"><code>@DecimalMax(value)</code></td><td style="text-align:left">被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td style="text-align:left"><code>@Size(max, min)</code></td><td style="text-align:left">被注释的元素的大小必须在指定的范围内</td></tr><tr><td style="text-align:left"><code>@Digits (integer, fraction)</code></td><td style="text-align:left">被注释的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td style="text-align:left"><code>@Past</code></td><td style="text-align:left">被注释的元素必须是一个过去的日期</td></tr><tr><td style="text-align:left"><code>@Future</code></td><td style="text-align:left">被注释的元素必须是一个将来的日期</td></tr><tr><td style="text-align:left"><code>@Pattern(value)</code></td><td style="text-align:left">被注释的元素必须符合指定的正则表达式</td></tr></tbody></table><h3 id="Hibernate-Validator-附加的-constraint"><a href="#Hibernate-Validator-附加的-constraint" class="headerlink" title="Hibernate Validator 附加的 constraint"></a>Hibernate Validator 附加的 constraint</h3><table><thead><tr><th style="text-align:left"><strong>Constraint</strong></th><th style="text-align:left"><strong>详细信息</strong></th></tr></thead><tbody><tr><td style="text-align:left"><code>@Email</code></td><td style="text-align:left">被注释的元素必须是电子邮箱地址</td></tr><tr><td style="text-align:left"><code>@Length</code></td><td style="text-align:left">被注释的字符串的大小必须在指定的范围内</td></tr><tr><td style="text-align:left"><code>@NotEmpty</code></td><td style="text-align:left">被注释的字符串的必须非空</td></tr><tr><td style="text-align:left"><code>@Range</code></td><td style="text-align:left">被注释的元素必须在合适的范围内</td></tr></tbody></table><h2 id="自定义-constraint"><a href="#自定义-constraint" class="headerlink" title="自定义 constraint"></a>自定义 constraint</h2><p>有时无论是原配的 constraint 还是 Hibernate Validator 附加的 constraint 都不满足我们的实际生产需求。这时候我们就需要自己定义属于自己的 constraint。</p><p><strong>以验证这不是个纯数字的字符串为例。</strong></p><p>面对这个需求我们首先会想到使用 Bean Validation 的 <code>@Pattern(value)</code>并结合正则表达式来解决，在 js 中，我们使用该逻辑的正则表达式很简单：<code>!/^\d+$/</code>。但是在 JSR 303 中，对于<code>@Pattern(value)</code>，我们无法做非逻辑处理。因此，这时候我们就很有必要定义自己的 constraint 来满足需求。</p><p>自定义 constraint 的步骤如下：</p><ol><li><p>定义验证标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy = &#123; IsNotNumValidator.class &#125;)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.FIELD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IsNotNum &#123;</span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "这不是一个纯数字！"</span>;</span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义标签所依赖的验证逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidatorContext;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsNotNumValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">IsNotNum</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(IsNotNum isNotNum)</span> </span>&#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String str, ConstraintValidatorContext ctx)</span> </span>&#123;</span><br><span class="line"> Pattern pattern = Pattern.compile(<span class="string">"^\\d+$"</span>);</span><br><span class="line"> <span class="keyword">return</span> !pattern.matcher(str).matches();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 Java Bean 中使用自定义的 constraint</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IsNotNum</span>(message=<span class="string">"用户名不能是纯数字，请重新输入！"</span>)</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br></pre></td></tr></table></figure><p>这里可以不使用默认的 message。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器搭建ss</title>
      <link href="/2019/02/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAss/"/>
      <url>/2019/02/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAss/</url>
      
        <content type="html"><![CDATA[<h2 id="选服务器"><a href="#选服务器" class="headerlink" title="选服务器"></a>选服务器</h2><p>在 Deploy new server 中配置服务器。</p><ul><li><p>Server Location</p><p><img src="http://qnya.pomo16.club/37.png" alt></p><p>​    选服务器的地址要结合 Server Size 进行选择，因为有一些地方的 3.5 刀/月的被选完了，vultr 是过一段时间放一批 3.5 刀/月这样的。 3.5 刀/月是最划算的，2.5刀/月的因为国内 ipv6 普及堪忧，所以不建议选取。另外，日本的不建议选取，经常被封，其他地方都是随缘但概率比日本低。新加坡最近好像也沦陷了…好像…</p></li></ul><ul><li><p>Server Type</p><p><img src="http://qnya.pomo16.club/38.png" alt></p><p>​    这里选的是服务器的操作系统，这里使用默认的 centos 7 就可以了。</p></li></ul><ul><li><p>Server Size</p><p><img src="http://qnya.pomo16.club/39.png" alt></p><p>​    这里结合 Server Location 选 3.5刀/月比较实惠，2.5刀/月可能要等 ipv6 普及（广东还没有…）。</p></li></ul><ul><li><p>Additional Features</p><p><img src="http://qnya.pomo16.club/40.png" alt></p><p>​    额外参数第一项可选可不选，视是否需要 ipv6 。第四项选上比较好，方便 putty 等远程 ssh 软件连    接，忘记选上也不要紧，日后在 settings 可以改。至此，所以参数配置完毕，deploy 就可以。</p></li></ul><h2 id="测试是否被墙"><a href="#测试是否被墙" class="headerlink" title="测试是否被墙"></a>测试是否被墙</h2><p>​    在选完服务器之后先不用急着搭建 ss ，先看这个 IP 能不能用。在选完服务器之后会跳转到控制台页面，并显示新的机器在 installing。</p><p><img src="http://qnya.pomo16.club/41.png" alt></p><p><img src="http://qnya.pomo16.club/42.png" alt></p><p>​    这里安装可能会花几分钟，不过一般没安装完就会分配 IP 的，这时候先看这个 IP 有没有被墙。测试方法是使用 <a href="http://coolaf.com/tool/port" target="_blank" rel="noopener">国内端口扫描测试</a> ，如果扫描结果是开放就证明没有被墙，关闭则表明 gg。一般测试 22 端口就够了</p><p><img src="http://qnya.pomo16.club/43.png" alt></p><p>​    如果被关闭的话就就直接关掉服务器，换个地方开一台新的，它是按使用时间收费的，随便开关。也可以同一个地方过一阵再开，因为同一个地方马上开关大概率抽到同一个 ip。</p><h2 id="搭建ss"><a href="#搭建ss" class="headerlink" title="搭建ss"></a>搭建ss</h2><p>​    在确认服务器在国内端口扫描结果为开放之后，就可以开始搭建 ss 了。通过控制台控制服务器，在 windows  上可以使用 putty 软件，在 mac 上可以使用一个叫 terminus 的软件连接。连接方式都差不多，填 ip ，端口选 22。如果不想下软件也可以用自带的，不过就是它好像不能复制粘贴，就很麻烦。</p><p><img src="http://qnya.pomo16.club/44.png" alt></p><p>连接成功之后依次在控制台执行以下指令：</p><ul><li><p>下载 shadowsocks </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br></pre></td></tr></table></figure></li><li><p>赋予文件权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x shadowsocks.sh</span><br></pre></td></tr></table></figure></li><li><p>开始配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure><p>按照提示依次配置密码，端口(建议 10000~65535 中选一个值，不过还没见过有冲突的，按提示用默认的也可以)，加密方式，然后等几分钟配置。</p></li></ul><h2 id="Additionally"><a href="#Additionally" class="headerlink" title="Additionally"></a>Additionally</h2><p>​    Vultr 因为用的人很多，经常被封，可以物色一下其他的海外服务器供应商，本文的配置方法适用于所有服务器。然后附上 Vultr 中文网上判断是否被墙的方法 <a href="https://www.vultrcn.com/4.html。" target="_blank" rel="noopener">https://www.vultrcn.com/4.html。</a></p><h3 id="一些-shadowsocks-常用指令"><a href="#一些-shadowsocks-常用指令" class="headerlink" title="一些 shadowsocks 常用指令"></a>一些 shadowsocks 常用指令</h3><ul><li><p>重启 ss</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/shadowsocks restart</span><br></pre></td></tr></table></figure></li><li><p>开启 ss</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/shadowsocks start</span><br></pre></td></tr></table></figure></li><li><p>停止 ss</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/shadowsocks stop</span><br></pre></td></tr></table></figure></li><li><p>查看 ss 状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/shadowsocks status</span><br></pre></td></tr></table></figure></li></ul><h2 id="BBR-加速"><a href="#BBR-加速" class="headerlink" title="BBR 加速"></a>BBR 加速</h2><p>​    TCP BBR 是谷歌出品的 TCP 拥塞控制算法。BBR 目的是要尽量跑满带宽，并且尽量不要有排队的情况。BBR 可以起到单边加速 TCP 连接的效果。Google 提交到 Linux 主线并发表在 ACM queue 期刊上的 TCP-BBR 拥塞控制算法。继承了 Google “先在生产环境上部署，再开源和发论文”的研究传统。TCP-BBR 已经再 YouTube 服务器和 Google 跨数据中心的内部广域网( B4 )上部署。由此可见出该算法的前途。TCP-BBR 的目标就是最大化利用网络上瓶颈链路的带宽。一条网络链路就像一条水管，要想最大化利用这条水管，最好的办法就是给这跟水管灌满水。</p><p>BBR 解决了两个问题：</p><ul><li>在有一定丢包率的网络链路上充分利用带宽。非常适合高延迟，高带宽的网络链路。</li><li>降低网络链路上的 buffer 占用率，从而降低延迟。非常适合慢速接入网络的用户。</li></ul><p>​    Google 在 2016年9月份开源了他们的优化网络拥堵算法 BBR，最新版本的 Linux 内核( 4.9-rc8 )中已经集成了该算法。</p><p>BBR 项目地址：<a href="https://github.com/google/bbr" target="_blank" rel="noopener">https://github.com/google/bbr</a></p><h3 id="部署-BBR-算法"><a href="#部署-BBR-算法" class="headerlink" title="部署 BBR 算法"></a>部署 BBR 算法</h3><ol><li><p>yum 更新系统版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure></li><li><p>查看系统版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# cat /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.4.1708 (Core) </span><br><span class="line">[root@server ~]#</span><br></pre></td></tr></table></figure></li><li><p>安装elrepo并升级内核</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">[root@server ~]# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class="line">[root@server ~]# yum --enablerepo=elrepo-kernel install kernel-ml -y</span><br></pre></td></tr></table></figure></li><li><p>更新grub文件并重启系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \'</span></span><br><span class="line">CentOS Linux 7 Rescue 8619ff5e1306499eac41c02d3b23868e (4.14.14-1.el7.elrepo.x86_64)</span><br><span class="line">CentOS Linux (4.14.14-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (3.10.0-693.11.6.el7.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (3.10.0-693.el7.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (0-rescue-c73a5ccf3b8145c3a675b64c4c3ab1d4) 7 (Core)</span><br><span class="line">[root@server ~]<span class="comment"># grub2-set-default 0</span></span><br><span class="line">[root@server ~]<span class="comment"># reboot</span></span><br></pre></td></tr></table></figure></li><li><p>重启完成后查看内核是否已更换为4.14版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# uname -r</span><br><span class="line">4.14.14-1.el7.elrepo.x86_64</span><br><span class="line">[root@server ~]#</span><br></pre></td></tr></table></figure></li><li><p>开启bbr</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># vim /etc/sysctl.conf    # 在文件末尾添加如下内容</span></span><br><span class="line">net.core.default_qdisc = fq</span><br><span class="line">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure></li><li><p>加载系统参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]<span class="comment"># sysctl -p</span></span><br><span class="line">net.ipv6.conf.all.accept_ra = 2</span><br><span class="line">net.ipv6.conf.eth0.accept_ra = 2</span><br><span class="line">net.core.default_qdisc = fq</span><br><span class="line">net.ipv4.tcp_congestion_control = bbr</span><br><span class="line">[root@vultr ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>如上，输出了我们添加的那两行配置代表正常。</p></li><li><p>确定bbr已经成功开启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr ~]# sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">net.ipv4.tcp_available_congestion_control = bbr cubic reno</span><br><span class="line">[root@vultr ~]# lsmod | grep bbr</span><br><span class="line">tcp_bbr                20480  2 </span><br><span class="line">[root@vultr ~]#</span><br></pre></td></tr></table></figure><p>输出内容如上，则表示bbr已经成功开启。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python文本替换小工具</title>
      <link href="/2019/01/11/python%E6%96%87%E6%9C%AC%E6%9B%BF%E6%8D%A2%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/2019/01/11/python%E6%96%87%E6%9C%AC%E6%9B%BF%E6%8D%A2%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="Python开发环境"><a href="#Python开发环境" class="headerlink" title="Python开发环境"></a>Python开发环境</h3><p>Python 3.6.0</p><h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><p>注：Python3 开始 file() 方法将被 open() 方法代替</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fp1=open(<span class="string">'1.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">fp2=open(<span class="string">'2.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> fp1.readlines():</span><br><span class="line">    fp2.write(s.replace(<span class="string">'\t'</span>,<span class="string">','</span>))</span><br><span class="line">fp1.close()</span><br><span class="line">fp2.close()</span><br></pre></td></tr></table></figure><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ul><li><strong>fp1</strong> 指定需要被修改的文本文件</li><li><strong>fp2</strong> 指定修改后的文本文件</li><li><strong>replace(s1,s2)</strong> 把 s1 替换成 s2</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序通过Java后台获取openid</title>
      <link href="/2019/01/08/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%80%9A%E8%BF%87Java%E5%90%8E%E5%8F%B0%E8%8E%B7%E5%8F%96openid/"/>
      <url>/2019/01/08/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%80%9A%E8%BF%87Java%E5%90%8E%E5%8F%B0%E8%8E%B7%E5%8F%96openid/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>Client: 微信小程序</p><p>Server: Java Servlet running on local Tomcat 9.0</p><p>Tools: 微信开发者工具 &amp;&amp; Eclipse</p><p>​    </p><h2 id="获取思路"><a href="#获取思路" class="headerlink" title="获取思路"></a>获取思路</h2><p>参考<a href="https://pomo16.github.io/2018/12/28/%E8%AF%95%E6%B0%B4%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8EJava%E5%90%8E%E5%8F%B0%E9%80%9A%E4%BF%A1/" target="_blank" rel="noopener">试水微信小程序与Java后台通信</a>一文，我们可以快速建立起小程序与 Java 后台之间的通信。而获取 openid 之前，我们首先要知道微信小程序官方如何定义 openid 的工作机制。参考微信小程序公众平台的开发文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/login.html" target="_blank" rel="noopener">小程序登录</a>，可以得知 openid 的工作机制主要为下图所示：</p><p><img src="http://qnya.pomo16.club/31.png" alt></p><p>由此可以得知小程序若想在后台获取到 openid 就必须在前端发送一个临时生成的 code 到 Java 后台，然后 Java 后台使用 code 向微信相关 API 请求并获得 session_key 以及 openid。请求的 API 为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.weixin.qq.com/sns/jscode2session?appid=xxx&amp;secret=xxx&amp;js_code=xxx&amp;grant_type=authorization_code</span><br></pre></td></tr></table></figure><p>其中 appid 和 secret 秘钥需要在开发者平台的开发设置中获取，且 secret 秘钥不会明文保存，生成后记得保存下来，否则如果忘记需要重新生成。js_code 则是小程序传回的临时 code。</p><h2 id="小程序端"><a href="#小程序端" class="headerlink" title="小程序端"></a>小程序端</h2><p>小程序端制作一个简单的测试界面，并在 js 中向后台发送生成的 code：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line">App(&#123;</span><br><span class="line">  globalData: &#123;</span><br><span class="line">    userInfo: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"userinfo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;!hasUserInfo &amp;&amp; canIUse&#125;&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"userinfo-avatar"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;usernoneSrc&#125;&#125;"</span> <span class="attr">mode</span>=<span class="string">"cover"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">open-type</span>=<span class="string">"getUserInfo"</span> <span class="attr">bindgetuserinfo</span>=<span class="string">"getUserInfo"</span> <span class="attr">style</span>=<span class="string">'margin-bottom:50rpx'</span> <span class="attr">bindtap</span>=<span class="string">"login"</span>&gt;</span> 点击授权 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:else</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"userinfo-avatar"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;userInfo.avatarUrl&#125;&#125;"</span> <span class="attr">mode</span>=<span class="string">"cover"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"userinfo-nickname"</span>&gt;</span>&#123;&#123;userInfo.nickName&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"vipText"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;vipFlag&#125;&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">'color:orange;border:1px solid orange;border-radius:25%;'</span>&gt;</span>vip<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:else</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">'color:#eee;border:1px solid #eee;border-radius: 25%;'</span>&gt;</span>vip<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.userinfo</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.userinfo-avatar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200</span>rpx;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50</span>rpx;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.userinfo-nickname</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#aaa</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">60</span>rpx;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">50</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.vipText</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">50</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    userInfo: &#123;&#125;,</span><br><span class="line">    usernoneSrc: <span class="string">"/images/user.png"</span>,</span><br><span class="line">    <span class="comment">//vipFlag: true,</span></span><br><span class="line">    hasUserInfo: <span class="literal">false</span>,</span><br><span class="line">    canIUse: wx.canIUse(<span class="string">'button.open-type.getUserInfo'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//登录获取code</span></span><br><span class="line">  login: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    wx.login(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//发送请求</span></span><br><span class="line">        wx.request(&#123;</span><br><span class="line">          url: <span class="string">'http://localhost:8080/smallAPP/ConnectTest'</span>, <span class="comment">//接口地址</span></span><br><span class="line">          data: &#123; <span class="attr">code</span>: res.code &#125;,</span><br><span class="line">          header: &#123;</span><br><span class="line">            <span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res.data);</span><br><span class="line">          &#125;,</span><br><span class="line">          fail: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Fail to connect..."</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (app.globalData.userInfo) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        userInfo: app.globalData.userInfo,</span><br><span class="line">        hasUserInfo: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.data.canIUse) &#123;</span><br><span class="line">      <span class="comment">// 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回</span></span><br><span class="line">      <span class="comment">// 所以此处加入 callback 以防止这种情况</span></span><br><span class="line">      app.userInfoReadyCallback = <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">          userInfo: res.userInfo,</span><br><span class="line">          hasUserInfo: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 在没有 open-type=getUserInfo 版本的兼容处理</span></span><br><span class="line">      wx.getUserInfo(&#123;</span><br><span class="line">        success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          app.globalData.userInfo = res.userInfo</span><br><span class="line">          <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">            userInfo: res.userInfo,</span><br><span class="line">            hasUserInfo: <span class="literal">true</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getUserInfo: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">    app.globalData.userInfo = e.detail.userInfo</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      userInfo: e.detail.userInfo,</span><br><span class="line">      hasUserInfo: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>界面如下：</p><p><img src="http://qnya.pomo16.club/33.png" width="320px" height="568px"></p><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><h3 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h3><p>除了<a href="https://pomo16.github.io/2018/12/28/%E8%AF%95%E6%B0%B4%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8EJava%E5%90%8E%E5%8F%B0%E9%80%9A%E4%BF%A1/" target="_blank" rel="noopener">试水微信小程序与Java后台通信</a>一文中的 json 相关包，我们还需要导入一个用于进行 Http 请求的 Apache  的工具：HttpClient。该工具本来位于 Apache 的 Commons 项目中，但是后来置于 Apache 的 HttpComponents 项目中了，具体说明详见 <a href="http://commons.apache.org/" target="_blank" rel="noopener">Apache Commons</a> 以及  <a href="http://hc.apache.org/httpclient-3.x/index.html" target="_blank" rel="noopener">Jakarta Commons HttpClient</a>。</p><p><img src="http://qnya.pomo16.club/32.png" alt></p><p><a href="http://hc.apache.org/downloads.cgi" target="_blank" rel="noopener">Download HttpClient</a></p><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.smallAPP.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.ResponseHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.BasicResponseHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.DefaultHttpClient;</span><br><span class="line"><span class="keyword">import</span> net.sf.json.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ConnectTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConnectTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;<span class="comment">//设置请求编码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        </span><br><span class="line">        String code = request.getParameter(<span class="string">"code"</span>);</span><br><span class="line">        System.out.println(code);</span><br><span class="line">        </span><br><span class="line">        String appSecret = <span class="string">"对应secret秘钥"</span>;</span><br><span class="line">        String appId = <span class="string">"对应APPID"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (code != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//获取openid和access_token的连接</span></span><br><span class="line">            String getOpenIdUrl = <span class="string">"https://api.weixin.qq.com/sns/jscode2session?appid="</span> + appId +<span class="string">"&amp;secret="</span> + appSecret + <span class="string">"&amp;js_code="</span> + code +<span class="string">"&amp;grant_type=authorization_code"</span>;</span><br><span class="line">            System.out.println(getOpenIdUrl);</span><br><span class="line">            <span class="comment">//获取返回的code</span></span><br><span class="line">            HttpClient httpClient = <span class="keyword">new</span> DefaultHttpClient();</span><br><span class="line">            HttpGet httpGet = <span class="keyword">new</span> HttpGet(getOpenIdUrl);</span><br><span class="line">            ResponseHandler&lt;String&gt; responseHandler = <span class="keyword">new</span> BasicResponseHandler();</span><br><span class="line">            <span class="comment">//向微信发送请求并获取response</span></span><br><span class="line">            String responseBody = httpClient.execute(httpGet,responseHandler);</span><br><span class="line">            System.out.println(<span class="string">"=========================获取token==================="</span>);</span><br><span class="line">            System.out.println(responseBody);</span><br><span class="line">            JSONObject jsonObject = JSONObject.fromObject(responseBody);</span><br><span class="line">            System.out.println(jsonObject.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//转成json数据</span></span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        result.put(<span class="string">"data"</span>, code);</span><br><span class="line">        result.put(<span class="string">"msg"</span>, <span class="string">"后台已收到"</span>);</span><br><span class="line">        JSONObject object = JSONObject.fromObject(result);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">out.print(object.toString());</span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在小程序界面点击绑定了发送 code 代码的按钮后，小程序端获取授权以及用户头像等基本信息，如下图：</p><p><img src="http://qnya.pomo16.club/34.png" width="320px" height="568px"></p><p>此时观察后台的结果，看是否获取到 openid：</p><p><img src="http://qnya.pomo16.club/35.png" alt> </p><p>如上图所示已经成功获取了 openid。</p><h2 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h2><ul><li>HttpClient 这个工具包已经换位置了。</li><li>如果请求返回有错误，请检查请求的 API 一万遍！因为比较长，很容易拼错。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 微信小程序 </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的IO</title>
      <link href="/2018/12/29/Java%E7%9A%84IO/"/>
      <url>/2018/12/29/Java%E7%9A%84IO/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#File-文件类">File 文件类</a></li><li><a href="#Stream-流">Stream 流</a></li><li><a href="#文件字节流">文件字节流</a></li><li><a href="#文件字符流">文件字符流</a></li><li><a href="#中文问题">中文问题</a></li><li><a href="#关闭流的方式">关闭流的方式</a></li><li><a href="#缓存流">缓存流</a></li><li><a href="#数据流">数据流</a></li><li><a href="#对象流">对象流</a></li><li><a href="#System.in/out">System.in/out</a></li><li><a href="#一些补充">一些补充</a></li></ul><h2 id="File-文件类"><a href="#File-文件类" class="headerlink" title="File 文件类"></a>File 文件类</h2><p>创建文件对象的构造方法：</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>File(String pathname)</td><td>通过将给定路径名字符串转换成抽象路径名来创建一个新 File 实例。(其中路径可以是相对路径也可以是绝对路径)</td></tr><tr><td>File(File parent, String child)</td><td>通过给定的父抽象路径名和子路径名字符串创建一个新的File实例。</td></tr><tr><td>File(String parent, String child)</td><td>根据 parent 路径名字符串和 child 路径名字符串创建一个新 File 实例。</td></tr><tr><td>File(URI uri)</td><td>通过将给定的 file: URI 转换成一个抽象路径名来创建一个新的 File 实例。</td></tr></tbody></table><p>文件常用方法：</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>exists()</td><td>判断文件是否存在</td></tr><tr><td>isDirectory()</td><td>判断是否是文件夹</td></tr><tr><td>isFile()</td><td>判断是否是文件</td></tr><tr><td>length()</td><td>获取文件的长度</td></tr><tr><td>lastModified()</td><td>文件最后修改时间的 long 值，可以配合 Date 类输出直观时间</td></tr><tr><td>setLastModified(long time)</td><td>设置文件修改时间为 time</td></tr><tr><td>renameTo(File dest)</td><td>文件重命名</td></tr><tr><td>list()</td><td>以字符串数组的形式，返回当前文件夹下的所有文件(不包含子文件及子文件夹)</td></tr><tr><td>listFiles()</td><td>以文件数组的形式，返回当前文件夹下的所有文件(不包含子文件及子文件夹)</td></tr><tr><td>getParent()</td><td>以字符串形式返回获取所在文件夹</td></tr><tr><td>getParentFile()</td><td>以文件形式返回获取所在文件夹</td></tr><tr><td>mkdir()</td><td>创建文件夹，如果父文件夹不存在，创建就无效</td></tr><tr><td>mkdirs()</td><td>创建文件夹，如果父文件夹不存在，就会创建父文件夹</td></tr><tr><td>creatNewFile()</td><td>创建一个空文件，如果父文件夹不存在，就会抛出异常。所以在创建一个空文件之前，通常会先创建父目录:filename.getParentFile().mkdirs()</td></tr><tr><td>listRoots()</td><td>列出所有的盘符 c: d: e: 等等</td></tr><tr><td>delete()</td><td>删除文件</td></tr><tr><td>deleteOnExit()</td><td>JVM结束的时候，删除文件，常用于临时文件的删除</td></tr></tbody></table><h2 id="Stream-流"><a href="#Stream-流" class="headerlink" title="Stream 流"></a>Stream 流</h2><p>Java 语言定义了许多类专门负责各种方式的输入或者输出，这些类都被放在 java.io 包中。</p><p>流的作用：为了永久性的保存数据。</p><p>分类：根据数据流向的不同分为输入流和输出流；根据处理数据类型的不同分为字符流和字节流。其中，所有输入流类都是抽象类 InputStream (字节输入流)，或者抽象类 Reader (字符输入流)的子类；而所有输出流都是抽象类  OutputStream (字节输出流)或者 Writer (字符输出流)的子类。</p><p><img src="http://qnya.pomo16.club/29.png" alt></p><h2 id="文件字节流"><a href="#文件字节流" class="headerlink" title="文件字节流"></a>文件字节流</h2><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><p>InputStream 是字节输入流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。<br>FileInputStream 是 InputStream 子类，以 FileInputStream 为例进行文件读取:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//准备文件lol.txt其中的内容是AB，对应的ASCII分别是65 66</span></span><br><span class="line">            File f =<span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">            <span class="comment">//创建基于文件的输入流</span></span><br><span class="line">            FileInputStream fis =<span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            <span class="comment">//创建字节数组，其长度就是文件的长度</span></span><br><span class="line">            <span class="keyword">byte</span>[] all =<span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            <span class="comment">//以字节流的形式读取文件所有内容</span></span><br><span class="line">            fis.read(all);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : all) &#123;</span><br><span class="line">                <span class="comment">//打印出来是65 66</span></span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">//每次使用完流，都应该进行关闭</span></span><br><span class="line">            fis.close();</span><br><span class="line">              </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些常用方法：</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>public void close() throws IOException{}</td><td>关闭此文件输入流并释放与此流有关的所有系统资源。抛出 IOException 异常。</td></tr><tr><td>protected void finalize()throws IOException {}</td><td>这个方法清除与该文件的连接。确保在不再引用文件输入流时调用其 close 方法。抛出 IOException 异常。</td></tr><tr><td>public int read(int r)throws IOException{}</td><td>这个方法从 InputStream 对象读取指定字节的数据。返回为整数值。返回下一字节数据，如果已经到结尾则返回 -1。</td></tr><tr><td>public int read(byte[] r) throws IOException{}</td><td>这个方法从输入流读取 r.length 长度的字节。返回读取的字节数。如果是文件结尾则返回 -1。</td></tr><tr><td>public int available() throws IOException{}</td><td>返回下一次对此输入流调用的方法可以不受阻塞地从此输入流读取的字节数。返回一个整数值。</td></tr></tbody></table><h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><p>OutputStream是字节输出流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。<br>FileOutputStream 是 OutputStream 子类，以 FileOutputStream 为例向文件写出数据。(注: 如果文件d:/lol2.txt不存在，写出操作会自动创建该文件。但是如果是文件 d:/xyz/lol2.txt，而目录xyz又不存在，会抛出异常。)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 准备文件lol2.txt其中的内容是空的</span></span><br><span class="line">            File f = <span class="keyword">new</span> File(<span class="string">"d:/lol2.txt"</span>);</span><br><span class="line">            <span class="comment">// 准备长度是2的字节数组，用88,89初始化，其对应的字符分别是X,Y</span></span><br><span class="line">            <span class="keyword">byte</span> data[] = &#123; <span class="number">88</span>, <span class="number">89</span> &#125;;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 创建基于文件的输出流</span></span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">            <span class="comment">// 把数据写入到输出流</span></span><br><span class="line">            fos.write(data);</span><br><span class="line">            <span class="comment">// 关闭输出流</span></span><br><span class="line">            fos.close();</span><br><span class="line">             </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些常用方法：</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>public void close() throws IOException{}</td><td>关闭此文件输入流并释放与此流有关的所有系统资源。抛出 IOException 异常。</td></tr><tr><td>protected void finalize()throws IOException {}</td><td>这个方法清除与该文件的连接。确保在不再引用文件输入流时调用其 close 方法。抛出 IOException 异常。</td></tr><tr><td>public void write(int w)throws IOException{}</td><td>这个方法把指定的字节写到输出流中。</td></tr><tr><td>public void write(byte[] w)</td><td>把指定数组中 w.length 长度的字节写到 OutputStream 中。</td></tr></tbody></table><h2 id="文件字符流"><a href="#文件字符流" class="headerlink" title="文件字符流"></a>文件字符流</h2><h3 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h3><p>FileReader 是 Reader 子类，该类按字符读取流中数据。可以通过以下几种构造方法创建需要的对象。</p><ul><li>FileReader(File file)</li><li>FileReader(FileDescriptor fd)</li><li>FileReader(String fileName) </li></ul><p>以 FileReader 为例进行文件读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 准备文件lol.txt其中的内容是AB</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">        <span class="comment">// 创建基于文件的Reader</span></span><br><span class="line">        <span class="keyword">try</span> (FileReader fr = <span class="keyword">new</span> FileReader(f)) &#123;</span><br><span class="line">            <span class="comment">// 创建字符数组，其长度就是文件的长度</span></span><br><span class="line">            <span class="keyword">char</span>[] all = <span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            <span class="comment">// 以字符流的形式读取文件所有内容</span></span><br><span class="line">            fr.read(all);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> b : all) &#123;</span><br><span class="line">                <span class="comment">// 打印出来是A B</span></span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些常用方法：</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>public int read() throws IOException</td><td>读取单个字符，返回一个int型变量代表读取到的字符。</td></tr><tr><td>public int read(char [] c, int offset, int len)</td><td>读取字符到c数组，返回读取到字符的个数。</td></tr></tbody></table><h3 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h3><p>FileWriter 是 Writer 的子类，该类按字符向流中写入数据。可以通过以下几种构造方法创建需要的对象。</p><ul><li><p>FileWriter(File file)</p></li><li><p>FileWriter(File file, boolean append)</p></li><li>FileWriter(FileDescriptor fd)</li><li>FileWriter(String fileName, boolean append)</li></ul><p>append参数：若为 true 则在文件末尾追加，若为 false 覆盖文件内容。</p><p>以 FileWriter 为例把字符串写入到文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 准备文件lol2.txt</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/lol2.txt"</span>);</span><br><span class="line">        <span class="comment">// 创建基于文件的Writer</span></span><br><span class="line">        <span class="keyword">try</span> (FileWriter fr = <span class="keyword">new</span> FileWriter(f)) &#123;</span><br><span class="line">            <span class="comment">// 以字符流的形式把数据写入到文件中</span></span><br><span class="line">            String data=<span class="string">"abcdefg1234567890"</span>;</span><br><span class="line">            <span class="keyword">char</span>[] cs = data.toCharArray();</span><br><span class="line">            fr.write(cs);</span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些常用方法：</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>public void write(int c) throws IOException</td><td>写入单个字符c。</td></tr><tr><td>public void write(char [] c, int offset, int len)</td><td>写入字符数组中开始为offset长度为len的某一部分。</td></tr><tr><td>public void write(String s, int offset, int len)</td><td>写入字符串中开始为offset长度为len的某一部分。</td></tr></tbody></table><h2 id="中文问题"><a href="#中文问题" class="headerlink" title="中文问题"></a>中文问题</h2><h3 id="用-FileInputStream-字节流正确读取中文"><a href="#用-FileInputStream-字节流正确读取中文" class="headerlink" title="用 FileInputStream 字节流正确读取中文"></a>用 FileInputStream 字节流正确读取中文</h3><p>为了能够正确的读取中文内容</p><ul><li><p>必须了解文本是以哪种编码方式保存字符的</p></li><li><p>使用字节流读取了文本后，再使用对应的编码方式去识别这些数字，得到正确的字符</p></li></ul><p>以“中”为例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"E:\\project\\j2se\\src\\test.txt"</span>);</span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(f);) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] all = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            fis.read(all);</span><br><span class="line">   </span><br><span class="line">            <span class="comment">//文件中读出来的数据是</span></span><br><span class="line">            System.out.println(<span class="string">"文件中读出来的数据是："</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : all)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> i = b&amp;<span class="number">0x000000ff</span>;  <span class="comment">//只取16进制的后两位</span></span><br><span class="line">                System.out.println(Integer.toHexString(i));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"把这个数字，放在GBK的棋盘上去："</span>);</span><br><span class="line">            String str = <span class="keyword">new</span> String(all,<span class="string">"GBK"</span>);</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">文件中读出来的数据是：</span></span><br><span class="line"><span class="comment">d6</span></span><br><span class="line"><span class="comment">d0</span></span><br><span class="line"><span class="comment">把这个数字，放在GBK的棋盘上去：</span></span><br><span class="line"><span class="comment">中</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="用FileReader-字符流正确读取中文"><a href="#用FileReader-字符流正确读取中文" class="headerlink" title="用FileReader 字符流正确读取中文"></a>用FileReader 字符流正确读取中文</h3><p>FileReader 得到的是字符，所以一定是已经把字节根据某种编码识别成了字符了。而 FileReader 使用的编码方式是 Charset.defaultCharset() 的返回值，如果是中文的操作系统，就是 GBK。FileReader 是不能手动设置编码方式的，为了使用其他的编码方式，只能使用 InputStreamReader 来代替，像这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(f),Charset.forName(<span class="string">"UTF-8"</span>));</span><br></pre></td></tr></table></figure><p>以“中”为例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException, FileNotFoundException </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"E:\\project\\j2se\\src\\test.txt"</span>);</span><br><span class="line">        System.out.println(<span class="string">"默认编码方式:"</span>+Charset.defaultCharset());</span><br><span class="line">        <span class="comment">//FileReader得到的是字符，所以一定是已经把字节根据某种编码识别成了字符了</span></span><br><span class="line">        <span class="comment">//而FileReader使用的编码方式是Charset.defaultCharset()的返回值，如果是中文的操作系统，就是GBK</span></span><br><span class="line">        <span class="keyword">try</span> (FileReader fr = <span class="keyword">new</span> FileReader(f)) &#123;</span><br><span class="line">            <span class="keyword">char</span>[] cs = <span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            fr.read(cs);</span><br><span class="line">            System.out.printf(<span class="string">"FileReader会使用默认的编码方式%s,识别出来的字符是：%n"</span>,Charset.defaultCharset());</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(cs));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//FileReader是不能手动设置编码方式的，为了使用其他的编码方式，只能使用InputStreamReader来代替</span></span><br><span class="line">        <span class="comment">//并且使用new InputStreamReader(new FileInputStream(f),Charset.forName("UTF-8")); 这样的形式</span></span><br><span class="line">        <span class="keyword">try</span> (InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(f),Charset.forName(<span class="string">"UTF-8"</span>))) &#123;</span><br><span class="line">            <span class="keyword">char</span>[] cs = <span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            isr.read(cs);</span><br><span class="line">            System.out.printf(<span class="string">"InputStreamReader 指定编码方式UTF-8,识别出来的字符是：%n"</span>);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(cs));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">默认编码方式:GBK</span></span><br><span class="line"><span class="comment">FileReader会使用默认的编码方式%s,识别出来的字符是：</span></span><br><span class="line"><span class="comment">(乱码)</span></span><br><span class="line"><span class="comment">InputStreamReader 指定编码方式UTF-8,识别出来的字符是：</span></span><br><span class="line"><span class="comment">?中</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>解释： 为什么中字前面有一个?<br>如果是使用记事本另存为UTF-8的格式，那么在第一个字节有一个标示符，叫做 BOM 用来标志这个文件是用 UTF-8 来编码的。</li></ul><h2 id="关闭流的方式"><a href="#关闭流的方式" class="headerlink" title="关闭流的方式"></a>关闭流的方式</h2><h3 id="在-try-中关闭"><a href="#在-try-中关闭" class="headerlink" title="在 try 中关闭"></a>在 try 中关闭</h3><p>在try的作用域里关闭文件输入流，在前面的示例中都是使用这种方式，这样做有一个弊端；<br>如果文件不存在，或者读取的时候出现问题而抛出异常，那么就不会执行这一行关闭流的代码，存在巨大的资源占用隐患。 <strong><font color="red">不推荐使用</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File f = <span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            <span class="keyword">byte</span>[] all = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            fis.read(all);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : all) &#123;</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 在try 里关闭流</span></span><br><span class="line">            fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在-finally-中关闭"><a href="#在-finally-中关闭" class="headerlink" title="在 finally 中关闭"></a>在 finally 中关闭</h3><p>这是标准的关闭流的方式：</p><ol><li>首先把流的引用声明在 try 的外面，如果声明在 try 里面，其作用域无法抵达 finally。</li><li>在 finally 关闭之前，要先判断该引用是否为空。</li><li>关闭的时候，需要再一次进行 try catch 处理。</li></ol><p>这是标准的严谨的关闭流的方式，但是看上去很繁琐，所以写不重要的或者测试代码的时候，都会采用上面的有隐患try的方式，因为不麻烦~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            <span class="keyword">byte</span>[] all = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            fis.read(all);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : all) &#123;</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 在finally 里关闭流</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != fis)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-try-的方式"><a href="#使用-try-的方式" class="headerlink" title="使用 try() 的方式"></a>使用 try() 的方式</h3><p>把流定义在 try() 里, try, catch 或者 finally 结束的时候，会自动关闭。这种编写代码的方式叫做 try-with-resources， 这是从 JDK7 开始支持的技术。所有的流，都实现了一个接口叫做 AutoCloseable，任何类实现了这个接口，都可以在 try() 中进行实例化。 并且在try,  catch, finally 结束的时候自动关闭，回收相关资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//把流定义在try()里,try,catch或者finally结束的时候，会自动关闭</span></span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(f)) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] all = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            fis.read(all);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : all) &#123;</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存流"><a href="#缓存流" class="headerlink" title="缓存流"></a>缓存流</h2><p>以介质是硬盘为例，字节流和字符流的弊端：<br>在每一次读写的时候，都会访问硬盘。 如果读写的频率比较高的时候，其性能表现不佳。 </p><p>为了解决以上弊端，采用缓存流。<br>缓存流在读取的时候，会一次性读较多的数据到缓存中，以后每一次的读取，都是在缓存中访问，直到缓存中的数据读取完毕，再到硬盘中读取。 </p><p>缓存流在写入数据的时候，会先把数据写入到缓存区，直到缓存区达到一定的量，才把这些数据，一起写入到硬盘中去。按照这种操作模式，就不会像字节流，字符流那样每写一个字节都访问硬盘，从而减少了IO操作。</p><h3 id="使用缓存流读取数据"><a href="#使用缓存流读取数据" class="headerlink" title="使用缓存流读取数据"></a>使用缓存流读取数据</h3><p>缓存字符输入流 BufferedReader 可以一次读取一行数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 准备文件lol.txt其中的内容是</span></span><br><span class="line">        <span class="comment">// garen kill teemo</span></span><br><span class="line">        <span class="comment">// teemo revive after 1 minutes</span></span><br><span class="line">        <span class="comment">// teemo try to garen, but killed again</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">        <span class="comment">// 创建文件字符流</span></span><br><span class="line">        <span class="comment">// 缓存流必须建立在一个存在的流的基础上</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                FileReader fr = <span class="keyword">new</span> FileReader(f);</span><br><span class="line">                BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line">            )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 一次读一行</span></span><br><span class="line">                String line = br.readLine();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == line)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用缓存流写出数据"><a href="#使用缓存流写出数据" class="headerlink" title="使用缓存流写出数据"></a>使用缓存流写出数据</h3><p>PrintWriter 缓存字符输出流， 可以一次写出一行数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 向文件lol2.txt中写入三行语句</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/lol2.txt"</span>);</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">// 创建文件字符流</span></span><br><span class="line">                FileWriter fw = <span class="keyword">new</span> FileWriter(f);</span><br><span class="line">                <span class="comment">// 缓存流必须建立在一个存在的流的基础上              </span></span><br><span class="line">                PrintWriter pw = <span class="keyword">new</span> PrintWriter(fw);              </span><br><span class="line">        ) &#123;</span><br><span class="line">            pw.println(<span class="string">"garen kill teemo"</span>);</span><br><span class="line">            pw.println(<span class="string">"teemo revive after 1 minutes"</span>);</span><br><span class="line">            pw.println(<span class="string">"teemo try to garen, but killed again"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flush"><a href="#flush" class="headerlink" title="flush"></a>flush</h3><p>有的时候，需要立即把数据写入到硬盘，而不是等缓存满了才写出去。 这时候就需要用到 flush：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//向文件lol2.txt中写入三行语句</span></span><br><span class="line">        File f =<span class="keyword">new</span> File(<span class="string">"d:/lol2.txt"</span>);</span><br><span class="line">        <span class="comment">//创建文件字符流</span></span><br><span class="line">        <span class="comment">//缓存流必须建立在一个存在的流的基础上</span></span><br><span class="line">        <span class="keyword">try</span>(FileWriter fr = <span class="keyword">new</span> FileWriter(f);PrintWriter pw = <span class="keyword">new</span> PrintWriter(fr);) &#123;</span><br><span class="line">            pw.println(<span class="string">"garen kill teemo"</span>);</span><br><span class="line">            <span class="comment">//强制把缓存中的数据写入硬盘，无论缓存是否已满</span></span><br><span class="line">                pw.flush();           </span><br><span class="line">            pw.println(<span class="string">"teemo revive after 1 minutes"</span>);</span><br><span class="line">                pw.flush();</span><br><span class="line">            pw.println(<span class="string">"teemo try to garen, but killed again"</span>);</span><br><span class="line">                pw.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><p>DataInputStream 数据输入流<br>DataOutputStream 数据输出流</p><h3 id="直接进行字符串的读写"><a href="#直接进行字符串的读写" class="headerlink" title="直接进行字符串的读写"></a>直接进行字符串的读写</h3><p>使用数据流的 writeUTF() 和 readUTF() 可以进行数据的格式化顺序读写。如本例，通过 DataOutputStream 向文件顺序写出布尔值，整数和字符串。然后再通过 DataInputStream 顺序读入这些数据。</p><p>注：要用 DataInputStream 读取一个文件，这个文件必须是由 DataOutputStream 写出的，否则会出现 EOFException，因为 DataOutputStream 在写出的时候会做一些特殊标记，只有 DataInputStream 才能成功的读取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">      </span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line">      </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        write();</span><br><span class="line">        read();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File f =<span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                FileInputStream fis  = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">                DataInputStream dis =<span class="keyword">new</span> DataInputStream(fis);</span><br><span class="line">        )&#123;</span><br><span class="line">            <span class="keyword">boolean</span> b= dis.readBoolean();</span><br><span class="line">            <span class="keyword">int</span> i = dis.readInt();</span><br><span class="line">            String str = dis.readUTF();</span><br><span class="line">             </span><br><span class="line">            System.out.println(<span class="string">"读取到布尔值:"</span>+b);</span><br><span class="line">            System.out.println(<span class="string">"读取到整数:"</span>+i);</span><br><span class="line">            System.out.println(<span class="string">"读取到字符串:"</span>+str);</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File f =<span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                FileOutputStream fos  = <span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">                DataOutputStream dos =<span class="keyword">new</span> DataOutputStream(fos);</span><br><span class="line">        )&#123;</span><br><span class="line">            dos.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">            dos.writeInt(<span class="number">300</span>);</span><br><span class="line">            dos.writeUTF(<span class="string">"123 this is gareen"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">读取到布尔值:true</span></span><br><span class="line"><span class="comment">读取到整数:300</span></span><br><span class="line"><span class="comment">读取到字符串:123 this is gareen</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><p>对象流指的是可以直接把一个对象以流的形式传输给其他的介质，比如硬盘。</p><p>一个对象以流的形式进行传输，叫做序列化。 该对象所对应的类，必须是实现 Serializable 接口。</p><h3 id="序列化一个对象"><a href="#序列化一个对象" class="headerlink" title="序列化一个对象"></a>序列化一个对象</h3><p>创建一个 Hero 对象，设置其名称为 garen。把该对象序列化到一个文件 garen.lol。然后再通过序列化把该文件转换为一个 Hero 对象。</p><p><strong>注：把一个对象序列化有一个前提是：这个对象的类，必须实现了 Serializable 接口。</strong></p><p>TestStream.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个Hero garen</span></span><br><span class="line">        <span class="comment">//要把Hero对象直接保存在文件上，务必让Hero类实现Serializable接口</span></span><br><span class="line">        Hero h = <span class="keyword">new</span> Hero();</span><br><span class="line">        h.name = <span class="string">"garen"</span>;</span><br><span class="line">        h.hp = <span class="number">616</span>;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//准备一个文件用于保存该对象</span></span><br><span class="line">        File f =<span class="keyword">new</span> File(<span class="string">"d:/garen.lol"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span>(</span><br><span class="line">            <span class="comment">//创建对象输出流</span></span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">            ObjectOutputStream oos =<span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">            <span class="comment">//创建对象输入流              </span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            ObjectInputStream ois =<span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">        ) &#123;</span><br><span class="line">            oos.writeObject(h);</span><br><span class="line">            Hero h2 = (Hero) ois.readObject();</span><br><span class="line">            System.out.println(h2.name);</span><br><span class="line">            System.out.println(h2.hp);</span><br><span class="line">               </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;           </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hero.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//表示这个类当前的版本，如果有了变化，比如新设计了属性，就应该修改这个版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> hp;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="System-in-out"><a href="#System-in-out" class="headerlink" title="System.in/out"></a>System.in/out</h2><p>System.out 是常用的在控制台输出数据的<br>System.in 可以从控制台输入数据</p><h3 id="System-in"><a href="#System-in" class="headerlink" title="System.in"></a>System.in</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 控制台输入</span></span><br><span class="line">        <span class="keyword">try</span> (InputStream is = System.in;) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 敲入a,然后敲回车可以看到</span></span><br><span class="line">                <span class="comment">// 97 13 10</span></span><br><span class="line">                <span class="comment">// 97是a的ASCII码</span></span><br><span class="line">                <span class="comment">// 13 10分别对应回车换行</span></span><br><span class="line">                <span class="keyword">int</span> i = is.read();</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scanner读取字符串"><a href="#Scanner读取字符串" class="headerlink" title="Scanner读取字符串"></a>Scanner读取字符串</h3><p>使用 System.in.read 虽然可以读取数据，但是很不方便。使用 Scanner 就可以逐行读取了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">            Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                String line = s.nextLine();</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scanner从控制台读取整数"><a href="#Scanner从控制台读取整数" class="headerlink" title="Scanner从控制台读取整数"></a>Scanner从控制台读取整数</h3><p>java.util.Scanner 是 Java5 的新特征，我们可以通过 Scanner 类来获取用户的输入。</p><p>使用Scanner从控制台读取整数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> a = s.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"第一个整数："</span>+a);</span><br><span class="line">        <span class="keyword">int</span> b = s.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"第二个整数："</span>+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">123</span></span><br><span class="line"><span class="comment">第一个整数：123</span></span><br><span class="line"><span class="comment">456</span></span><br><span class="line"><span class="comment">第二个整数：456</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h2><h3 id="上述常用流关系图"><a href="#上述常用流关系图" class="headerlink" title="上述常用流关系图"></a>上述常用流关系图</h3><p><img src="http://qnya.pomo16.club/30.png" alt></p><h3 id="flush-和-close-的区别"><a href="#flush-和-close-的区别" class="headerlink" title="flush() 和 close() 的区别"></a>flush() 和 close() 的区别</h3><ul><li><p>flush()方法</p><p>用来刷新缓冲区的，刷新后可以再次写出。字节缓冲流内置缓冲区，如果没有读取出来，可以使用 flush() 刷新来。</p></li><li><p>close()方法</p><p>用来关闭流释放资源的的，如果是带缓冲区的流对象的 close() 方法，不但会关闭流，还会再关闭流之前刷新缓冲区，关闭后不能再写出。</p></li></ul><h3 id="什么情况下使用字符流？"><a href="#什么情况下使用字符流？" class="headerlink" title="什么情况下使用字符流？"></a>什么情况下使用字符流？</h3><ul><li><p>字符流也可以拷贝文本文件，但不推荐使用。 因为读取时会把字节转为字符，写出时还要把字符转回字节。</p></li><li><p>程序需要读取一段文本，或者需要写出一段文本的时候可以使用字符流。</p></li><li><p>读取的时候是按照字符的大小读取的，不会出现半个中文。</p></li><li><p>写出的时候可以直接将字符串写出，不用转换为字节数组。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>试水微信小程序与Java后台通信</title>
      <link href="/2018/12/28/%E8%AF%95%E6%B0%B4%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8EJava%E5%90%8E%E5%8F%B0%E9%80%9A%E4%BF%A1/"/>
      <url>/2018/12/28/%E8%AF%95%E6%B0%B4%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8EJava%E5%90%8E%E5%8F%B0%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>Client: 微信小程序</p><p>Server: Java Servlet running on local Tomcat 9.0</p><p>Tools: 微信开发者工具 &amp;&amp; Eclipse</p><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><p>弄一个简陋的微信小程序进行测试，wxml 只需要绘制一个向后台发送信息的按钮即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">'connecttest'</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 js 中绑定按键发送请求并在 console 中输出返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//获取应用实例</span></span><br><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line">Page(&#123;</span><br><span class="line">  connecttest: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: <span class="string">'http://localhost:8080/smallAPP/ConnectTest'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        username: <span class="string">'pomo'</span>,</span><br><span class="line">        password: <span class="string">'123'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      method: <span class="string">'POST'</span>,</span><br><span class="line">      header: &#123;</span><br><span class="line">        <span class="comment">//'content-type': 'application/json' // 默认值以 json 形式发送请求</span></span><br><span class="line">        <span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.data);</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Fail to connect..."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><p>到目前为止，Client 已经完成。</p><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><h3 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h3><p>在 Eclipse 中新建一个名叫 smallApp 的 Dynamic Web Project 。先在 WEB-INF 的 lib 中导入 json 相关包：json-lib-2.4-jdk15.jar <a href="https://sourceforge.net/projects/json-lib/files/json-lib/json-lib-2.4/" target="_blank" rel="noopener">download</a></p><p><strong>但是这里要注意一个陷阱，这个 json 包需要依赖其他包才能正常运行：</strong></p><ul><li><p>jakarta commons-lang 2.5</p></li><li><p>jakarta commons-beanutils 1.8.0</p></li><li><p>jakarta commons-collections 3.2.1</p></li><li><p>jakarta commons-logging 1.1.1</p></li><li><p>ezmorph 1.0.6</p></li></ul><p>官方网址：<a href="http://json-lib.sourceforge.net/" target="_blank" rel="noopener">http://json-lib.sourceforge.net/</a> </p><h3 id="DTO"><a href="#DTO" class="headerlink" title="DTO"></a>DTO</h3><p>定义一个名叫 user 的 DTO 并带有 userName 和 password 两个属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.smallAPP.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userName = userName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><p>在 DTO 的同一目录下新建一个 Servlet:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.smallAPP.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.json.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ConnectTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConnectTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置请求编码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">/* 设置响应头允许ajax跨域访问 */</span></span><br><span class="line">        <span class="comment">//response.setHeader("Access-Control-Allow-Origin", "*");</span></span><br><span class="line">        <span class="comment">/* 星号表示所有的异域请求都可以接受， */</span></span><br><span class="line">        <span class="comment">//response.setHeader("Access-Control-Allow-Methods", "GET,POST");</span></span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">//获取微信小程序get的参数值并打印</span></span><br><span class="line">        user.setUserName(request.getParameter(<span class="string">"username"</span>));</span><br><span class="line">        user.setPassword(request.getParameter(<span class="string">"password"</span>));</span><br><span class="line">        System.out.println(<span class="string">"username="</span>+user.getUserName()+<span class="string">" ,password="</span>+user.getPassword());</span><br><span class="line">        <span class="comment">//转成json数据</span></span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        result.put(<span class="string">"data"</span>, user);</span><br><span class="line">        result.put(<span class="string">"msg"</span>, <span class="string">"后台已收到"</span>);</span><br><span class="line">        JSONObject object = JSONObject.fromObject(result);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">out.print(object.toString());</span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 Servlet 的功能就是把 Client 发送过来的 userName 和 password 在控制台输出，然后把这两个信息转换成 json 数据返回给微信小程序。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在微信开发者工具详情中设置不校验域名(若非本地服务器测试，需要配置好服务器，服务器配置好之后无需关心跨域问题)：</p><p><img src="http://qnya.pomo16.club/26.png" width="250px" height="550px"></p><p>在 Eclipse 运行 Servlet，然后点击微信小程序页面上的 test 按钮向后台发送请求，在 Eclipse 中查看后台的接收结果：</p><p><img src="http://qnya.pomo16.club/27.png" alt></p><p>然后再观察微信小程序的 console：</p><p><img src="http://qnya.pomo16.club/28.png" alt></p><p>如上图所示，微信小程序与 Java 后台成功进行通讯。</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 微信小程序 </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP中常用的状态码</title>
      <link href="/2018/11/19/HTTP%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%8A%B6%E6%80%81%E7%A0%81/"/>
      <url>/2018/11/19/HTTP%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><p>状态码的职责是当客户端向服务器发送请求时，描述返回的请求结果。</p><p>状态码数字中的第一位指定了响应类别，后两位无分类。响应类别有以下五种：</p><table><thead><tr><th></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1xx</td><td>Informational (信息性状态码)</td><td>接收的请求正在处理</td></tr><tr><td>2xx</td><td>Success (成功状态码)</td><td>请求正常处理完毕</td></tr><tr><td>3xx</td><td>Redirection (重定向状态码)</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4xx</td><td>Client Error (客户端错误状态码)</td><td>服务器无法处理请求</td></tr><tr><td>5xx</td><td>Server Error (服务器错误状态码)</td><td>服务器处理请求出错</td></tr></tbody></table><p>仅记录在 <a href="https://tools.ietf.org/html/rfc2616#section-5.1.2" target="_blank" rel="noopener">rfc2616</a> 的 HTTP 状态码就有 40 多种，再加上其他 rfc 文档的扩展就更多了，不过 fortunately，常用的可以归纳为 14 种。</p><h2 id="常用状态码"><a href="#常用状态码" class="headerlink" title="常用状态码"></a>常用状态码</h2><h3 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx 成功"></a>2xx 成功</h3><p>2xx 的响应结果表明请求被正常处理了。</p><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td><strong>200 OK</strong></td><td><strong>客户端发来的请求在服务端被正常处理了。</strong></td></tr><tr><td><strong>204 No Content</strong></td><td><strong>服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分。另外，也不允许返回任何实体的主体。一般在只需要从客户端往服务端发送信息，而对客户端不需要发送新信息内容的情况下使用。</strong></td></tr><tr><td><strong>206 Partial Content</strong></td><td><strong>客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求，响应报文中包含由 Content-Range 指定范围的实体内容。</strong></td></tr></tbody></table><h3 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx 重定向"></a>3xx 重定向</h3><p>3xx 响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。</p><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td><strong>301 Moved Permanently</strong></td><td><strong>永久性重定向。该状态码表示请求的资源已被分配了新的 URI，以后应使用资源现在所指的 URI。也就是说，如果已经把资源对应的 URI 保存为书签了，这时候应该按 Location 首部字段提示的 URI 重新保存。</strong></td></tr><tr><td><strong>302 Found</strong></td><td><strong>临时性重定向。该状态码表示请求的资源已被分配了新的 URI，希望用户(本次)能使用新的 URI 访问。和 301 类似，但它不会更改书签。</strong></td></tr><tr><td><strong>303 See Other</strong></td><td><strong>该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。和 302 有着同样的功能，但 303 明确表示客户端应采用 GET 方法获取资源。</strong></td></tr><tr><td><strong>304 Not Modified</strong></td><td><strong>该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但因发生请求未满足条件的情况后，直接返回 304 Not Modified (服务器端资源未改变，可直接使用客户端未过期的缓存)。304 状态码返回时，不包含任何响应的主体部分。</strong></td></tr><tr><td><strong>307 Temporary Redirect</strong></td><td><strong>临时重定向。和 302 Found 含义相同。尽管 302 标准禁止 POST 变换成 GET，但实际使用时大家并不遵守。307 会遵守浏览器标准，不会从 POST 变成 GET，但是不同浏览器处理响应的方式并不相同。</strong></td></tr></tbody></table><p>当 301、302、303 响应状态码返回时，几乎所有的浏览器都会把 POST 改成 GET，并删除请求报文内的主体，之后请求会自动再次发送。301 和 302 标准是禁止将 POST 方法改变成 GET 方法的，但实际使用时大家都会这么做。</p><h3 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx 客户端错误"></a>4xx 客户端错误</h3><p>4xx 的响应结果表明客户端是发生错误的原因所在。</p><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td><strong>400 Bad Request</strong></td><td><strong>该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。另外浏览器会像对待 200 OK 一样对待该状态码。</strong></td></tr><tr><td><strong>401 Unauthorized</strong></td><td><strong>该状态码表示发送的请求需要有通过 HTTP 认证( BASIC认证、DIGEST 认证 )的认证信息。另外若之前已进行过 1 次请求，则表示用户认证失败。返回含有 401 的响应必须包含一个适用于被请求资源的 WWW-Authenticate 首部用以质询（ challenge）用户信息。当浏览器初次接收到 401 响应，会弹出认证用的对话窗口。</strong></td></tr><tr><td><strong>403 Forbidden</strong></td><td><strong>该状态码表示对请求资源的访问被服务器拒绝了。服务器端没有必要给出拒绝的详细理由，但如果想作说明的话，可以在实体的主体部分对原因进行描述，这样就能让用户看见了。未获得文件系统的访问授权，访问权限出现了某些问题（从未授权的发送源 IP 地址试图访问）等列举的情况都可能是发生 403 的原因。</strong></td></tr><tr><td><strong>404 Not Found</strong></td><td><strong>该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</strong></td></tr></tbody></table><h3 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx 服务器错误"></a>5xx 服务器错误</h3><p>5xx 的响应结果表明服务器本身发生错误。</p><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td><strong>500 internal Server Error</strong></td><td><strong>该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。</strong></td></tr><tr><td><strong>503 Service Unavailable</strong></td><td><strong>该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入 Retry-After 首部字段再返回给客户端。</strong></td></tr></tbody></table><h3 id="状态码和状况不一致"><a href="#状态码和状况不一致" class="headerlink" title="状态码和状况不一致"></a>状态码和状况不一致</h3><p>不少返回的状态码响应都是错误的，但是用户可能察觉不到这一点。比如 Web 应用程序内部发生错误，状态码依然返回 200 OK，这种情况也经常会遇到。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之封装 继承 多态</title>
      <link href="/2018/11/15/Java%E4%B9%8B%E5%B0%81%E8%A3%85%20%E7%BB%A7%E6%89%BF%20%E5%A4%9A%E6%80%81/"/>
      <url>/2018/11/15/Java%E4%B9%8B%E5%B0%81%E8%A3%85%20%E7%BB%A7%E6%89%BF%20%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>在面向对象程式设计方法中，封装(Encapsulation)是指一种将抽象性函式接口的实现细节部份包装、隐藏起来的方法。封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。要访问该类的代码和数据，必须通过严格的接口控制。封装最主要的功能在于我们能修改自己的实现代码，而不用修改那些调用我们代码的程序片段。适当的封装可以让程式码更容易理解与维护，也加强了程式码的安全性。</p><h3 id="封装的优点"><a href="#封装的优点" class="headerlink" title="封装的优点"></a>封装的优点</h3><ul><li>良好的封装能够减少耦合。</li><li>类内部的结构可以自由修改。</li><li>可以对成员变量进行更精确的控制。</li><li>隐藏信息，实现细节。</li></ul><h3 id="为什么要封装"><a href="#为什么要封装" class="headerlink" title="为什么要封装"></a>为什么要封装</h3><p>封装符合面向对象设计原则的第一条：单一性原则，一个类把自己该做的事情封装起来，而不是暴露给其他类去处理，当内部的逻辑发生变化时，外部调用不用因此而修改，他们只调用开放的接口，而不用去关心内部的实现。</p><h3 id="如何实现Java封装"><a href="#如何实现Java封装" class="headerlink" title="如何实现Java封装"></a>如何实现Java封装</h3><ol><li><p>修改属性的可见性来限制对属性的访问（一般限制为private），例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中，将 name 和 age 属性设置为私有的，只能本类才能访问，其他类都访问不了，如此就对信息进行了隐藏。</p></li><li><p>对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用 this 关键字是为了解决实例变量（private String name）和局部变量（ setName(String name)中的name变量）之间发生的同名的冲突。</p></li></ol><h3 id="Java封装使用实例"><a href="#Java封装使用实例" class="headerlink" title="Java封装使用实例"></a>Java封装使用实例</h3><p>封装类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncapTest</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String idNum;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getIdNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> idNum;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">( <span class="keyword">int</span> newAge)</span></span>&#123;</span><br><span class="line">      age = newAge;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String newName)</span></span>&#123;</span><br><span class="line">      name = newName;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdNum</span><span class="params">( String newId)</span></span>&#123;</span><br><span class="line">      idNum = newId;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例中 public 方法是外部类访问该类成员变量的入口。通常情况下，这些方法被称为 getter 和 setter 方法。因此，任何要访问类中私有成员变量的类都要通过这些 getter 和 setter 方法。通过如下的例子说明 EncapTest 类的变量怎样被访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunEncap</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      EncapTest encap = <span class="keyword">new</span> EncapTest();</span><br><span class="line">      encap.setName(<span class="string">"James"</span>);</span><br><span class="line">      encap.setAge(<span class="number">20</span>);</span><br><span class="line">      encap.setIdNum(<span class="string">"12343ms"</span>);</span><br><span class="line"> </span><br><span class="line">      System.out.print(<span class="string">"Name : "</span> + encap.getName()+ </span><br><span class="line">                             <span class="string">" Age : "</span>+ encap.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">Name : James Age : 20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承是java面向对象编程技术的一块基石，因为它允许创建分等级层次的类。继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。继承需要符合的关系是：is-a，父类更通用，子类更具体。</p><p>Java 的类可以分为三类：</p><ul><li>类：使用 class 定义，没有抽象方法</li><li>抽象类：使用 abstract class 定义，可以有也可以没有抽象方法</li><li>接口：使用 inerface 定义，只能有抽象方法</li></ul><p>在这三个类型之间存在如下关系：</p><ul><li>类可以 extends：类、抽象类（必须实现所有抽象方法），但只能 extends 一个，可以 implements 多个接口（必须实现所有接口方法）</li><li>抽象类可以 extends：类，抽象类（可全部、部分、或者完全不实现父类抽象方法），可以 implements 多个接口（可全部、部分、或者完全不实现接口方法）</li><li>接口只能 extends 一个接口</li></ul><p>继承以后子类可以得到什么：</p><ul><li>子类拥有父类非 private 的属性和方法</li><li>子类可以添加自己的方法和属性，即对父类进行扩展</li><li>子类可以重新定义父类的方法，即多态里面的覆盖，后面会详述</li></ul><h3 id="类的继承格式"><a href="#类的继承格式" class="headerlink" title="类的继承格式"></a>类的继承格式</h3><p>在 Java 中通过 extends 关键字可以申明一个类是从另外一个类继承而来的，一般形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 父类 </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承类型"><a href="#继承类型" class="headerlink" title="继承类型"></a>继承类型</h3><p><img src="http://qnya.pomo16.club/25.png" alt></p><h3 id="继承的特性"><a href="#继承的特性" class="headerlink" title="继承的特性"></a>继承的特性</h3><ul><li>子类拥有父类非private的属性，方法。</li><li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。</li><li>Java的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如A类继承B类，B类继承C类，所以按照关系就是C类是B类的父类，B类是A类的父类，这是java继承区别于C++继承的一个特性。</li><li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。</li></ul><h3 id="继承的关键字"><a href="#继承的关键字" class="headerlink" title="继承的关键字"></a>继承的关键字</h3><p>继承可以使用 extends 和 implements 这两个关键字来实现继承，而且所有的类都是继承于 java.lang.Object，当一个类没有继承的两个关键字，则默认继承 object（这个类在 java.lang 包中，所以不需要 import）祖先类。</p><ul><li><strong>extends</strong> 关键字：在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。</li><li><strong>implements</strong> 关键字：使用 implements 关键字可以变相的使 java 具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。</li><li><strong>super</strong> 关键字：我们可以通过 super 关键字来实现对父类成员的访问，用来引用当前对象的父类。</li><li><strong>this</strong> 关键字：指向自己的引用。</li><li><strong>final</strong> 关键字：final 关键字声明类可以把类定义为不能继承的，即最终类；或者用于修饰方法，该方法不能被子类重写。实例变量也可以被定义为 final，被定义为 final 的变量不能被修改。被声明为 final 类的方法自动地声明为 final，但是实例变量并不是 final。</li></ul><h3 id="关于继承中的构造器"><a href="#关于继承中的构造器" class="headerlink" title="关于继承中的构造器"></a>关于继承中的构造器</h3><p>子类是不继承父类的构造器（构造方法或者构造函数）的，它只是调用（隐式或显式）。如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 super 关键字调用父类的构造器并配以适当的参数列表。如果父类构造器没有参数，则在子类的构造器中不需要使用 super 关键字调用父类构造器，系统会自动调用父类的无参构造器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">  SuperClass()&#123;</span><br><span class="line">    System.out.println(<span class="string">"SuperClass()"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  SuperClass(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    System.out.println(<span class="string">"SuperClass(int n)"</span>);</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">  </span><br><span class="line">  SubClass()&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">300</span>);</span><br><span class="line">    System.out.println(<span class="string">"SubClass"</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SubClass</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"SubClass(int n):"</span>+n);</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSuperSub</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    SubClass sc = <span class="keyword">new</span> SubClass();</span><br><span class="line">    SubClass sc2 = <span class="keyword">new</span> SubClass(<span class="number">200</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">SuperClass(int n)</span></span><br><span class="line"><span class="comment">SubClass</span></span><br><span class="line"><span class="comment">SuperClass()</span></span><br><span class="line"><span class="comment">SubClass(int n):200</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态是同一个行为具有多个不同表现形式或形态的能力。多态就是同一个接口，使用不同的实例而执行不同操作。多态的好处：可以使程序有良好的扩展，并可以对所有类的对象进行通用处理。</p><h3 id="多态存在的三个必要条件"><a href="#多态存在的三个必要条件" class="headerlink" title="多态存在的三个必要条件"></a>多态存在的三个必要条件</h3><ul><li><p>继承：在多态中必须存在有继承关系的子类和父类。</p></li><li><p>重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。</p></li><li><p>向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parent p = <span class="keyword">new</span> Child();</span><br></pre></td></tr></table></figure></li></ul><h3 id="多态中的方法"><a href="#多态中的方法" class="headerlink" title="多态中的方法"></a>多态中的方法</h3><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，再去调用子类的同名方法。</p><p>当子类对象调用重写的方法时，调用的是子类的方法，而不是父类中被重写的方法。</p><p>要想调用父类中被重写的方法，则必须使用关键字super。</p><h3 id="多态的实现"><a href="#多态的实现" class="headerlink" title="多态的实现"></a>多态的实现</h3><ul><li><p><strong>继承</strong></p><p>基于继承的实现机制主要表现在父类和继承该父类的一个或多个子类对某些方法的重写，多个子类对同一方法的重写可以表现出不同的行为。</p><p>对于引用子类的父类类型，在处理该引用时，它适用于继承该父类的所有子类，子类对象的不同，对方法的实现也就不同，执行相同动作产生的行为也就不同。</p><p>如果父类是抽象类，那么子类必须要实现父类中所有的抽象方法，这样该父类所有的子类一定存在统一的对外接口，但其内部的具体实现可以各异。这样我们就可以使用顶层类提供的统一接口来处理该层次的方法。</p></li><li><p><strong>接口</strong></p><p>继承是通过重写父类的同一方法的几个不同子类来体现的，<br>接口就是通过实现接口并覆盖接口中同一方法的不同的类体现的。</p><p>在接口的多态中，指向接口的引用必须指定是实现了该接口的一个类的实例程序，在运行时，根据对象引用的实际类型来执行对应的方法。</p><p>继承都是单继承，只能为一组相关的类提供一致的服务接口。但是接口可以是多继承多实现，它能够利用一组相关或者不相关的接口进行组合与扩充，能够对外提供一致的服务接口。所以它相对于继承来说有更好的灵活性。</p></li></ul><h3 id="多态的经典实例"><a href="#多态的经典实例" class="headerlink" title="多态的经典实例"></a>多态的经典实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入参数的类型不同，使用的方法也不同，可传入D or A，输出AD or AA</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(D obj)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> (<span class="string">"A and D"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"A and A"</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//B继承自A，可传入B or A，输出BB or BA</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(B obj)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"B and B"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"B and A"</span>);  </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//C继承自B</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//D继承自B</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        A a1 = <span class="keyword">new</span> A();  </span><br><span class="line">        A a2 = <span class="keyword">new</span> B();  </span><br><span class="line">        B b = <span class="keyword">new</span> B();  </span><br><span class="line">        C c = <span class="keyword">new</span> C();  </span><br><span class="line">        D d = <span class="keyword">new</span> D();  </span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"1--"</span> + a1.show(b));  </span><br><span class="line">        System.out.println(<span class="string">"2--"</span> + a1.show(c));  </span><br><span class="line">        System.out.println(<span class="string">"3--"</span> + a1.show(d));  </span><br><span class="line">        System.out.println(<span class="string">"4--"</span> + a2.show(b));  </span><br><span class="line">        System.out.println(<span class="string">"5--"</span> + a2.show(c));  </span><br><span class="line">        System.out.println(<span class="string">"6--"</span> + a2.show(d));  </span><br><span class="line">        System.out.println(<span class="string">"7--"</span> + b.show(b));  </span><br><span class="line">        System.out.println(<span class="string">"8--"</span> + b.show(c));                                                 System.out.println(<span class="string">"9--"</span> + b.show(d));<span class="comment">//B b = new B(); ，B中无Show（D），所以看super父类A，A中有SHow（D），所以输出AD    </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">1--A and A  </span></span><br><span class="line"><span class="comment">2--A and A  </span></span><br><span class="line"><span class="comment">3--A and D  </span></span><br><span class="line"><span class="comment">4--B and A  </span></span><br><span class="line"><span class="comment">5--B and A  </span></span><br><span class="line"><span class="comment">6--A and D  </span></span><br><span class="line"><span class="comment">7--B and B  </span></span><br><span class="line"><span class="comment">8--B and B  </span></span><br><span class="line"><span class="comment">9--A and D</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的String,StringBuffer和StringBuilder类</title>
      <link href="/2018/11/12/Java%E7%9A%84String-StringBuffer%E5%92%8CStringBuilder%E7%B1%BB/"/>
      <url>/2018/11/12/Java%E7%9A%84String-StringBuffer%E5%92%8CStringBuilder%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#String">String</a></li><li><a href="#StringBuffer-和-StringBuilder">StringBuffer 和 StringBuilder</a></li><li><a href="#三者区别">三者区别</a></li><li><a href="#一些常用字符串实例">一些常用字符串实例</a></li></ul><p>三者继承结构：</p><p><img src="http://qnya.pomo16.club/24.png" alt></p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li><p><a href="#创建字符串">创建字符串</a></p></li><li><p><a href="#字符串长度">字符串长度</a></p></li><li><p><a href="#一些字符串常用方法">一些字符串常用方法</a></p></li></ul><p>String对象是不可变的，任何String类看起来会修改String值的方法实际上都是创建一个新的String对象。</p><p>特点：</p><ul><li><strong>final</strong>：String 被修饰为final,所以是<strong><font color="red">不能被继承</font></strong>的。</li><li><strong>immutable</strong>：immutable 是指<strong><font color="red">不可改变</font></strong>的，里面的内容永远无法改变，不可改变的具体含义是指：不能增加长度，不能减少长度，不能插入字符，不能删除字符，不能修改字符。String 的表现就像是一个常量。</li></ul><h3 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h3><p>字符串即字符的组合，在Java中，字符串是一个类，所以我们见到的字符串都是对象 。<br>String 类有 11 种构造方法，这些方法提供不同的参数来初始化字符串，常见创建字符串手段： </p><ol><li>每当有一个字面值出现的时候，虚拟机就会创建一个字符串 </li><li>调用String的构造方法创建一个字符串对象 </li><li>通过+加号进行字符串拼接也会创建新的字符串对象 </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String garen =<span class="string">"盖伦"</span>; <span class="comment">//字面值,虚拟机碰到字面值就会创建一个字符串对象</span></span><br><span class="line">         </span><br><span class="line">        String teemo = <span class="keyword">new</span> String(<span class="string">"提莫"</span>); <span class="comment">//创建了两个字符串对象</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">char</span>[] cs = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'崔'</span>,<span class="string">'斯'</span>,<span class="string">'特'</span>&#125;;</span><br><span class="line">         </span><br><span class="line">        String hero = <span class="keyword">new</span> String(cs);<span class="comment">//  通过字符数组创建一个字符串对象</span></span><br><span class="line">         </span><br><span class="line">        String hero3 = garen + teemo;<span class="comment">//  通过+加号进行字符串拼接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color="red">new String()和new String(“”)都是申明一个新的空字符串，是空串不是null</font></strong></p><h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><p>用于获取有关对象的信息的方法称为访问器方法。String 类的一个访问器方法是 length() 方法，它返回字符串对象包含的字符数，可以有长度为0的字符串，即空字符串。用法 stringName.length()。</p><h3 id="一些字符串常用方法"><a href="#一些字符串常用方法" class="headerlink" title="一些字符串常用方法"></a>一些字符串常用方法</h3><p><img src="http://qnya.pomo16.club/21.png" alt></p><p><img src="http://qnya.pomo16.club/22.png" alt></p><p><img src="http://qnya.pomo16.club/23.png" alt></p><h2 id="StringBuffer-和-StringBuilder"><a href="#StringBuffer-和-StringBuilder" class="headerlink" title="StringBuffer 和 StringBuilder"></a>StringBuffer 和 StringBuilder</h2><p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</p><p>和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</p><p>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。</p><p>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p><h3 id="StringBuffer常用方法"><a href="#StringBuffer常用方法" class="headerlink" title="StringBuffer常用方法"></a>StringBuffer常用方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public StringBuffer append(String s)</td><td>将指定的字符串追加到此字符序列。</td></tr><tr><td>public StringBuffer reverse()</td><td>将此字符序列用其反转形式取代。</td></tr><tr><td>public delete(int start, int end)</td><td>移除此序列的子字符串中的字符。</td></tr><tr><td>public insert(int offset, int i)</td><td>将 <code>int</code> 参数的字符串表示形式插入此序列中。</td></tr><tr><td>replace(int start, int end, String str)</td><td>使用给定 <code>String</code> 中的字符替换此序列的子字符串中的字符。</td></tr><tr><td>int capacity()</td><td>返回当前容量。</td></tr><tr><td>char charAt(int index)</td><td>返回此序列中指定索引处的 <code>char</code> 值。</td></tr><tr><td>void ensureCapacity(int minimumCapacity)</td><td>确保容量至少等于指定的最小值。</td></tr><tr><td>void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</td><td>将字符从此序列复制到目标字符数组 <code>dst</code>。</td></tr><tr><td>int indexOf(String str)</td><td>返回第一次出现的指定子字符串在该字符串中的索引。</td></tr><tr><td>int indexOf(String str, int fromIndex)</td><td>从指定的索引处开始，返回第一次出现的指定子字符串在该字符串中的索引。</td></tr><tr><td>int lastIndexOf(String str)</td><td>返回最右边出现的指定子字符串在此字符串中的索引。</td></tr><tr><td>int lastIndexOf(String str, int fromIndex)</td><td>返回 String 对象中子字符串最后出现的位置。</td></tr><tr><td>int length()</td><td>返回长度（字符数）。</td></tr><tr><td>void setCharAt(int index, char ch)</td><td>将给定索引处的字符设置为 <code>ch</code>。</td></tr><tr><td>void setLength(int newLength)</td><td>设置字符序列的长度。</td></tr><tr><td>CharSequence subSequence(int start, int end)</td><td>返回一个新的字符序列，该字符序列是此序列的子序列。</td></tr><tr><td>String substring(int start)</td><td>返回一个新的 <code>String</code>，它包含此字符序列当前所包含的字符子序列。</td></tr><tr><td>String substring(int start, int end)</td><td>返回一个新的 <code>String</code>，它包含此序列当前所包含的字符子序列。</td></tr><tr><td>String toString()</td><td>返回此序列中数据的字符串表示形式。</td></tr></tbody></table><h2 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h2><ol><li><p>运行速度：<strong><font color="red">StringBuilder &gt; StringBuffer &gt; String</font></strong></p><p>why：String长度不可变，每次操作都是不断地创建新的对象并不断触发GC(Garbage Collection，垃圾回收机制)。而StringBuilder则不会，它从头到尾一直是一个实例对象。实现方法是初始化的时候放在一个叫value的char数组里，而数组是可以扩容的，这样就无需创建新的对象。源码中，数组默认的初始长度是16,也可以根据构造方法指定。扩容系数: value.length * 2 + 2,而且只有当append是数据长度+value.count &gt; value.length时才会扩容一次,不会每次都扩容去调用Arrays.copyof()。</p></li><li><p>线程安全：<strong>在线程安全上，StringBuilder 是线程不安全的，而 StringBuffer 是线程安全的</strong>。如果要进行的操作是多线程的，那么就要使用 StringBuffer，但是在单线程的情况下，还是建议使用速度比较快的 StringBuilder。</p></li><li><p>初始化上的区别：String可以空赋值，StringBuffer 和 StringBuilder 不行。</p></li><li><p>字符修改上的区别：</p><p>String：不可变字符串</p><p>StringBuffer：可变字符串</p><p>StringBuilder：可变字符序列</p></li><li><p>适用场景</p><p><strong>String：适用于少量的字符串操作的情况</strong></p><p><strong>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况</strong></p><p><strong>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</strong></p></li></ol><h2 id="一些常用字符串实例"><a href="#一些常用字符串实例" class="headerlink" title="一些常用字符串实例"></a>一些常用字符串实例</h2><font color="#ccc">以下内容搬运自菜鸟教程</font><ul><li><a href="#字符串比较">字符串比较</a></li><li><a href="#查找字符串最后一次出现的位置">查找字符串最后一次出现的位置</a></li><li><a href="#删除字符串中的一个字符">删除字符串中的一个字符</a></li><li><a href="#字符串替换">字符串替换</a></li><li><a href="#字符串反转">字符串反转</a></li><li><a href="#字符串查找">字符串查找</a></li><li><a href="#字符串分割">字符串分割</a></li><li><a href="#字符串分割(StringTokenizer">字符串分割(StringTokenizer)</a>)</li><li><a href="#字符串小写转大写">字符串小写转大写</a></li><li><a href="#测试两个字符串区域是否相等">测试两个字符串区域是否相等</a></li><li><a href="#字符串性能比较测试">字符串性能比较测试</a></li><li><a href="#字符串优化">字符串优化</a></li><li><a href="#字符串格式化">字符串格式化</a></li><li><a href="#连接字符串">连接字符串</a></li></ul><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><p>以下实例中我们通过字符串函数 compareTo (string) ，compareToIgnoreCase(String) 及 compareTo(object string) 来比较两个字符串，并返回字符串中第一个字母ASCII的差值。</p><p>实例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringCompareEmp</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      String str = <span class="string">"Hello World"</span>;</span><br><span class="line">      String anotherString = <span class="string">"hello world"</span>;</span><br><span class="line">      Object objStr = str;</span><br><span class="line"> </span><br><span class="line">      System.out.println( str.compareTo(anotherString) );</span><br><span class="line">      System.out.println( str.compareToIgnoreCase(anotherString) );  <span class="comment">//忽略大小写</span></span><br><span class="line">      System.out.println( str.compareTo(objStr.toString()));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">-32</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>compareTo() 方法的实现思路：两个字符数组依次从前开始比较，如果对象位置出现字符不同则返回两个字符的编码之差，后面的字符不再比较；如果两个字符数组的长度不一样，并且较短的数组和较长数组所有对应位置的字符都相同，则返回两个数组的长度之差。</p><h3 id="查找字符串最后一次出现的位置"><a href="#查找字符串最后一次出现的位置" class="headerlink" title="查找字符串最后一次出现的位置"></a>查找字符串最后一次出现的位置</h3><p>以下实例中我们通过字符串函数 strOrig.lastIndexOf(Stringname) 来查找子字符串 Stringname 在 strOrig 出现的位置：</p><p>实例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchlastString</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      String strOrig = <span class="string">"Hello world ,Hello Runoob"</span>;</span><br><span class="line">      <span class="keyword">int</span> lastIndex = strOrig.lastIndexOf(<span class="string">"Runoob"</span>);</span><br><span class="line">      <span class="keyword">if</span>(lastIndex == - <span class="number">1</span>)&#123;</span><br><span class="line">         System.out.println(<span class="string">"没有找到字符串 Runoob"</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Runoob 字符串最后出现的位置： "</span>+ lastIndex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">Runoob 字符串最后出现的位置： 19</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="删除字符串中的一个字符"><a href="#删除字符串中的一个字符" class="headerlink" title="删除字符串中的一个字符"></a>删除字符串中的一个字符</h3><p>以下实例中我们通过字符串函数 substring() 函数来删除字符串中的一个字符，我们将功能封装在 removeCharAt 函数中。</p><p>实例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      String str = <span class="string">"this is Java"</span>;</span><br><span class="line">      System.out.println(removeCharAt(str, <span class="number">3</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">removeCharAt</span><span class="params">(String s, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> s.substring(<span class="number">0</span>, pos) + s.substring(pos + <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">thi is Java</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><p>以下实例中我们使用 java String 类的 replace 方法来替换字符串中的字符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringReplaceEmp</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      String str=<span class="string">"Hello World"</span>;</span><br><span class="line">      System.out.println( str.replace( <span class="string">'H'</span>,<span class="string">'W'</span> ) );</span><br><span class="line">      System.out.println( str.replaceFirst(<span class="string">"He"</span>, <span class="string">"Wa"</span>) );</span><br><span class="line">      System.out.println( str.replaceAll(<span class="string">"He"</span>, <span class="string">"Ha"</span>) );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">Wello World</span></span><br><span class="line"><span class="comment">Wallo World</span></span><br><span class="line"><span class="comment">Hallo World</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h3><p>以下实例演示了如何使用 Java 的反转函数 reverse() 将字符串反转：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringReverseExample</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      String string=<span class="string">"runoob"</span>;</span><br><span class="line">      String reverse = <span class="keyword">new</span> StringBuffer(string).reverse().toString();</span><br><span class="line">      System.out.println(<span class="string">"字符串反转前:"</span>+string);</span><br><span class="line">      System.out.println(<span class="string">"字符串反转后:"</span>+reverse);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">字符串反转前:runoob</span></span><br><span class="line"><span class="comment">字符串反转后:boonur</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h3><p>以下实例使用了 String 类的 indexOf() 方法在字符串中查找子字符串出现的位置，如果存在返回字符串出现的位置（第一位为0），如果不存在返回 -1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchStringEmp</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      String strOrig = <span class="string">"Google Runoob Taobao"</span>;</span><br><span class="line">      <span class="keyword">int</span> intIndex = strOrig.indexOf(<span class="string">"Runoob"</span>);</span><br><span class="line">      <span class="keyword">if</span>(intIndex == - <span class="number">1</span>)&#123;</span><br><span class="line">         System.out.println(<span class="string">"没有找到字符串 Runoob"</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Runoob 字符串位置 "</span> + intIndex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">Runoob 字符串位置 7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h3><p>以下实例使用了 split(string) 方法通过指定分隔符将字符串分割为数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaStringSplitEmp</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      String str1 = <span class="string">"www.runoob.com"</span>;</span><br><span class="line">      String[] temp1;</span><br><span class="line">      String delimeter1 = <span class="string">"\\."</span>;  <span class="comment">// 指定分割字符， . 号需要转义</span></span><br><span class="line">      temp1 = str1.split(delimeter1); <span class="comment">// 分割字符串</span></span><br><span class="line">      <span class="keyword">for</span>(String x :  temp1)&#123;</span><br><span class="line">         System.out.println(x);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">www</span></span><br><span class="line"><span class="comment">runoob</span></span><br><span class="line"><span class="comment">com</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="字符串分隔-StringTokenizer"><a href="#字符串分隔-StringTokenizer" class="headerlink" title="字符串分隔(StringTokenizer)"></a>字符串分隔(StringTokenizer)</h2><p>Java 中我们可以使用 <a href="http://www.runoob.com/w3cnote/java-stringtokenizer-intro.html" target="_blank" rel="noopener">StringTokenizer</a> 设置不同分隔符来分隔字符串，默认的分隔符是：空格、制表符（\t）、换行符(\n）、回车符（\r）。</p><p>以下实例演示了 StringTokennizer 使用空格和等号来分隔字符串:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"This is String , split by StringTokenizer, created by runoob"</span>;</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(str);</span><br><span class="line"> System.out.println(<span class="string">"----- 通过空格分隔 ------"</span>);</span><br><span class="line">        <span class="keyword">while</span> (st.hasMoreElements()) &#123;</span><br><span class="line">            System.out.println(st.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"----- 通过逗号分隔 ------"</span>);</span><br><span class="line">        StringTokenizer st2 = <span class="keyword">new</span> StringTokenizer(str, <span class="string">","</span>);</span><br><span class="line">        <span class="keyword">while</span> (st2.hasMoreElements()) &#123;</span><br><span class="line">            System.out.println(st2.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">----- 通过空格分隔 ------</span></span><br><span class="line"><span class="comment">This</span></span><br><span class="line"><span class="comment">is</span></span><br><span class="line"><span class="comment">String</span></span><br><span class="line"><span class="comment">,</span></span><br><span class="line"><span class="comment">split</span></span><br><span class="line"><span class="comment">by</span></span><br><span class="line"><span class="comment">StringTokenizer,</span></span><br><span class="line"><span class="comment">created</span></span><br><span class="line"><span class="comment">by</span></span><br><span class="line"><span class="comment">runoob</span></span><br><span class="line"><span class="comment">----- 通过等号分隔 ------</span></span><br><span class="line"><span class="comment">This is String </span></span><br><span class="line"><span class="comment"> split by StringTokenizer</span></span><br><span class="line"><span class="comment"> created by runoob</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="字符串小写转大写"><a href="#字符串小写转大写" class="headerlink" title="字符串小写转大写"></a>字符串小写转大写</h3><p>以下实例使用了 String toUpperCase() 方法将字符串从小写转为大写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToUpperCaseEmp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"string runoob"</span>;</span><br><span class="line">        String strUpper = str.toUpperCase();</span><br><span class="line">        System.out.println(<span class="string">"原始字符串: "</span> + str);</span><br><span class="line">        System.out.println(<span class="string">"转换为大写: "</span> + strUpper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">原始字符串: string runoob</span></span><br><span class="line"><span class="comment">转换为大写: STRING RUNOOB</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="测试两个字符串区域是否相等"><a href="#测试两个字符串区域是否相等" class="headerlink" title="测试两个字符串区域是否相等"></a>测试两个字符串区域是否相等</h2><p>以下实例使用了 regionMatches() 方法测试两个字符串区域是否相等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringRegionMatch</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      String first_str = <span class="string">"Welcome to Microsoft"</span>;</span><br><span class="line">      String second_str = <span class="string">"I work with microsoft"</span>;</span><br><span class="line">      <span class="keyword">boolean</span> match1 = first_str.</span><br><span class="line">      regionMatches(<span class="number">11</span>, second_str, <span class="number">12</span>, <span class="number">9</span>);</span><br><span class="line">      <span class="keyword">boolean</span> match2 = first_str.</span><br><span class="line">      regionMatches(<span class="keyword">true</span>, <span class="number">11</span>, second_str, <span class="number">12</span>, <span class="number">9</span>); <span class="comment">//第一个参数 true 表示忽略大小写区别</span></span><br><span class="line">      System.out.println(<span class="string">"区分大小写返回值："</span> + match1);</span><br><span class="line">      System.out.println(<span class="string">"不区分大小写返回值："</span> + match2);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">区分大小写返回值：false </span></span><br><span class="line"><span class="comment">不区分大小写返回值：true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>first_str.regionMatches(11, second_str, 12, 9)</strong> 表示将 <em>first_str</em> 字符串从第11个字符”M”开始和 <em>second_str</em> 字符串的第12个字符”M”开始逐个比较，共比较 9 对字符，由于字符串区分大小写，所以结果为false。如果设置第一个参数为 true ，则表示忽略大小写区别，所以返回 true。</p><h2 id="字符串性能比较测试"><a href="#字符串性能比较测试" class="headerlink" title="字符串性能比较测试"></a>字符串性能比较测试</h2><p>以下实例演示了通过两种方式创建字符串，并测试其性能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringComparePerformance</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;      </span><br><span class="line">      <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50000</span>;i++)&#123;</span><br><span class="line">         String s1 = <span class="string">"hello"</span>;</span><br><span class="line">         String s2 = <span class="string">"hello"</span>; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">      System.out.println(<span class="string">"通过 String 关键词创建字符串"</span> </span><br><span class="line">      + <span class="string">" : "</span>+ (endTime - startTime) </span><br><span class="line">      + <span class="string">" 毫秒"</span> );</span><br><span class="line">       </span><br><span class="line">      <span class="keyword">long</span> startTime1 = System.currentTimeMillis();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50000</span>;i++)&#123;</span><br><span class="line">         String s3 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">         String s4 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">long</span> endTime1 = System.currentTimeMillis();</span><br><span class="line">      System.out.println(<span class="string">"通过 String 对象创建字符串"</span> </span><br><span class="line">      + <span class="string">" : "</span> + (endTime1 - startTime1)</span><br><span class="line">      + <span class="string">" 毫秒"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">通过 String 关键词创建字符串 : 6 毫秒 </span></span><br><span class="line"><span class="comment">通过 String 对象创建字符串 : 14 毫秒</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="字符串优化"><a href="#字符串优化" class="headerlink" title="字符串优化"></a>字符串优化</h3><p>intern()方法设计的初衷，就是重用String对象，以节省内存消耗。但是缺点是比较耗时。</p><p>以下实例演示了通过 String.intern() 方法来优化字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringOptimization</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String variables[] = <span class="keyword">new</span> String[<span class="number">50000</span>];      </span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>;i &lt;<span class="number">50000</span>;i++)&#123;</span><br><span class="line">            variables[i] = <span class="string">"s"</span>+i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> startTime0 = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50000</span>;i++)&#123;</span><br><span class="line">            variables[i] = <span class="string">"hello"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime0 = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"直接使用字符串： "</span>+ (endTime0 - startTime0)  + <span class="string">" ms"</span> );</span><br><span class="line">        <span class="keyword">long</span> startTime1 = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50000</span>;i++)&#123;</span><br><span class="line">            variables[i] = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime1 = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"使用 new 关键字："</span> + (endTime1 - startTime1) + <span class="string">" ms"</span>);</span><br><span class="line">        <span class="keyword">long</span> startTime2 = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50000</span>;i++)&#123;</span><br><span class="line">            variables[i] = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">            variables[i] = variables[i].intern();          </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime2 = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"使用字符串对象的 intern() 方法: "</span> </span><br><span class="line">        + (endTime2 - startTime2)</span><br><span class="line">        + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">直接使用字符串： 3 ms</span></span><br><span class="line"><span class="comment">使用 new 关键字：5 ms</span></span><br><span class="line"><span class="comment">使用字符串对象的 intern() 方法: 10 ms</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>存在于 .class 文件中的常量池(常量池( constant pool )指的是在编译期被确定，并被保存在已编译的 .class 文件中的一些数据。它包括了关于类、方法、接口等中的常量，也包括字符串常量。)，在运行期被 JVM 装载，并且可以扩充。String 的 intern() 方法就是扩充常量池的一个方法；当一个 String 实例 str 调用 intern() 方法时，Java 查找常量池中是否有相同 Unicode 的字符串常量，如果有，则返回其的引用，如果没有，则在常量池中增加一个Unicode等于str的字符串并返回它的引用。</p><h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><p>以下实例演示了通过 format() 方法来格式化字符串，还可以指定地区来格式化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringFormat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> e = Math.E;</span><br><span class="line">        System.out.format(<span class="string">"%f%n"</span>, e);</span><br><span class="line">        System.out.format(Locale.CHINA  , <span class="string">"%-10.4f%n%n"</span>, e);  <span class="comment">//指定本地为中国（CHINA）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">2.718282</span></span><br><span class="line"><span class="comment">2.7183</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h3><p>以下实例演示了通过 “+” 操作符和StringBuffer.append() 方法来连接字符串，并比较其性能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     String result1 = <span class="keyword">null</span>;</span><br><span class="line">     StringBuffer result = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5000</span>;i++)&#123;</span><br><span class="line">            result1 += <span class="string">"This is"</span></span><br><span class="line">            + <span class="string">"testing the"</span></span><br><span class="line">            + <span class="string">"difference"</span>+ <span class="string">"between"</span></span><br><span class="line">            + <span class="string">"String"</span>+ <span class="string">"and"</span>+ <span class="string">"StringBuffer"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"字符串连接"</span> </span><br><span class="line">        + <span class="string">" - 使用 + 操作符 : "</span> </span><br><span class="line">        + (endTime - startTime)+ <span class="string">" ms"</span>);</span><br><span class="line">        <span class="keyword">long</span> startTime1 = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5000</span>;i++)&#123;</span><br><span class="line">            </span><br><span class="line">            result.append(<span class="string">"This is"</span>);</span><br><span class="line">            result.append(<span class="string">"testing the"</span>);</span><br><span class="line">            result.append(<span class="string">"difference"</span>);</span><br><span class="line">            result.append(<span class="string">"between"</span>);</span><br><span class="line">            result.append(<span class="string">"String"</span>);</span><br><span class="line">            result.append(<span class="string">"and"</span>);</span><br><span class="line">            result.append(<span class="string">"StringBuffer"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime1 = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"字符串连接"</span> </span><br><span class="line">        + <span class="string">" - 使用 StringBuffer : "</span></span><br><span class="line">        + (endTime1 - startTime1)+ <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">字符串连接 - 使用 + 操作符 : 1151 ms</span></span><br><span class="line"><span class="comment">字符串连接 - 使用 StringBuffer : 2 ms</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>当需要对字符串对象的长度进行变化时，用 + 拼接的性能在循环时就会慢的慢的多，实际上 + 号拼接字符串也是通过 StringBuild 或 StringBuffer 实现的，但当进行频繁的修改本身时，+ 拼接会比直接用方法拼接产生更多的中间垃圾对象，耗用更多的内存，因此更推荐使用 StringBuild。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组</title>
      <link href="/2018/11/12/Java%E6%95%B0%E7%BB%84/"/>
      <url>/2018/11/12/Java%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Java-里的数组">Java 里的数组</a></li><li><a href="#声明数组变量">声明数组变量</a></li><li><a href="#初始化数组">初始化数组</a></li><li><a href="#处理数组">处理数组</a></li><li><a href="#多维数组">多维数组</a></li><li><a href="#复制数组">复制数组</a></li><li><a href="#Arrays类">Arrays类</a></li><li><a href="#一些常见数组实例">一些常见数组实例</a></li></ul><h2 id="Java-里的数组"><a href="#Java-里的数组" class="headerlink" title="Java 里的数组"></a>Java 里的数组</h2><p>​数组是一个<strong><font color="red">固定长度</font></strong>的，包含了<strong><font color="red">相同类型数据</font></strong>的无序排列的容器。</p><p>​在 Java 中，数组属于引用数据类型。访问时直接由下标访问。数组只有一个唯一的属性，length。length 可以用来获取数组中能存储的元素个数。用法为： 数组名.length。(注: length 的计数从1开始，数组下标的计数从0开始，所以<strong>索引值从 0 到 arrayRefVar.length - 1</strong>)</p><p>​在存储空间的分配上，<strong>数组名和数组的首地址被存放在内存的栈空间，而数组的内容被分配在堆空间。</strong>数组操作中，只开辟了栈内的空间，数组是无法使用的，必须有指向堆内存才可以使用，开辟堆内存空间需要使用new关键字，之后就是将对内存的使用权交给对应的栈内存，一个堆内存空间可以被多个栈内存指向。二维数组元素空间的分配有时会分配为一个大空间，有时会分配为多个小空间，视内存空间而定。二维数组根据定义方式的不同，就有可能变为并不规则的数组，行数乘列数就不一定等于数组长度。</p><h2 id="声明数组变量"><a href="#声明数组变量" class="headerlink" title="声明数组变量"></a>声明数组变量</h2><p>首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar;   <span class="comment">// 首选的方法</span></span><br><span class="line">dataType arrayRefVar[];  <span class="comment">// 效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure><h2 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h2><p>​Java 数组对象自动初始化为 null，范围检查保证了数组无法越界访问。数组元素中的基本数据类型值会自动初始化成空值(对于数字和字符，就是0;对于布尔型，是 false )。如果创建的是一个引用数组，需要先创建新的对象，并把对象赋值给引用，初始化才算结束。如果忘记了创建对象，并且试图使用数组中的空引用，就会在运行时产生异常。</p><p>使用 new 操作符来创建数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayRefVar = <span class="keyword">new</span> dataType[arraySize];</span><br></pre></td></tr></table></figure><p>数组变量的声明，和创建数组可以用一条语句完成，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> dataType[arraySize];</span><br><span class="line">dataType[] arrayRefVar = &#123;value0, value1, ..., valuek&#125;;</span><br><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> dataType[]&#123;value0, value1, ..., valuek&#125;;</span><br></pre></td></tr></table></figure><h3 id="静态初始化和动态初始化"><a href="#静态初始化和动态初始化" class="headerlink" title="静态初始化和动态初始化"></a>静态初始化和动态初始化</h3><p>​静态初始化和动态初始化开始都指定了数组大小，java也在栈空间分配了相应的大小，只是静态初始化开始就指定了值，而动态初始化是在后面指定数组的值，刚开始数组的值都是默认值。</p><p>​数组静态初始化，初始化为给定值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><p>​数组动态初始化，初始化为空值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] intArray;<span class="comment">//声明数组</span></span><br><span class="line">intArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];<span class="comment">//为数组分配空间</span></span><br></pre></td></tr></table></figure><h2 id="处理数组"><a href="#处理数组" class="headerlink" title="处理数组"></a>处理数组</h2><p>​数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本循环或者 foreach 循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArray</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span>[] myList = &#123;<span class="number">1.9</span>, <span class="number">2.9</span>, <span class="number">3.4</span>, <span class="number">3.5</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 普通for语法打印所有数组元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myList.length; i++) &#123;</span><br><span class="line">        System.out.println(myList[i]);</span><br><span class="line">     &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// foreach语法打印所有数组元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">double</span> element: myList) &#123;</span><br><span class="line">        System.out.println(element);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>​JDK 1.5 引进了一种新的循环类型，被称为 foreach 循环或者加强型循环，它能在不使用下标的情况下遍历数组。语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Type ATypeName : TheSameTypeArray) &#123;</span><br><span class="line">statement; &#125;</span><br></pre></td></tr></table></figure><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>​多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str[][] = <span class="keyword">new</span> String[<span class="number">3</span>][<span class="number">4</span>];</span><br></pre></td></tr></table></figure><p>​对二维数组中的每个元素，引用方式为 <code>arrayName[index1][index2]</code>。</p><h2 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h2><p>​System 提供了一个静态方法 arraycopy()，我们可以使用它来实现数组之间的复制。用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.arraycopy(src, srcPos, dest, destPos, length)</span><br></pre></td></tr></table></figure><ul><li>src: 源数组</li><li>srcPos: 从源数组复制数据的起始位置</li><li>dest: 目标数组</li><li>destPos: 复制到目标数组的起始位置</li><li>length: 复制的长度</li></ul><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><p>​java.util.Arrays 类能方便地操作数组，可以进行排序，查找，复制填充等功能，它提供的所有方法都是静态的。常用方法如下：</p><ul><li><a href="#copyOfRange">copyOfRange</a></li><li><a href="#fill">fill</a></li><li><a href="#sort">sort</a></li><li><a href="#toString(">toString()</a>)</li><li><a href="#binarySearch">binarySearch</a></li><li><a href="#equals">equals</a></li></ul><h3 id="copyOfRange"><a href="#copyOfRange" class="headerlink" title="copyOfRange"></a>copyOfRange</h3><ul><li>功能：数组复制</li><li>说明：与 <a href="#复制数组">arraycopy()</a> 类似的， Arrays提供了一个copyOfRange方法进行数组复制。不同的是System.arraycopy，需要事先准备好目标数组，并分配长度。 copyOfRange 只需要源数组就就可以了，通过返回值，就能够得到目标数组了。除此之外，需要注意的是 copyOfRange 的第3个参数，表示源数组的结束位置，是取不到的。</li><li><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span> &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// copyOfRange(int[] original, int from, int to)</span></span><br><span class="line">        <span class="comment">// 第一个参数表示源数组</span></span><br><span class="line">        <span class="comment">// 第二个参数表示开始位置(取得到)</span></span><br><span class="line">        <span class="comment">// 第三个参数表示结束位置(取不到)</span></span><br><span class="line">        <span class="keyword">int</span>[] b = Arrays.copyOfRange(a, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">            System.out.print(b[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">18 62 68</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><ul><li>功能：使用同一个值，填充整个数组</li><li>说明：将指定的值分配给指定类型数组指定范围中的每个元素。适用于所有的基本数据类型。</li><li><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">  </span><br><span class="line">        Arrays.fill(a, <span class="number">5</span>);</span><br><span class="line">  </span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output：</span></span><br><span class="line"><span class="comment">[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><ul><li>功能：对数组排序</li><li>说明：将指定的值分配给指定类型数组指定范围中的每个元素。适用于所有的基本数据类型。</li></ul><ul><li><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span> &#125;;</span><br><span class="line">        System.out.println(<span class="string">"排序之前 :"</span>);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">        System.out.println(<span class="string">"排序之后:"</span>);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output：</span></span><br><span class="line"><span class="comment">排序之前：</span></span><br><span class="line"><span class="comment">[18, 62, 68, 82, 65, 9]</span></span><br><span class="line"><span class="comment">排序之后：</span></span><br><span class="line"><span class="comment">[9, 18, 62, 65, 68, 82]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><ul><li>功能：转换为字符串</li><li>说明：直接把一个数组转换为字符串，这样方便观察数组的内容。</li><li><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span> &#125;;</span><br><span class="line">        String content = Arrays.toString(a);</span><br><span class="line">        System.out.println(content);</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">[18, 62, 68, 82, 65, 9]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="binarySearch"><a href="#binarySearch" class="headerlink" title="binarySearch"></a>binarySearch</h3><ul><li>功能：查找数组元素</li><li>说明：用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。需要注意的是，使用 binarySearch 进行查找之前，必须使用 sort 进行排序。如果数组中有多个相同的元素，查找结果是不确定的。如果查找值包含在数组中，则返回搜索键的索引；否则返回-1或(-插入点)。插入点是索引键将要插入数组的那一点，即第一个大于该键的元素的索引。</li><li><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span> &#125;;</span><br><span class="line"> </span><br><span class="line">        Arrays.sort(a);</span><br><span class="line"> </span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        <span class="comment">//使用binarySearch之前，必须先使用sort进行排序</span></span><br><span class="line">        System.out.println(<span class="string">"数字 62出现的位置:"</span>+Arrays.binarySearch(a, <span class="number">62</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">[9, 18, 62, 65, 68, 82]</span></span><br><span class="line"><span class="comment">数字 62出现的位置:2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h3><ul><li>功能：比较数组</li><li>说明：如果两个指定的数组彼此相等，则返回 true。如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。适用于所有的基本数据类型。</li><li>实例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span> &#125;;</span><br><span class="line">        <span class="keyword">int</span> b[] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">8</span> &#125;;</span><br><span class="line"> </span><br><span class="line">        System.out.println(Arrays.equals(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="一些常见数组实例"><a href="#一些常见数组实例" class="headerlink" title="一些常见数组实例"></a>一些常见数组实例</h2><font color="#ccc">以下内容搬运自菜鸟教程</font><ul><li><a href="#数组排序及元素查找">数组排序及元素查找</a></li><li><a href="#数组添加元素">数组添加元素</a></li><li><a href="#获取数组长度">获取数组长度</a></li><li><a href="#数组反转">数组反转</a></li><li><a href="#数组输出">数组输出</a></li><li><a href="#数组获取最大和最小值">数组获取最大和最小值</a></li><li><a href="#数组合并">数组合并</a></li><li><a href="#数组填充">数组填充</a></li><li><a href="#数组扩容">数组扩容</a></li><li><a href="#查找数组中的重复元素">查找数组中的重复元素</a></li><li><a href="#删除数组元素">删除数组元素</a></li><li><a href="#数组差集">数组差集</a></li><li><a href="#数组交集">数组交集</a></li><li><a href="#在数组中查找指定元素">在数组中查找指定元素</a></li><li><a href="#判断数组是否相等">判断数组是否相等</a></li><li><a href="#数组并集">数组并集</a></li></ul><h3 id="数组排序及元素查找"><a href="#数组排序及元素查找" class="headerlink" title="数组排序及元素查找"></a>数组排序及元素查找</h3><p>以下实例演示了如何使用sort()方法对Java数组进行排序，及如何使用 binarySearch() 方法来查找数组中的元素, 这边我们定义了 printArray() 方法来打印数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> array[] = &#123; <span class="number">2</span>, <span class="number">5</span>, -<span class="number">2</span>, <span class="number">6</span>, -<span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, -<span class="number">7</span>, -<span class="number">9</span>, <span class="number">4</span> &#125;;</span><br><span class="line">        Arrays.sort(array);</span><br><span class="line">        printArray(<span class="string">"数组排序结果为"</span>, array);</span><br><span class="line">        <span class="keyword">int</span> index = Arrays.binarySearch(array, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"元素 2  在第 "</span> + index + <span class="string">" 个位置"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(String message, <span class="keyword">int</span> array[])</span> </span>&#123;</span><br><span class="line">        System.out.println(message</span><br><span class="line">        + <span class="string">": [length: "</span> + array.length + <span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.print(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">数组排序结果为: [length: 10] -9, -7, -3, -2, 0, 2, 4, 5, 6, 8</span></span><br><span class="line"><span class="comment">元素 2 在第 5 个位置</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="数组添加元素"><a href="#数组添加元素" class="headerlink" title="数组添加元素"></a>数组添加元素</h3><p>以下实例演示了如何使用sort()方法对Java数组进行排序，及如何使用 insertElement () 方法向数组插入元素, 这边我们定义了 printArray() 方法来打印数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> array[] = &#123; <span class="number">2</span>, <span class="number">5</span>, -<span class="number">2</span>, <span class="number">6</span>, -<span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, -<span class="number">7</span>, -<span class="number">9</span>, <span class="number">4</span> &#125;;</span><br><span class="line">      Arrays.sort(array);</span><br><span class="line">      printArray(<span class="string">"数组排序"</span>, array);</span><br><span class="line">      <span class="keyword">int</span> index = Arrays.binarySearch(array, <span class="number">1</span>);</span><br><span class="line">      System.out.println(<span class="string">"元素 1 所在位置（负数为不存在）："</span></span><br><span class="line">      + index);  </span><br><span class="line">      <span class="keyword">int</span> newIndex = -index - <span class="number">1</span>;</span><br><span class="line">      array = insertElement(array, <span class="number">1</span>, newIndex);</span><br><span class="line">      printArray(<span class="string">"数组添加元素 1"</span>, array);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(String message, <span class="keyword">int</span> array[])</span> </span>&#123;</span><br><span class="line">      System.out.println(message</span><br><span class="line">      + <span class="string">": [length: "</span> + array.length + <span class="string">"]"</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (i != <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.print(<span class="string">", "</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.print(array[i]);         </span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertElement(<span class="keyword">int</span> original[],</span><br><span class="line">   <span class="keyword">int</span> element, <span class="keyword">int</span> index) &#123;</span><br><span class="line">      <span class="keyword">int</span> length = original.length;</span><br><span class="line">      <span class="keyword">int</span> destination[] = <span class="keyword">new</span> <span class="keyword">int</span>[length + <span class="number">1</span>];</span><br><span class="line">      System.arraycopy(original, <span class="number">0</span>, destination, <span class="number">0</span>, index);</span><br><span class="line">      destination[index] = element;</span><br><span class="line">      System.arraycopy(original, index, destination, index</span><br><span class="line">      + <span class="number">1</span>, length - index);</span><br><span class="line">      <span class="keyword">return</span> destination;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">数组排序: [length: 10] -9, -7, -3, -2, 0, 2, 4, 5, 6, 8 </span></span><br><span class="line"><span class="comment">元素 1 所在位置（负数为不存在）：-6 </span></span><br><span class="line"><span class="comment">数组添加元素 1: [length: 11] -9, -7, -3, -2, 0, 1, 2, 4, 5, 6, 8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h3><p>使用数组的属性 length 来获取数组的长度，以下实例中我们定义了二维数组，并获取数组的长度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      String[][] data = <span class="keyword">new</span> String[<span class="number">2</span>][<span class="number">5</span>];</span><br><span class="line">      System.out.println(<span class="string">"第一维数组长度: "</span> + data.length);</span><br><span class="line">      System.out.println(<span class="string">"第二维数组长度: "</span> + data[<span class="number">0</span>].length);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">第一维数组长度: 2 </span></span><br><span class="line"><span class="comment">第二维数组长度: 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h3><p>以下实例中我们使用 Collections.reverse ( ArrayList ) 将数组进行反转：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        arrayList.add(<span class="string">"A"</span>);</span><br><span class="line">        arrayList.add(<span class="string">"B"</span>);</span><br><span class="line">        arrayList.add(<span class="string">"C"</span>);</span><br><span class="line">        arrayList.add(<span class="string">"D"</span>);</span><br><span class="line">        arrayList.add(<span class="string">"E"</span>);</span><br><span class="line">        System.out.println(<span class="string">"反转前排序: "</span> + arrayList);</span><br><span class="line">        Collections.reverse(arrayList);</span><br><span class="line">        System.out.println(<span class="string">"反转后排序: "</span> + arrayList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">反转前排序: [A, B, C, D, E] </span></span><br><span class="line"><span class="comment">反转后排序: [E, D, C, B, A] </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="数组输出"><a href="#数组输出" class="headerlink" title="数组输出"></a>数组输出</h3><p>以下实例演示了如何通过循环输出数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;       </span><br><span class="line">        String[] runoobs = <span class="keyword">new</span> String[<span class="number">3</span>];      </span><br><span class="line">        runoobs[<span class="number">0</span>] = <span class="string">"菜鸟教程"</span>;      </span><br><span class="line">        runoobs[<span class="number">1</span>] = <span class="string">"菜鸟工具"</span>;     </span><br><span class="line">        runoobs[<span class="number">2</span>] = <span class="string">"菜鸟笔记"</span>;      </span><br><span class="line">        <span class="keyword">for</span> (String obj:runoobs)&#123;        </span><br><span class="line">            System.out.println(obj+<span class="string">"\n"</span>);      </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">菜鸟教程</span></span><br><span class="line"><span class="comment">菜鸟工具</span></span><br><span class="line"><span class="comment">菜鸟笔记</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="数组获取最大和最小值"><a href="#数组获取最大和最小值" class="headerlink" title="数组获取最大和最小值"></a>数组获取最大和最小值</h3><p>以下实例演示了如何通过 Collections 类的 Collections.max() 和 Collections.min() 方法来查找数组中的最大和最小值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] numbers = &#123; <span class="number">8</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> min = (<span class="keyword">int</span>) Collections.min(Arrays.asList(numbers));</span><br><span class="line">        <span class="keyword">int</span> max = (<span class="keyword">int</span>) Collections.max(Arrays.asList(numbers));</span><br><span class="line">        System.out.println(<span class="string">"最小值: "</span> + min);</span><br><span class="line">        System.out.println(<span class="string">"最大值: "</span> + max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">最小值: 1</span></span><br><span class="line"><span class="comment">最大值: 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="数组合并"><a href="#数组合并" class="headerlink" title="数组合并"></a>数组合并</h3><p>以下实例演示了如何通过 List 类的 Arrays.toString () 方法和 List 类的 list.Addall(array1.asList(array2) 方法将两个数组合并为一个数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        String a[] = &#123; <span class="string">"A"</span>, <span class="string">"E"</span>, <span class="string">"I"</span> &#125;;</span><br><span class="line">        String b[] = &#123; <span class="string">"O"</span>, <span class="string">"U"</span> &#125;;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList(Arrays.asList(a));</span><br><span class="line">        list.addAll(Arrays.asList(b));</span><br><span class="line">        Object[] c = list.toArray();</span><br><span class="line">        System.out.println(Arrays.toString(c));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">[A, E, I, O, U]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="数组填充"><a href="#数组填充" class="headerlink" title="数组填充"></a>数组填充</h3><p>以下实例我们通过 Java Util 类的 Arrays.fill(arrayname,value) 方法和Arrays.fill(arrayname ,starting index ,ending index ,value) 方法向数组中填充元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FillTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> array[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line">        Arrays.fill(array, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, n=array.length; i &lt; n; i++) &#123;</span><br><span class="line">            System.out.println(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        Arrays.fill(array, <span class="number">3</span>, <span class="number">6</span>, <span class="number">50</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, n=array.length; i&lt; n; i++) &#123;</span><br><span class="line">            System.out.println(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">50</span></span><br><span class="line"><span class="comment">50</span></span><br><span class="line"><span class="comment">50</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="数组扩容"><a href="#数组扩容" class="headerlink" title="数组扩容"></a>数组扩容</h3><p>以下实例演示了如何在数组初始化后对数组进行扩容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] names = <span class="keyword">new</span> String[] &#123; <span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span> &#125;;</span><br><span class="line">        String[] extended = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line">        extended[<span class="number">3</span>] = <span class="string">"D"</span>;</span><br><span class="line">        extended[<span class="number">4</span>] = <span class="string">"E"</span>;</span><br><span class="line">        System.arraycopy(names, <span class="number">0</span>, extended, <span class="number">0</span>, names.length);</span><br><span class="line">        <span class="keyword">for</span> (String str : extended)&#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">B</span></span><br><span class="line"><span class="comment">C</span></span><br><span class="line"><span class="comment">D</span></span><br><span class="line"><span class="comment">E</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="查找数组中的重复元素"><a href="#查找数组中的重复元素" class="headerlink" title="查找数组中的重复元素"></a>查找数组中的重复元素</h3><p>以下实例演示了如何在 java 中找到重复的元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] my_array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">2</span>&#125;;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; my_array.length-<span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; my_array.length; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((my_array[i] == my_array[j]) &amp;&amp; (i != j))</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.println(<span class="string">"重复元素 : "</span>+my_array[j]);</span><br><span class="line">                &#125;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">重复元素 : 2</span></span><br><span class="line"><span class="comment">重复元素 : 5</span></span><br><span class="line"><span class="comment">重复元素 : 6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="删除数组元素"><a href="#删除数组元素" class="headerlink" title="删除数组元素"></a>删除数组元素</h3><p>以下实例演示了如何使用 remove () 方法来删除数组元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; objArray = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        objArray.clear();</span><br><span class="line">        objArray.add(<span class="number">0</span>,<span class="string">"第 0 个元素"</span>);</span><br><span class="line">        objArray.add(<span class="number">1</span>,<span class="string">"第 1 个元素"</span>);</span><br><span class="line">        objArray.add(<span class="number">2</span>,<span class="string">"第 2 个元素"</span>);</span><br><span class="line">        System.out.println(<span class="string">"数组删除元素前："</span>+objArray);</span><br><span class="line">        objArray.remove(<span class="number">1</span>);</span><br><span class="line">        objArray.remove(<span class="string">"第 0 个元素"</span>);</span><br><span class="line">        System.out.println(<span class="string">"数组删除元素后："</span>+objArray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">数组删除元素前：[第 0 个元素, 第 1 个元素, 第 2 个元素]</span></span><br><span class="line"><span class="comment">数组删除元素后：[第 2 个元素]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="数组差集"><a href="#数组差集" class="headerlink" title="数组差集"></a>数组差集</h3><p>以下实例演示了如何使用 removeAll () 方法来计算两个数组的差集：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        ArrayList objArray = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        ArrayList objArray2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        objArray2.add(<span class="number">0</span>,<span class="string">"common1"</span>);</span><br><span class="line">        objArray2.add(<span class="number">1</span>,<span class="string">"common2"</span>);</span><br><span class="line">        objArray2.add(<span class="number">2</span>,<span class="string">"notcommon"</span>);</span><br><span class="line">        objArray2.add(<span class="number">3</span>,<span class="string">"notcommon1"</span>);</span><br><span class="line">        objArray.add(<span class="number">0</span>,<span class="string">"common1"</span>);</span><br><span class="line">        objArray.add(<span class="number">1</span>,<span class="string">"common2"</span>);</span><br><span class="line">        objArray.add(<span class="number">2</span>,<span class="string">"notcommon2"</span>);</span><br><span class="line">        System.out.println(<span class="string">"array1 的元素"</span> +objArray);</span><br><span class="line">        System.out.println(<span class="string">"array2 的元素"</span> +objArray2);</span><br><span class="line">        objArray.removeAll(objArray2);</span><br><span class="line">        System.out.println(<span class="string">"array1 与 array2 数组差集为："</span>+objArray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">array1 的元素[common1, common2, notcommon2]</span></span><br><span class="line"><span class="comment">array2 的元素[common1, common2, notcommon, notcommon1]</span></span><br><span class="line"><span class="comment">array1 与 array2 数组差集为：[notcommon2]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="数组交集"><a href="#数组交集" class="headerlink" title="数组交集"></a>数组交集</h3><p>以下实例演示了如何使用 retainAll () 方法来计算两个数组的交集：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">array1 的元素[common1, common2, notcommon2]</span></span><br><span class="line"><span class="comment">array2 的元素[common1, common2, notcommon, notcommon1]</span></span><br><span class="line"><span class="comment">array1 与 array2 数组差集为：[notcommon2]</span></span><br><span class="line"><span class="comment">*/</span><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        ArrayList objArray = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        ArrayList objArray2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        objArray2.add(<span class="number">0</span>,<span class="string">"common1"</span>);</span><br><span class="line">        objArray2.add(<span class="number">1</span>,<span class="string">"common2"</span>);</span><br><span class="line">        objArray2.add(<span class="number">2</span>,<span class="string">"notcommon"</span>);</span><br><span class="line">        objArray2.add(<span class="number">3</span>,<span class="string">"notcommon1"</span>);</span><br><span class="line">        objArray.add(<span class="number">0</span>,<span class="string">"common1"</span>);</span><br><span class="line">        objArray.add(<span class="number">1</span>,<span class="string">"common2"</span>);</span><br><span class="line">        objArray.add(<span class="number">2</span>,<span class="string">"notcommon2"</span>);</span><br><span class="line">        System.out.println(<span class="string">"array1 数组元素："</span>+objArray);</span><br><span class="line">        System.out.println(<span class="string">"array2 数组元素："</span>+objArray2);</span><br><span class="line">        objArray.retainAll(objArray2);</span><br><span class="line">        System.out.println(<span class="string">"array2 &amp; array1 数组交集为："</span>+objArray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">array1 数组元素：[common1, common2, notcommon2]</span></span><br><span class="line"><span class="comment">array2 数组元素：[common1, common2, notcommon, notcommon1]</span></span><br><span class="line"><span class="comment">array2 &amp; array1 数组交集为：[common1, common2]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="在数组中查找指定元素"><a href="#在数组中查找指定元素" class="headerlink" title="在数组中查找指定元素"></a>在数组中查找指定元素</h3><p>以下实例演示了如何使用 contains () 方法来查找数组中的指定元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; objArray = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; objArray2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        objArray2.add(<span class="number">0</span>,<span class="string">"common1"</span>);</span><br><span class="line">        objArray2.add(<span class="number">1</span>,<span class="string">"common2"</span>);</span><br><span class="line">        objArray2.add(<span class="number">2</span>,<span class="string">"notcommon"</span>);</span><br><span class="line">        objArray2.add(<span class="number">3</span>,<span class="string">"notcommon1"</span>);</span><br><span class="line">        objArray.add(<span class="number">0</span>,<span class="string">"common1"</span>);</span><br><span class="line">        objArray.add(<span class="number">1</span>,<span class="string">"common2"</span>);</span><br><span class="line">        System.out.println(<span class="string">"objArray 的数组元素："</span>+objArray);</span><br><span class="line">        System.out.println(<span class="string">"objArray2 的数组元素："</span>+objArray2);</span><br><span class="line">        System.out.println(<span class="string">"objArray 是否包含字符串common2? ： "</span></span><br><span class="line">        +objArray.contains(<span class="string">"common2"</span>));</span><br><span class="line">        System.out.println(<span class="string">"objArray2 是否包含数组 objArray? ："</span></span><br><span class="line">        +objArray2.contains(objArray) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">objArray 的数组元素：[common1, common2]</span></span><br><span class="line"><span class="comment">objArray2 的数组元素：[common1, common2, notcommon, notcommon1]</span></span><br><span class="line"><span class="comment">objArray 是否包含字符串common2? ： true</span></span><br><span class="line"><span class="comment">objArray2 是否包含数组 objArray? ：false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="判断数组是否相等"><a href="#判断数组是否相等" class="headerlink" title="判断数组是否相等"></a>判断数组是否相等</h3><p>以下实例演示了如何使用 equals ()方法来判断数组是否相等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ary = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] ary1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] ary2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"数组 ary 是否与数组 ary1相等? ："</span></span><br><span class="line">        +Arrays.equals(ary, ary1));</span><br><span class="line">        System.out.println(<span class="string">"数组 ary 是否与数组 ary2相等? ："</span></span><br><span class="line">        +Arrays.equals(ary, ary2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">数组 ary 是否与数组 ary1相等? ：true</span></span><br><span class="line"><span class="comment">数组 ary 是否与数组 ary2相等? ：false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="数组并集"><a href="#数组并集" class="headerlink" title="数组并集"></a>数组并集</h3><p>以下实例演示了如何使用 union ()方法来计算两个数组的并集：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String[] arr1 = &#123; <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span> &#125;;</span><br><span class="line">        String[] arr2 = &#123; <span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span> &#125;;</span><br><span class="line">        String[] result_union = union(arr1, arr2);</span><br><span class="line">        System.out.println(<span class="string">"并集的结果如下："</span>);</span><br><span class="line">        <span class="keyword">for</span> (String str : result_union) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 求两个字符串数组的并集，利用set的元素唯一性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] union(String[] arr1, String[] arr2) &#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"> <span class="keyword">for</span> (String str : arr1) &#123;</span><br><span class="line">            set.add(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String str : arr2) &#123;</span><br><span class="line">            set.add(str);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] result = &#123;  &#125;;</span><br><span class="line">        <span class="keyword">return</span> set.toArray(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">并集的结果如下：</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客见闻录之站内搜索</title>
      <link href="/2018/11/07/%E5%8D%9A%E5%AE%A2%E8%A7%81%E9%97%BB%E5%BD%95%E4%B9%8B%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/"/>
      <url>/2018/11/07/%E5%8D%9A%E5%AE%A2%E8%A7%81%E9%97%BB%E5%BD%95%E4%B9%8B%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="摸石过河"><a href="#摸石过河" class="headerlink" title="摸石过河"></a>摸石过河</h2><p>在 <a href="https://www.haomwei.com/technology/maupassant-hexo.html#%E4%B8%BB%E9%A2%98%E5%AE%89%E8%A3%85" target="_blank" rel="noopener">Maupassant主题文档</a> 中，我发现了该主题支持五种站内搜索：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">google_search:</span><br><span class="line">baidu_search:</span><br><span class="line">swiftype:</span><br><span class="line">tinysou:</span><br><span class="line">self_search:</span><br></pre></td></tr></table></figure><p>我直到踩中最后一块石头，才真正的过了河。下面是每种搜索的体 (cai) 验 (keng):</p><ul><li>谷歌搜索: 其实就是把关键词丢进谷歌搜索，然后用 site 语法尽可能地把搜索结果定位与你的页面相关。需要等谷歌爬取你的网页，不然啥都搜不到。而且用谷歌要科学上网，第三方的站点也加载较慢。</li><li>百度搜索: 原理基本同上，不过不用科学上网了。还是要等百度爬你的页面才能用。</li><li>swiftype: 这好像是一个神器，你可以让它主动爬取的网页，没有前面的方法那么被动。但是在配置过程中出现了很多错误，比如识别不了 API key 之类的，据说这个引擎开始收费了，不知道有没有关系，反正我是没有部署成功。</li><li>tinysou: 同 swiftype 是第三方搜索引擎服务，鉴于 swiftype 的经历，不愿再折腾第三方搜索服务，未测试。</li><li>self_search: 对于上述所有搜索方式，本引擎只能说在座的各位都是lj。这是内嵌的 jQuery 搜索引擎，相比于第三方搜索服务，其用户体验顺滑无比。又快又稳!(被 swiftype 折磨得心灰意冷的时候，抱着尝试的态度使用 self_search 居然成功的感觉真有点喜极而泣的feel)</li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>因为是站在前人的肩膀上使用，所以简单到不行：</p><ol><li><p>在 hexo 根目录下的配置文件添加下列代码：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></li><li><p>在主题的配置文件中设置下列配置为true：</p><p> <code>self_search: true</code></p></li></ol><p>啥也不说了，都是泪，上个效果图就去上课：<br><img src="http://qnya.pomo16.club/20.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客见闻录之RSS</title>
      <link href="/2018/11/07/%E5%8D%9A%E5%AE%A2%E8%A7%81%E9%97%BB%E5%BD%95%E4%B9%8BRSS/"/>
      <url>/2018/11/07/%E5%8D%9A%E5%AE%A2%E8%A7%81%E9%97%BB%E5%BD%95%E4%B9%8BRSS/</url>
      
        <content type="html"><![CDATA[<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p><code>npm install hexo-generator-feed --save</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在hexo根目录下的_config.yml中添加插件引用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: http://hexo.io/plugins/</span><br><span class="line">#RSS订阅</span><br><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">type: atom</span><br><span class="line">path: atom.xml</span><br><span class="line">limit: 20</span><br></pre></td></tr></table></figure></p><p>然后检查一下主题目录下的_config.yml中，RSS 的目录导向是否和上述代码中的 path 一致：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- page: rss</span><br><span class="line">  directory: atom.xml</span><br><span class="line">  icon: fa-rss</span><br></pre></td></tr></table></figure></p><p>部署上线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p><strong>perfect!</strong><br><img src="http://qnya.pomo16.club/19.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> RSS </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七牛云融合CDN加速域名</title>
      <link href="/2018/11/06/%E4%B8%83%E7%89%9B%E4%BA%91%E8%9E%8D%E5%90%88CDN%E5%8A%A0%E9%80%9F%E5%9F%9F%E5%90%8D/"/>
      <url>/2018/11/06/%E4%B8%83%E7%89%9B%E4%BA%91%E8%9E%8D%E5%90%88CDN%E5%8A%A0%E9%80%9F%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前使用七牛云的外链是由其分配的测试域名提供的，想起自己在腾讯云有一个域名就顺手拿自己的域名来做融合 CDN 加速。</p><p>第一次接触七牛云是时候感觉良好，毕竟以前的博客连图床都没有，这种用图片信手拈来的感觉爽的飞起。</p><p>但是这又引来一个思考了。</p><p>由于每个存储空间生成的外链需要有所区别，用户创建的每个对象存储空间都带有七牛云随机分配的一个 CDN 加速域名。那么在这种规则之下，就很难做到永久免费服务了。认真查看七牛云的服务，果不其然：<br><img src="http://qnya.pomo16.club/11.png" alt></p><p>这分配的外链貌似只有30天的寿命。。</p><p>忽然想起之前在 <a href="https://cloud.tencent.com/" target="_blank" rel="noopener">腾讯云</a> 买了一个三块钱一年的域名，于是就打算拿它来做融合 CDN 加速域名。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="添加自定义域名"><a href="#添加自定义域名" class="headerlink" title="添加自定义域名"></a>添加自定义域名</h3><ol><li><p><strong>点击添加自定义域名：</strong><br><img src="http://qnya.pomo16.club/12.png" alt></p></li><li><p><strong>填写完成 ICP 备案的域名，这个域名就是以后外链的开头部分，其前缀也是在域名解析时 CNAME 记录的前缀。</strong><br><img src="http://qnya.pomo16.club/13.png" alt></p></li></ol><h3 id="配置CNAME"><a href="#配置CNAME" class="headerlink" title="配置CNAME"></a>配置CNAME</h3><p><a href="https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name" target="_blank" rel="noopener">七牛云官方 CNAME 配置教程</a></p><ol><li><p><strong>获取 CNAME</strong><br><img src="http://qnya.pomo16.club/14.png" alt></p></li><li><p><strong>进入 <a href="https://cloud.tencent.com/" target="_blank" rel="noopener">腾讯云</a> 配置 CNAME</strong></p></li></ol><ul><li>在域名解析列表中选择解析的域名<br><img src="http://qnya.pomo16.club/15.png" alt></li><li>在解析中添加记录，填写格式如下：(前缀和在七牛云填写的域名前缀一致，实际上相当于是二级域名进行 CNAME 解析，因为一般主域名都是做了 A 解析的，而同级域名下两种 DNS 解析不能共存。)<br><img src="http://qnya.pomo16.club/16.png" alt></li></ul><h2 id="验证与使用"><a href="#验证与使用" class="headerlink" title="验证与使用"></a>验证与使用</h2><h3 id="验证成功"><a href="#验证成功" class="headerlink" title="验证成功"></a>验证成功</h3><p>配置 CNAME 后等待一段时间，在七牛云控制台看到融合 CDN 加速域名状态为成功即可。<br><img src="http://qnya.pomo16.club/17.png" alt></p><h3 id="使用新域名"><a href="#使用新域名" class="headerlink" title="使用新域名"></a>使用新域名</h3><p>在内容管理中修改外链默认域名：<br><img src="http://qnya.pomo16.club/18.png" alt></p><p><strong><font color="red">最后记得修改调用外链的网页代码，把原来的外链替换为新的外链。</font></strong></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 七牛云 </tag>
            
            <tag> CDN </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux学习笔记之常用命令</title>
      <link href="/2018/11/06/linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/11/06/linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>总结了学习linux时的一些笔记,重新排版。</p><a id="more"></a><ul><li><p><a href="#基础">基础</a></p></li><li><p><a href="#文件处理命令">文件处理命令</a></p></li><li><p><a href="#权限处理命令">权限处理命令</a></p></li><li><p><a href="#文件搜索命令">文件搜索命令</a></p></li><li><p><a href="#帮助命令">帮助命令</a></p></li><li><p><a href="#压缩解压命令">压缩解压命令</a></p></li><li><p><a href="#网络通信命令">网络通信命令</a></p></li><li><p><a href="#系统关机命令">系统关机命令</a></p></li><li><p><a href="#shell应用技巧">shell应用技巧</a></p></li></ul><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>文件命名规则:<br>1.除/以外,所有的字符都合法<br>2.有些字符最好不用,如空格符, 制表符, 退格符和字符@#$&amp;()-等<br>3.避免使用.作为普通文件名的第一个字符(避免被隐藏)<br>4.大小写敏感,严格区分大小写</p><p>命令格式:命令 -选项 参数<br>说明:</p><ol><li>当有多个选项时,可以写在一起</li><li>.和..分别代表当前目录和当前目录的父目录(上一级目录)</li></ol><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl+c</td><td>终止指令</td></tr><tr><td>Ctrl+d</td><td>退出shell</td></tr><tr><td>Ctrl+a</td><td>光标移至行首</td></tr><tr><td>Ctrl+e</td><td>光标移至行末</td></tr></tbody></table><p><strong>转义符\可保留本意</strong></p><table><thead><tr><th>用户管理</th><th>命令</th></tr></thead><tbody><tr><td>改变用户</td><td>su - 用户名</td></tr><tr><td>添加用户</td><td>useradd 用户名</td></tr><tr><td>设置用户密码</td><td>passwd 用户名</td></tr></tbody></table><p>由命令所在的路径可判断命令的权限:</p><table><thead><tr><th>权限</th><th>路径</th></tr></thead><tbody><tr><td>root</td><td>/sbin ,/usr/sbin</td></tr><tr><td>all user</td><td>/bin,/usr/bin</td></tr></tbody></table><h2 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h2><p><strong>ls</strong><br>功能:显示目录文件<br>路径:/bin/ls<br>语法:<code>ls 选项[-ald] [文件或目录]</code></p><ul><li>-a 显示所有文件,包括隐藏文件(all)</li><li>-d 查看目录属性(directory)(一般配合l,即-ld连用查看某个目录的属性)</li><li>-l 详细信息显示(long)<br>例子:<code>drwxr-xr-x 2 root root 4096 12-01 20:52 bin</code></li></ul><table><thead><tr><th>d</th><th>rwxr-xr-x</th><th>2</th><th>root root</th><th>4096</th><th>12-01 20:52</th><th>bin</th></tr></thead><tbody><tr><td>文件类型,常见文件类型有:<br>d:目录 directory<br>-: 二进制文件<br>l: 软链接文件 link</td><td>代表权限( r-read 读, w-write 写, x-execute 执行), 所有者 u(user, owner) 权限 rwx, 所有组 g(group) 权限 r-x, 其他人 o(other)</td><td>硬链接数</td><td>管理者是root,管理组是root</td><td>文件大小(不准确),linux一般用数据块大小来做储存文件大小的单位,即数据块是最小储存单位</td><td>创建时间或最后修改时间</td><td>文件名</td></tr></tbody></table><p><strong>cd</strong><br>功能:切换目录<br>路径:shell内置命令<br>权限:所有用户<br>语法:<code>cd [目录]</code><br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 切换到根目录</span><br><span class="line">cd / </span><br><span class="line">// 回到上一级目录</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure></p><p><strong>pwd</strong><br>功能:显示当前所在的工作目录<br>路径:/bin/pwd<br>语法:<code>pwd</code></p><p><strong>touch</strong><br>功能:创建空文件<br>路径:/bin/touch<br>语法:<code>touch [文件名]</code><br>例子:<code>touch newfile</code></p><p><strong>mkdir</strong><br>功能:创建新目录<br>路径:/bin/mkdir<br>语法:<code>mkdir [目录名]</code><br>例子:<code>mkdir newdir</code></p><p><strong>cp</strong><br>功能:复制文件或目录<br>路径:/bin/cp<br>语法:<code>cp -R [源文件或目录][目的目录]</code></p><ul><li>-R 复制目录</li><li>-p 拷贝之后不改变时间值</li></ul><p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 将文件file1, file2复制到目录dir1</span><br><span class="line">cp file1 file2 dir1</span><br><span class="line">// 将目录dir1下的所有文件复制到目录dir2下</span><br><span class="line">cp -R dir1 dir2</span><br></pre></td></tr></table></figure></p><p><strong>mv</strong><br>功能:移动文件, 更名<br>路径:/bin/mv<br>语法:<code>mv [源文件或目录][目的目录]</code><br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 将当前目录下文件file1更名为file3</span><br><span class="line">mv file1 file3</span><br><span class="line">// 将文件file2移动到目录dir2下</span><br><span class="line">mv file2 dir2</span><br><span class="line">// 改名和移动可同时操作</span><br><span class="line">mv /dir1/file1 /dir2/file2</span><br></pre></td></tr></table></figure></p><p><strong>rm</strong><br>功能:删除文件<br>路径:/bin/rm<br>语法:<code>rm -r [文件或目录]</code></p><ul><li>-r 删除目录</li><li>-f 强制删除(避开询问)</li></ul><p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 删除文件file1</span><br><span class="line">rm file1</span><br><span class="line">// 删除目录dir1</span><br><span class="line">rm -r dir1</span><br></pre></td></tr></table></figure></p><p><strong>cat</strong><br>功能:显示文件内容(显示大文件的话不完整)<br>路径:/bin/cat<br>语法:<code>cat [文件名]</code><br>例子:<code>cat /etc/issue</code></p><p><strong>more</strong><br>功能:分页显示文件内容(可以完整显示文件)<br>路径:/bin/more<br>语法:<code>more [文件名]</code></p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>(空格)或 f</td><td>显示下一页</td></tr><tr><td>(Enter)</td><td>显示下一行</td></tr><tr><td>q 或 Q</td><td>退出</td></tr></tbody></table><p>例子:<code>more /etc/services</code></p><p><strong>head</strong><br>功能:查看文件前几行<br>路径:/bin/head<br>语法:<code>head -num [文件名]</code></p><ul><li>-num 显示文件的前num行</li></ul><p>例子:<code>head -20 etc/services</code></p><p><strong>tail</strong><br>功能:查看文件后几行<br>路径: bin/tail<br>语法:<code>tail -num [文件名]</code></p><ul><li>-num 显示文件后num行</li><li>-f 动态显示文件内容</li></ul><p>例子:<code>tail -30 /etc/services</code></p><p><strong>ln</strong><br>功能:产生链接文件<br>路径:/bin/ln<br>语法:<code>ln -s [源文件][目标文件]</code></p><ul><li>-s 创建软链接</li></ul><p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 创建文件/etc/issue的软链接/issue.soft</span><br><span class="line">ln -s /etc/issue/issue.soft</span><br><span class="line">// 创建文件/etc/issue的硬链接/issue.hard</span><br><span class="line">ln /etc/issue/issue.hard</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>链接类型</th><th>等价理解</th><th>特性</th></tr></thead><tbody><tr><td>软链接</td><td>类似于快捷方式</td><td>文件很小,若源文件消失,软链接失效。</td></tr><tr><td>硬链接</td><td>cp -p + 同步更新</td><td>与源文件有相同的inode,不能跨文件系统(不能跨系统文件分区),若源文件消失,硬链接不变。</td></tr></tbody></table><h2 id="权限处理命令"><a href="#权限处理命令" class="headerlink" title="权限处理命令"></a>权限处理命令</h2><p><strong>chmod</strong><br>功能:改变文件或目录权限<br>路径:/bin/chmod<br>语法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod u + r</span><br><span class="line">chmod g - w</span><br><span class="line">chmod o = x</span><br></pre></td></tr></table></figure></p><p>关于权限值:<br>u-所有者, g-所属组, o-其他人<br>rwx: 可写可读可执行<br>r-4, w-2, x-1(重点掌握)<br>例如:rwxr-xr– 等价于 754, 752 等价于 rwxr-x-w-</p><p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 赋予文件file1所属组写权限</span><br><span class="line">chmod g+w file1</span><br><span class="line">// 设定目录dir1为所有用户具有全部权限</span><br><span class="line">chmod 777 dir1</span><br></pre></td></tr></table></figure></p><p>对于权限的理解:<br>对文件:<br>r(可以查看文件内容)cat, more, head, tail<br>w(可以修改文件内容)echo, vi<br>x(可以执行文件)命令, 脚本<br>对目录:<br>r(可以列出目录中的内容)ls<br>w(可以在目录中创建, 删除文件)touch, mkdir, rm<br>x(可以进入目录)cd</p><p><strong>chown</strong><br>功能:改变文件或目录的所有者<br>路径:/bin/chown<br>语法:<code>chown [用户][文件或目录]</code><br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 改变文件file1的所有者为nobody</span><br><span class="line">chown nobody file1</span><br></pre></td></tr></table></figure></p><p><strong>chgrp</strong><br>功能:改变文件或目录的所属组<br>路径:/bin/chgrp<br>语法:<code>chgrp [用户组][文件或目录]</code><br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 改变文件file1的所属组为adm</span><br><span class="line">chgrp adm file1</span><br></pre></td></tr></table></figure></p><p><strong>umask</strong><br>功能:显示, 设置文件的缺省权限<br>路径:/bin/umask<br>语法:<code>umask -S</code></p><ul><li>-S 以rwx形式显示新建文件或目录缺省权限</li></ul><p>例子:umask<br>直观写法:umask -S</p><p>假如umask得到0022<br>0-特殊权限位<br>022-用户权限位,权限掩码值<br>777 - 022 = 755<br>755表示权限</p><p>改变默认权限:<code>umask 权限掩码值</code></p><p>Linux权限规则:<br><strong>缺省创建的文件不能授予可执行x权限</strong></p><h2 id="文件搜索命令"><a href="#文件搜索命令" class="headerlink" title="文件搜索命令"></a>文件搜索命令</h2><p><strong>which</strong><br>功能:显示系统命令所在目录<br>路径:/usr/bin/which<br>语法:<code>which [命令名称]</code><br>例子:<code>which ls</code></p><p><strong>find</strong><br>功能:查找文件或目录<br>路径:/usr/bin/find<br>语法:<code>find [搜索路径] [搜寻关键字]</code><br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// 在目录/etc中查找文件init,注:*,匹配任意字符,若查找init开头的文件则init*; ?,匹配单个字符,若查找带有init的七个字母的文件则init???</span><br><span class="line">find /etc -name init</span><br><span class="line"></span><br><span class="line">// 在根目录下查找大于100MB的文件,以数据块为单位512字节,注:大于+,小于-</span><br><span class="line">find / -size +204800</span><br><span class="line"></span><br><span class="line">// 在根目录下查找所有者为sanlee的文件</span><br><span class="line">find /home -user samlee</span><br><span class="line"></span><br><span class="line">// 120分钟以内被修改的文件</span><br><span class="line">find /etc -mmin -120</span><br><span class="line">/*时间:</span><br><span class="line">- 1.天 ctime, atime, mtime</span><br><span class="line">- 2.分钟 cmin, amin, mmin</span><br><span class="line">- c-change改变,表示文件属性被修改过,所有者, 所属组, 权限</span><br><span class="line">- a-access访问</span><br><span class="line">- m-modify修改,表示文件内容被修改过</span><br><span class="line">- -之内,+超过</span><br><span class="line">*/　　　  </span><br><span class="line"></span><br><span class="line">// 在/etc下查找大于80MB小于100MB的文件,注:连接符-a表示and逻辑与,-o表示or逻辑或</span><br><span class="line">find /etc -size +163840 -a -size -204800    </span><br><span class="line"></span><br><span class="line">// 在/etc下查找inittab文件并显示其详细信息</span><br><span class="line">find /etc -name inittab -exec ls -l &#123;&#125; \;</span><br><span class="line">　　　</span><br><span class="line">// 在/etc下查找用户名为samlee的文件并删除</span><br><span class="line">find /etc -user samlee -exec rm -rf &#123;&#125; \;</span><br><span class="line"></span><br><span class="line">// find .... -exec 命令 &#123;&#125; \;(若用-ok代替-exec则会询问确认)</span><br><span class="line">　　　</span><br><span class="line">// 在/etc下查找软链接文件(f二进制文件, l软链接文件, d目录)</span><br><span class="line">find /etc -type l</span><br><span class="line"></span><br><span class="line">// 在当前目录寻找i节点为16的文件</span><br><span class="line">find . -inum 16</span><br></pre></td></tr></table></figure></p><p><strong>locate</strong><br>功能:寻找文件或目录(在updatedb数据库里寻找,速度快)<br>路径:/usr/bin/locate<br>语法:<code>locate [搜索关键字]</code><br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 列出所有跟file相关的文件</span><br><span class="line">locate file</span><br></pre></td></tr></table></figure></p><p><strong>updatedb</strong><br>功能:建立整个系统目录文件的数据库<br>路径:/usr/bin/updatedb<br>例子:<code>updatedb</code></p><p><strong>grep</strong><br>功能:在文件中搜寻字符匹配的行并输出<br>路径:/usr/bin/grep<br>语法:<code>grep [指定字母][源文件]</code><br>例子:<code>grep ftp /etc/services</code></p><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令:"></a>帮助命令:</h2><p><strong>man</strong><br>功能:获取帮助信息(遵循more的指令来换行换页和退出)<br>路径:/usr/bin/man<br>语法:<code>man [命令或配置文件]</code><br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 查看ls命令的帮助信息</span><br><span class="line">man ls</span><br><span class="line">// 查看配置文件services的帮助信息</span><br><span class="line">man services</span><br></pre></td></tr></table></figure></p><p>若命令与配置文件同名则优先查看命令的帮助,通过man 5 […]来查看,即帮助有很多种,第五种为配置文件帮助。</p><p><strong>info</strong><br>功能:获取帮助信息(与man功能完全相同,只是呈现方式不同)<br>路径:/usr/bin/info<br>语法:<code>info [任何关键字]</code><br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 查看ls指令的帮助信息</span><br><span class="line">info ls</span><br></pre></td></tr></table></figure></p><p><strong>whatis</strong>和<strong>apropos</strong><br>功能:获得索引的简短说明信息<br>路径:/usr/bin/whatis /usr/bin/apropos<br>语法:<br><code>whatis [任何关键字]</code><br><code>apropos [任何关键字]</code><br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whatis ls</span><br><span class="line">//相当于man -k</span><br><span class="line">apropos fstab</span><br></pre></td></tr></table></figure></p><p>注:与locate类似,需要用makewhatis指令建立whatis和apropos搜索使用的数据库(例子:makewhatis)</p><p><strong>help</strong><br>功能:查看shell内置命令的帮助</p><h2 id="压缩解压命令-gz-tar-gz-zip-bz2"><a href="#压缩解压命令-gz-tar-gz-zip-bz2" class="headerlink" title="压缩解压命令:(.gz,.tar.gz,.zip,.bz2)"></a>压缩解压命令:(.gz,.tar.gz,.zip,.bz2)</h2><p><strong>gzip</strong><br>功能:压缩文件<br>路径:/bin/gzip<br>语法:<code>gzip 选项[文件]</code><br>压缩后文件格式:.gz<br>1.只能压缩文件,不能压缩目录<br>2.不保留原文件</p><p><strong>gunzip</strong><br>功能:解压缩.gz的压缩文件(同gzip -d)<br>路径:/bin/gunzip<br>语法:<code>gunzip 选项[压缩文件]</code><br>例子:<code>gunzip file1.gz</code></p><p><strong>tar</strong><br>功能:打包目录<br>路径:/bin/tar<br>压缩语法:<code>tar 选项 [目录]</code></p><ul><li>-c 产生tar打包文件</li><li>-v 显示详细信息</li><li>-f 指定压缩后的文件名</li><li>-z 打包同时压缩</li></ul><p>压缩后文件格式:.tar.gz<br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 将目录dir1压缩成一个打包并压缩的文件</span><br><span class="line">tar -zcvf dir.tar.gz dir1</span><br></pre></td></tr></table></figure></p><p>注:老系统不支持打包压缩一起进行</p><p>解压缩语法:<code>tar 选项 [压缩文件]</code></p><ul><li>-x 解包.tar文件</li><li>-v 显示详细信息</li><li>-f 指定解压文件</li><li>-z 解压缩</li></ul><p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 将dir1解压到当前目录下</span><br><span class="line">tar -zxvf dir1.tar.gz</span><br></pre></td></tr></table></figure></p><p><strong>file</strong>指令<br>功能:判断文件类型<br>语法:<code>file [文件名]</code></p><p><strong>zip</strong><br>(默认的win和linux通用格式)<br>功能:压缩文件或目录(保留原文件)<br>路径:/usr/bin/zip<br>语法:<code>zip 选项[-r] [压缩后文件名称] [文件或目录]</code></p><ul><li>-r 压缩目录</li></ul><p>压缩后文件格式:.zip<br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 压缩文件</span><br><span class="line">zip services.zip /etc/services</span><br><span class="line">// 压缩目录</span><br><span class="line">zip -r test.zip /test</span><br></pre></td></tr></table></figure></p><p><strong>unzip</strong><br>功能:解压.zip的压缩文件<br>路径:/usr/bin/unzip<br>语法:<code>unzip [压缩文件]</code><br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 解压文件</span><br><span class="line">unzip test.zip</span><br></pre></td></tr></table></figure></p><p><strong>bzip2</strong><br>功能:压缩文件<br>路径:/usr/bin/bzip2<br>语法:<code>bzip2 选项[-k] [文件]</code></p><ul><li>-k 产生压缩文件后保留文件</li></ul><p>压缩后文件格式:.bz2<br>例子:<code>bzip2 -k file1</code></p><p><strong>bunzip2</strong><br>功能:解压缩<br>路径:/usr/bin/bunzip2<br>语法:<code>bunzip2 选项[-k] [压缩文件]</code></p><ul><li>-k 解压缩后保留文件</li></ul><p>例子:<code>bunzip2 -k file1.bz2</code></p><h2 id="网络通信指令"><a href="#网络通信指令" class="headerlink" title="网络通信指令:"></a>网络通信指令:</h2><p><strong>write</strong><br>功能:向另一个用户发信息,以ctrl+D作为结束(实时)<br>路径:/usr/bin/write<br>语法:<code>write &lt;用户&gt;</code><br>例子:<code>write samlee</code></p><p><strong>wall</strong><br>功能:向所有用户广播信息<br>路径:/usr/bin/wall<br>语法:<code>wall [message] [文件名]</code><br>例子:<code>wall Happy new year!</code></p><p><strong>ping</strong><br>功能:测试网络连通性<br>路径:/usr/sbin/ping<br>语法:<code>ping 选项 IP地址</code></p><ul><li>-c [num]  pingnum次(类似windows的ping)</li><li>-s [num]  用num大小的数据包来测试(num不能大于65507)</li></ul><p>例子:<code>ping 192.168.1.1</code><br>用ifconfig可查看本机IP地址</p><p><strong>ifconfig</strong><br>功能:查看网络设置信息<br>路径:/usr/sbin/ifconfig<br>语法:<code>ifconfig 选项[-a] [网卡设备标识]</code></p><ul><li>-a 显示所有网卡信息</li></ul><p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 显示所有网卡信息</span><br><span class="line">ifconfig -a</span><br><span class="line">// 查看关键网卡信息</span><br><span class="line">ifconfig eth0</span><br><span class="line">// 临时改变IP地址为192.168.9.6,若不写入配置文件,则仅在此会话中生效</span><br><span class="line">ifconfig eth0 192.168.9.6</span><br></pre></td></tr></table></figure></p><h2 id="系统关机命令"><a href="#系统关机命令" class="headerlink" title="系统关机命令:"></a>系统关机命令:</h2><p><strong>shutdown</strong><br>功能:关机<br>路径:/usr/sbin/shutdown<br>语法:<code>shutdown</code><br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 马上关机</span><br><span class="line">shutdown -h now</span><br></pre></td></tr></table></figure></p><p><strong>reboot</strong><br>功能:重启系统<br>路径:/usr/sbin/reboot<br>语法:<code>reboot</code><br>例子:<code>reboot</code></p><h2 id="shell应用技巧"><a href="#shell应用技巧" class="headerlink" title="shell应用技巧:"></a>shell应用技巧:</h2><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧:"></a>小技巧:</h3><p>1.命令补全<br>输入文件名起始的若干个字母后,按<tab>补齐文件名<br>2.清空屏幕<br>clear指令,或 ctrl + L<br>3.快速删除<br>ctrl + U 可以快速删除当前命令行光标前的所有内容<br>4.命令历史<br>history 指令:列出敲过的所有指令<br>上下箭头键可以查找以前执行过的命令</tab></p><h3 id="大技巧"><a href="#大技巧" class="headerlink" title="大技巧:"></a>大技巧:</h3><p>1.命令别名<br>定义别名例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias copy=cp</span><br><span class="line">// 带选项时要加双引号</span><br><span class="line">alisa xrm=&quot;rm -f&quot;</span><br></pre></td></tr></table></figure></p><p>删除别名:<code>unalias copy</code></p><p>2.输入/输出重定向<br>shell对于每一个进程预先定义三个文件描述字(0,1,2)<br>0(STDIN)   标准输入<br>1(STDOUT)  标准输出<br>2(STDERR)  标准错误输出</p><p><code>&gt;</code>或<code>&gt;&gt;</code> 输出重定向<br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// tmp的内容输出到文件中,并替代原内容</span><br><span class="line">ls -l /tmp &gt; /tmp.msg</span><br><span class="line">// data输出到文件内,并追加在原内容后面</span><br><span class="line">date &gt;&gt; /tmp.msg</span><br></pre></td></tr></table></figure></p><p><code>&lt;</code> 输入重定向<br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 把文件作为输入端</span><br><span class="line">wall &lt; /etc/motd</span><br></pre></td></tr></table></figure></p><p><code>2&gt;</code> 错误输出重定向<br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 错误信息输出到文件/bak.error内</span><br><span class="line">cp -R /usr /backup/usr.bak 2&gt; /bak.error</span><br></pre></td></tr></table></figure></p><p>3.管道<br>管道:将一个命令的输出传送给另一个命令,作为另一个命令的输入。<br>使用方法:命令1|命令2|命令3……|命令n<br>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -l /etc | more</span><br><span class="line">ls -l /etc | grep init</span><br></pre></td></tr></table></figure></p><p>4.命令连接符</p><table><thead><tr><th>符号</th><th>功能</th></tr></thead><tbody><tr><td><em>;</em>　</td><td>用<em>;</em>间隔的各命令按顺序依次执行</td></tr><tr><td><code>&amp;&amp;</code></td><td>前后命令的执行存在逻辑与关系,前面的命令执行成功后,它后面的命令才被执行。</td></tr><tr><td>&#124;&#124;</td><td>前后命令的执行存在逻辑或关系,若前面的命令执行成功,则后面不执行；若前面的命令执行失败,则后面才会执行。</td></tr></tbody></table><p>5.命令替换符<br>命令替换:将一个命令的输出作为另一个命令的参数<br>格式:命令1 `命令2`(注意不是单引号,而是键盘按键1旁边的替换符)<br>例子:ls -l `which touch`</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux学习笔记之vim</title>
      <link href="/2018/11/06/linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bvim/"/>
      <url>/2018/11/06/linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bvim/</url>
      
        <content type="html"><![CDATA[<p>Vim/Vi:文本编辑器<br>(没有菜单，只有命令)</p><a id="more"></a><p>三种工作模式:<strong><font color="red">命令模式、插入模式、编辑模式</font></strong></p><p><img src="http://qnya.pomo16.club/10.png" alt></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令:"></a>常用命令:</h2><h3 id="1-插入命令"><a href="#1-插入命令" class="headerlink" title="1.插入命令"></a>1.插入命令</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>a</td><td>在光标后附加文本</td></tr><tr><td>A</td><td>在本行行末附加文本</td></tr><tr><td>i</td><td>在光标前插入文本</td></tr><tr><td>I</td><td>在本行开始插入文本</td></tr><tr><td>o</td><td>在光标下插入新行</td></tr><tr><td>O</td><td>在光标上插入新行</td></tr></tbody></table><h3 id="2-定位命令"><a href="#2-定位命令" class="headerlink" title="2.定位命令"></a>2.定位命令</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>h or 方向左键</td><td>左移一个字符</td></tr><tr><td>j or 方向下键</td><td>下移一行</td></tr><tr><td>k or 方向上键</td><td>上移一行</td></tr><tr><td>l or 方向右键</td><td>右移一个字符</td></tr><tr><td>$</td><td>移至行尾</td></tr><tr><td>0</td><td>移至行首</td></tr><tr><td>H</td><td>移至屏幕上端</td></tr><tr><td>M</td><td>移至屏幕中央</td></tr><tr><td>L</td><td>移至屏幕下端</td></tr><tr><td>:set nu</td><td>设置行号</td></tr><tr><td>:set nonu</td><td>取消行号</td></tr><tr><td>gg</td><td>到第一行</td></tr><tr><td>G</td><td>到最后一行</td></tr><tr><td>nG</td><td>到第n行</td></tr><tr><td>:n</td><td>到第n行</td></tr></tbody></table><h3 id="3-删除命令"><a href="#3-删除命令" class="headerlink" title="3.删除命令"></a>3.删除命令</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>x</td><td>删除光标所在处字符</td></tr><tr><td>nx</td><td>删除光标所在处后n个字符</td></tr><tr><td>dd</td><td>删除光标所在行，ndd删除n行</td></tr><tr><td>dG</td><td>删除光标所在行到末尾的内容</td></tr><tr><td>D</td><td>删除从光标所在处到行尾</td></tr><tr><td>:n1,n2d</td><td>删除指定范围的行</td></tr></tbody></table><h3 id="4-复制和剪切命令"><a href="#4-复制和剪切命令" class="headerlink" title="4.复制和剪切命令"></a>4.复制和剪切命令</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>yy、Y</td><td>复制当前行</td></tr><tr><td>nyy、nY</td><td>复制当前行以下n行</td></tr><tr><td>dd</td><td>剪切当前行</td></tr><tr><td>ndd</td><td>剪切当前行以下n行</td></tr><tr><td>p、P</td><td>粘贴在当前光标所在行下或行上</td></tr></tbody></table><h3 id="5-替换和取消命令"><a href="#5-替换和取消命令" class="headerlink" title="5.替换和取消命令"></a>5.替换和取消命令</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>r</td><td>取代光标所在处字符</td></tr><tr><td>R</td><td>从光标所在处开始替换字符，按Esc结束</td></tr><tr><td>u</td><td>取消上一步操作</td></tr></tbody></table><h3 id="6-搜索和替换命令"><a href="#6-搜索和替换命令" class="headerlink" title="6.搜索和替换命令"></a>6.搜索和替换命令</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>/string</td><td>向前搜索指定字符串(搜索时忽略大小写:set ic)</td></tr><tr><td>n</td><td>搜索指定字符串的下一个出现位置</td></tr><tr><td>N</td><td>搜索指定字符串的上一个出现位置</td></tr><tr><td>:%s/old/new/g</td><td>全文替换指定字符串</td></tr><tr><td>:n1,n2/old/new/g</td><td>在一定范围内替换指定字符串(注:选项g是强制替换，若需经过询问再替换则用选项c)</td></tr></tbody></table><h3 id="7-保存退出命令"><a href="#7-保存退出命令" class="headerlink" title="7.保存退出命令"></a>7.保存退出命令</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>:wq、ZZ</td><td>保存并退出</td></tr><tr><td>:wq!</td><td>强行保存退出</td></tr><tr><td>:w /dir</td><td>保存到新位置</td></tr><tr><td>:q!</td><td>退出</td></tr></tbody></table><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧:"></a>使用技巧:</h2><p>1.<strong><code>:r [文件名]</code></strong><br>功能:导入文件<br>2.<strong><code>:![命令]</code></strong><br>功能:在Vi中执行命令<br>(注:妙用 :r 和 :! ，如 <code>:r :!date</code> 快速导入时间)<br>3.<strong><code>:map 快捷键 出发命令</code></strong><br>功能:定义快捷键<br>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 在行首加#</span><br><span class="line">:map ^P I#  + &lt;ESC键&gt;</span><br><span class="line">// 删除行首字母</span><br><span class="line">:map ^B 0x</span><br><span class="line">// 取消快捷键ctrl+P</span><br><span class="line">:unmap ^P</span><br><span class="line"></span><br><span class="line">// 注意:[^字母]的输入方法是 ctrl + v + 字母</span><br></pre></td></tr></table></figure><p>4.<strong>连续行注释(^代表行首)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 注释掉n1到n2行</span><br><span class="line">:n1,n2s/^/#/g</span><br><span class="line">// 去除n1到n2行的注释</span><br><span class="line">:n1,n2s/^#//g</span><br><span class="line">// 在n1到n2行前添加//，注:转义符\可保留符号本意</span><br><span class="line">:n1,n2s/^/\/\//g</span><br></pre></td></tr></table></figure><p>5.<strong>:ab</strong><br>功能:替换<br>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:ab blogs pomo16.coding.me(把blogs自动替换为pomo16(我)的博客地址)</span><br><span class="line">:unab blogs(取消上述替换)</span><br></pre></td></tr></table></figure><p><strong>/.vimrc</strong><br>若需修改个人的vim使用习惯，可修改此配置文件，如添加一些快捷键<br>通过<code>vi /.vimrc</code>来编辑<br>打开后可添加常用的指令，如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set nu</span><br><span class="line">map ^P I# + &lt;ESC键&gt;</span><br><span class="line">ab blogs pomo16.coding.me等</span><br><span class="line">// 注:无需加:</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP中的GET和POST请求</title>
      <link href="/2018/11/05/HTTP%E4%B8%AD%E7%9A%84GET%E5%92%8CPOST%E8%AF%B7%E6%B1%82/"/>
      <url>/2018/11/05/HTTP%E4%B8%AD%E7%9A%84GET%E5%92%8CPOST%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><strong>什么是HTTP？</strong><br>&emsp;&emsp;HTTP 即超文本传输协议，其设计目的是提供一种发布和接收 HTML 页面的方法，保证客户机与服务器之间的通信。HTTP 是一个客户端和服务器端请求和应答的标准（TCP）。客户端是终端用户，服务器端是网站。通过使用 Web 浏览器、网络爬虫或者其它的工具，客户端发起一个到服务器上指定端口（默认端口为80）的 HTTP 请求。</p><p><strong>HTTP请求只有POST和GET两种方法吗？</strong><br>&emsp;&emsp;No。HTTP1.1 共定义了八种请求方法，包括 GET, POST, HEAD, OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。虽然 HTTP 的请求方式有 8 种，但是我们在实际应用中常用的也就是 GET 和 POST，其他请求方式也都可以通过这两种方式间接的来实现。</p><h2 id="GET和POST"><a href="#GET和POST" class="headerlink" title="GET和POST"></a>GET和POST</h2><p>在客户机和服务器之间进行请求-响应时，两种最常被用到的方法是：GET 和 POST。</p><ul><li>GET：从指定的资源请求数据，请求指定的页面信息，并返回实体主体。</li><li>POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</li></ul><p><strong>GET 方法</strong><br><strong><font color="red">查询字符串（名称/值对）是在 GET 请求的 URL 中发送的</font></strong>，请求的数据会附加在 URL 之后，以?分割 URL 和传输数据，多个参数用&amp;。因此，GET请求的数据会暴露在地址栏中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/test/demo_form.asp?name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure></p><p><strong>POST 方法</strong></p><p><strong><font color="red">查询字符串（名称/值对）是在 POST 请求的 HTTP 消息主体中发送的</font></strong>，所以 POST 请求的数据不会暴露在地址栏中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /test/demo_form.asp HTTP/1.1</span><br><span class="line">Host: pomo16.club</span><br><span class="line">name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure></p><p><strong>二者区别</strong></p><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:left">GET</th><th style="text-align:left">POST</th></tr></thead><tbody><tr><td style="text-align:left">后退按钮/刷新</td><td style="text-align:left">无害</td><td style="text-align:left">数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</td></tr><tr><td style="text-align:left">书签</td><td style="text-align:left">可收藏为书签</td><td style="text-align:left">不可收藏为书签</td></tr><tr><td style="text-align:left">缓存</td><td style="text-align:left">能被缓存</td><td style="text-align:left">不能缓存</td></tr><tr><td style="text-align:left">编码类型</td><td style="text-align:left">application/x-www-form-urlencoded</td><td style="text-align:left">application/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。</td></tr><tr><td style="text-align:left">历史</td><td style="text-align:left">参数保留在浏览器历史中。</td><td style="text-align:left">参数不会保存在浏览器历史中。</td></tr><tr><td style="text-align:left">对数据长度的限制</td><td style="text-align:left">是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。</td><td style="text-align:left">无限制。</td></tr><tr><td style="text-align:left">对数据类型的限制</td><td style="text-align:left">只允许 ASCII 字符。</td><td style="text-align:left">没有限制。也允许二进制数据。</td></tr><tr><td style="text-align:left">安全性</td><td style="text-align:left">与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET ！</td><td style="text-align:left">POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td></tr><tr><td style="text-align:left">可见性</td><td style="text-align:left">数据在 URL 中对所有人都是可见的。</td><td style="text-align:left">数据不会显示在 URL 中。</td></tr></tbody></table><p><strong>深层解析</strong>(这部分内容总结自<a href="https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&amp;mid=100000054&amp;idx=1&amp;sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd" target="_blank" rel="noopener"> WebTechGarden </a>的文章)<br>前文已经提到 HTTP 是基于 TCP/IP 的协议，GET 和 POST 本质上就是 TCP 链接，并无差别。但是由于 HTTP 的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。<br>GET 和 POST 还有一个重大区别，简单的说：</p><p><strong><font color="red">GET 产生一个 TCP 数据包；POST产生两个 TCP 数据包。 </font></strong></p><p>对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应200（返回数据）；<br>而对于 POST，浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok（返回数据）。</p><p>因为 POST 需要两步，时间上消耗的要多一点，看起来 GET 比 POST 更有效。因此 Yahoo 团队有推荐用 GET 替换 POST 来优化网站性能。但这是一个坑！跳入需谨慎。为什么？</p><ol><li>GET 与 POST 都有自己的语义，不能随便混用。</li><li>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</li><li>并不是所有浏览器都会在 POST 中发送两次包，Firefox 就只发送一次。</li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单理解Java的jre和jdk</title>
      <link href="/2018/11/05/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3Java%E7%9A%84jre%E5%92%8Cjdk/"/>
      <url>/2018/11/05/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3Java%E7%9A%84jre%E5%92%8Cjdk/</url>
      
        <content type="html"><![CDATA[<p>jre 和 jdk 是 Java 开发中必不可少的两样东西，本文分别介绍这两个东东。<br><a id="more"></a></p><h2 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h2><p><strong>Java Runtime Environment</strong>的缩写，即Java的运行环境，是 Sun 公司的产品。</p><p>Java Runtime Environment(JRE)是可以在其上运行、测试和传输应用程序的 Java 平台，包括 Java 虚拟机(jvm)、Java 核心类库和支持文件。它不包含开发工具(JDK)–编译器、调试器和其它工具。</p><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>JDK(<strong>Java Development Kit</strong>) 是 Java 语言的软件开发工具包(SDK)。</p><table><thead><tr><th style="text-align:left">版本</th><th style="text-align:left">简述</th></tr></thead><tbody><tr><td style="text-align:left">SE(JavaSE)</td><td style="text-align:left">standard edition，标准版，是我们通常用的一个版本，从JDK 5.0开始，改名为Java SE。</td></tr><tr><td style="text-align:left">EE(JavaEE)</td><td style="text-align:left">enterprise edition，企业版，使用这种 JDK 开发 J2EE 应用程序，从 JDK 5.0 开始，改名为 Java EE。从2018年2月26日开始，J2EE 改名为 Jakarta EE。</td></tr><tr><td style="text-align:left">ME(J2ME)</td><td style="text-align:left">micro edition，主要用于移动设备、嵌入式设备上的 java 应用程序，从 JDK 5.0 开始，改名为 Java ME。</td></tr></tbody></table><p>没有 JDK 的话，无法编译 Java 程序（指 java 源码 .java 文件），如果想只运行 Java 程序（指 class 或 jar 或其它归档文件），要确保已安装相应的 JRE。</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>JDK：java development kit （java 开发工具）</p><p>JRE：java runtime environment （java 运行时环境）</p><p>简单来说，<strong>编译( java )用的是 jdk，运行( javac )用的是 jre</strong>。一般 jdk 包含了 jre，毕竟没有运行环境还编译啥呢。另外从 Java 的技术体系来说，Java 的技术体系至少包括四个部分：</p><ol><li>Java 程序设计语言</li><li>各种平台上的 Java 虚拟机 （ JVM ）</li><li>Java API 类库</li><li>一系列辅助工具，如 javac</li></ol><ul><li><p>1 + 2 + 3 + 4 = JDK</p></li><li><p>2 + 3 = JRE</p></li><li><p><strong>JDK &gt; JRE &gt; JVM</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jre </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse常用快捷键</title>
      <link href="/2018/11/05/Eclipse%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2018/11/05/Eclipse%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>对于Eclipse快捷键，就个人使用爱好总结一下，毕竟每个人的习惯不一样，这里以我自己觉得好用的一些官方快捷键为主(没有改过键！)。</p><a id="more"></a><table><thead><tr><th style="text-align:left">按键</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">Alt + /</td><td style="text-align:left">代码自动补全</td></tr><tr><td style="text-align:left">Ctrl + Alt + Up(↑)</td><td style="text-align:left">在本行上方插入一行，内容与本行相同</td></tr><tr><td style="text-align:left">Ctrl + Alt + Down(↓)</td><td style="text-align:left">在本行下方插入一行，内容与本行相同</td></tr><tr><td style="text-align:left">Ctrl + Shift + o</td><td style="text-align:left">快速导包</td></tr><tr><td style="text-align:left">Alt + Shift + j</td><td style="text-align:left">自动生成方法的注释格式</td></tr><tr><td style="text-align:left">Ctrl + /</td><td style="text-align:left">添加(或消除)//注释</td></tr><tr><td style="text-align:left">Ctrl + Shift + F</td><td style="text-align:left">代码格式化(会和搜狗输入法的快捷键冲突)</td></tr><tr><td style="text-align:left">Ctrl + Z</td><td style="text-align:left">撤回</td></tr><tr><td style="text-align:left">Ctrl + Y</td><td style="text-align:left">下一步(与撤回相反)</td></tr><tr><td style="text-align:left">Ctrl + Page up</td><td style="text-align:left">上一页文件</td></tr><tr><td style="text-align:left">Ctrl + Page Down</td><td style="text-align:left">下一页文件</td></tr><tr><td style="text-align:left">Ctrl + Shift + t</td><td style="text-align:left">打开open type</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客见闻录之图床搭建</title>
      <link href="/2018/11/05/%E5%8D%9A%E5%AE%A2%E8%A7%81%E9%97%BB%E5%BD%95%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/11/05/%E5%8D%9A%E5%AE%A2%E8%A7%81%E9%97%BB%E5%BD%95%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>在做博客的 <a href="https://pomo16.github.io/toolbox/" target="_blank" rel="noopener">工具箱</a> 和 <a href="https://pomo16.github.io/community/" target="_blank" rel="noopener">常用社区</a> 时使用了大量的图片，如果把图片放在静态文件中一起 deploy ，那么每次加载网页图片的时候就会很卡，所以无论是建博客需要还是后期文章图片引用，图床这个东西都必不可少。</p><a id="more"></a><h3 id="图床是啥？"><a href="#图床是啥？" class="headerlink" title="图床是啥？"></a>图床是啥？</h3><p>图床(Picture bed)，指的是专门用于储存文件的服务器。储存的图片可以生成外链被调用，并且在 CDN 加速的情况下，图片可以被快速加载。</p><h3 id="七牛云"><a href="#七牛云" class="headerlink" title="七牛云"></a>七牛云</h3><p><a href="https://www.qiniu.com" target="_blank" rel="noopener">七牛云</a> 简单易用，而且重要的是它是<font color="red">免费</font>的。<br>在注册账号以后，在其对象存储服务下新建存储空间，配置如下，名字自取：<br><img src="http://qnya.pomo16.club/7.png" alt><br><br></p><p><font color="red"><strong>公开空间比私有空间更容易获取外链。</strong></font><br><br><br>创建之后上传图片，然后在图片右侧点击下拉菜单即可获取外链：<br><img src="http://qnya.pomo16.club/8.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 七牛云 </tag>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客见闻录之主题个性化</title>
      <link href="/2018/11/05/%E5%8D%9A%E5%AE%A2%E8%A7%81%E9%97%BB%E5%BD%95%E4%B9%8B%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96/"/>
      <url>/2018/11/05/%E5%8D%9A%E5%AE%A2%E8%A7%81%E9%97%BB%E5%BD%95%E4%B9%8B%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>我的博客使用的是简约至上的 <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">Maupassant</a> 主题，主题虽好但也想弄点个性化的东西把玩把玩。</p><a id="more"></a><h1 id="修改page页"><a href="#修改page页" class="headerlink" title="修改page页"></a>修改page页</h1><p>通过修改 themes\maupassant\_config.yml 可以配置基本的页面布局。</p><h3 id="menu菜单"><a href="#menu菜单" class="headerlink" title="menu菜单"></a><strong>menu菜单</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  - page: 首页</span><br><span class="line">    directory: .</span><br><span class="line">    icon: fa-home</span><br><span class="line">  - page: 归档</span><br><span class="line">    directory: archives/</span><br><span class="line">    icon: fa-archive</span><br><span class="line">  - page: 关于</span><br><span class="line">    directory: about/</span><br><span class="line">    icon: fa-user</span><br><span class="line">  - page: 工具箱</span><br><span class="line">    directory: toolbox/</span><br><span class="line">    icon: fa-book</span><br><span class="line">  - page: 常用社区</span><br><span class="line">    directory: community/</span><br><span class="line">    icon: fa-comments</span><br><span class="line">  - page: rss</span><br><span class="line">    directory: atom.xml</span><br><span class="line">    icon: fa-rss</span><br></pre></td></tr></table></figure><p>这里一共配置了六个菜单项，要使自定义的菜单项生效，需要在 hexo 根目录的 source 文件夹中创建与菜单项同名的文件夹并在文件夹内创建 index.md 文件(实测 index.html 也可以，但是不方便下一步的 layout )。为了使菜单页保留 page 的布局，需要在 index.md 的 <a href="https://hexo.io/docs/front-matter" target="_blank" rel="noopener">front-matter</a> 中添加 <code>layout: page</code> 。</p><h3 id="菜单项页面布局"><a href="#菜单项页面布局" class="headerlink" title="菜单项页面布局"></a><strong>菜单项页面布局</strong></h3><p>在添加了菜单项页面之后，我们需要把他们布局。虽然这是 markdown 文件，但是可以内嵌 html5 的语法。</p><ul><li><p>坑1：在 md 中写 html 时，不要乱换行，不然 markdown 可能会当真，最后可能会影响布局。所以我的页面代码是这种 style 的：（仿佛被压缩了的代码。。。）<br>  <img src="http://qnya.pomo16.club/4.png" alt></p></li><li><p>坑2：如果页面不生效，先检查页面是不是放错路径了。<strong><font color="red">记得是根目录下的 source 不是主题目录下的 source</font></strong>。</p></li><li><p>坑3：因为父级元素的布局会干扰你的布局，而你在不知道的情况下布局就会跟玄学一样。布局的时候如果发现位置不对劲，记得使用下面的代码：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">style = &quot;padding: 0;margin: 0;&quot;</span><br></pre></td></tr></table></figure></li><li><p>坑4：如果你也想用 font awesome，直接用就好了，主题中已经导入了 font awesome，如果再导入的话会引起侧边栏图标显示错误。</p></li><li><p>坑5：如果侧边栏语言错乱，记得在 hexo 根目录下的 _config.yml 中指定语言。</p></li><li><p>坑6：记得在 index.md 的 <a href="https://hexo.io/docs/front-matter" target="_blank" rel="noopener">front-matter</a> 中添加 title ，效果显示如下：<br>  <img src="http://qnya.pomo16.club/5.png" alt></p></li></ul><h3 id="网页ico"><a href="#网页ico" class="headerlink" title="网页ico"></a><strong>网页ico</strong></h3><p>在网上找一个 16 × 16 或者 32 × 32 的 ico 文件命名为 favicon.ico 放置在 hexo 的 source 目录下即可。如果没有，可以用 png 在线制作一个(<a href="http://cn.faviconico.org/" target="_blank" rel="noopener">点这里</a>)。<strong><font color="red">如果网页显示不出来的话，大概率是 ico 或者缓存的问题，清理浏览器的缓存试一下</font></strong>。另外 edge 浏览器不用挣扎，我的就没有成功显示过。</p><h1 id="点击效果添加"><a href="#点击效果添加" class="headerlink" title="点击效果添加"></a>点击效果添加</h1><p>在我的博客中点击的时候会冒出彩色的小爱心，制作方法如下:</p><ol><li><p>添加 clicklove.js<br> 在 themes\maupassant\source\js\ 中创建 clicklove.js 并在文件中添加如下代码：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>导入 clicklove.js<br> 编辑 themes\maupassant\layout\_partial\after_footer.pug ，在末尾导入 clicklove.js：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 添加点击爱心功能</span><br><span class="line">script(type=&apos;text/javascript&apos;, src=url_for(theme.js) + &apos;/clicklove.js&apos; + &apos;?v=&apos; + theme.version)</span><br></pre></td></tr></table></figure></li></ol><h1 id="开启文章字数统计"><a href="#开启文章字数统计" class="headerlink" title="开启文章字数统计"></a>开启文章字数统计</h1><p>在 hexo 根目录下的 _config.yml 中设置 wordcount: true 即可。效果如下：<br>​    <img src="http://qnya.pomo16.club/6.png" alt></p><h1 id="fancybox"><a href="#fancybox" class="headerlink" title="fancybox"></a>fancybox</h1><p>在 hexo 根目录下的 _config.yml 中设置 fancybox: true 即可。效果如下：<br>​    <img src="http://qnya.pomo16.club/9.png" alt><br>​    但是对于作为超链接的图片我们不需要fancybox，这时只需要在相应 <code>&lt;img&gt;</code> 标签中使用 <code>class=&quot;nofancybox&quot;</code> 就可以避免fancybox样式阻止超链接使用的情况。</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客见闻录之基础搭建</title>
      <link href="/2018/11/05/%E5%8D%9A%E5%AE%A2%E8%A7%81%E9%97%BB%E5%BD%95%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/11/05/%E5%8D%9A%E5%AE%A2%E8%A7%81%E9%97%BB%E5%BD%95%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>算是第二次用 hexo 建站了吧，第一次建的 <a href="https://pomo16.coding.me" target="_blank" rel="noopener">blog</a> 还保留着，不过荒废已久了。这次建站总体过程还算顺利，这里就记录一下搭建博客中踩过的坑。</p><a id="more"></a><h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><ul><li><p><strong>安装 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs</a></strong></p></li><li><p><strong>安装 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a></strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这时候在 localhost:4000 就能看到 hexo 的欢迎界面了。</p><ul><li><p><strong>美化 blog</strong><br>  在<a href="https://hexo.io/themes/" target="_blank" rel="noopener"> hexo 主题 </a>中寻找合适的主题，一般配置都是下载主题后解压放入 hexo 根目录下的 themes，然后在 _config.yml 中把 theme 配置为所选主题名称即可。</p></li><li><p><strong>一些常用 hexo 指令</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//清除缓存和生成的静态文件</span><br><span class="line">hexo clean </span><br><span class="line">//生成静态文件</span><br><span class="line">hexo g</span><br><span class="line">//部署网站</span><br><span class="line">hexo d</span><br><span class="line">//启动hexo本地服务器</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p><strong>安装 <a href="https://git-scm.com/" target="_blank" rel="noopener">git</a></strong></p></li><li><p><strong>安装依赖</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>设置全局配置 user.name 和 user.email</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config –-global user.name &quot;xxx&quot;  //(&quot;&quot;的账号是刚才Github里面自己注册的账号) </span><br><span class="line">git config –-global user.email &quot;xxx@xxx.com&quot; //(&quot;&quot;的邮箱是你自己注册的邮箱)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>生成秘钥</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh </span><br><span class="line">ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot; //打自己的邮箱</span><br><span class="line">//如果cd失败说找不到.ssh的话，直接执行第二步生成就好了(我就是这样，23333)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>设置 ssh key 到 GitHub</strong><br>  默认生成 ssh key 在 .ssh 文件夹中，复制 id_rsa.pub 文件内容到 github-&gt;settings-&gt;SSH and GPG key-&gt;new ssh key。<br>  <img src="http://qnya.pomo16.club/2.png" alt><br>  <img src="http://qnya.pomo16.club/3.png" alt><br>  <br></p></li><li><p><strong>测试 ssh</strong><br>  如果是第一次测试的话终端会丢一个 warn 来问候你一下，敲 yes 然后回车就行了。如果收到 Hi xxx!(xxx是你的用户名)，证明 ssh 连接成功。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>在 github 上新建仓库 yourname.github.io</strong></li><li><p><strong>在 hexo 根目录下的 _config.yml 中配置 Deployment 如下：</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:xxx/xxx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repository 是仓库地址，获取地址参考下图：<br> <img src="http://qnya.pomo16.club/1.png" alt></p></li><li><p><strong>终极测试</strong><br>  输入hexo指令全家桶：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p> 或者偷一下懒：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p> 或者懒到没有得救了：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p> 部署完毕后登陆 <a href="https://xxx.github.io" target="_blank" rel="noopener">https://xxx.github.io</a> ，如果看到自己的博客那就大功告成了。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
